{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WELCOME","text":"<p>Welcome to the Book of AI, where you'll learn everything you need to know to get started w/ Azure AI services.</p> Why use the Book of AI ... <ul> <li> <p>AZURE <code>AI</code> CLI FEATURES </p> <p> Access AI services from the command line.  Learn + experiment w/ AI and LLM concepts.  Solve real-world problems w/out writing code.  Generate code samples for your projects.  </p> </li> <li> <p>UP AND RUNNING IN MINUTES </p> <p> Azure OpenAI Chat and Assistants!  Azure AI Model Catalog!  GitHub Model Marketplace!  ONNX<sup>1</sup> + Phi-3<sup>2</sup> models!  </p> </li> <li> <p>CONTENT FOR ALL JOURNEY STAGES </p> <p> Tutorials for beginners and experts.  How-to guides and reference material.  In depth sample code documentation.  Links to additional resources.  </p> </li> </ul> <ul> <li> <p> Get Started</p> <p>Install and Setup  Azure <code>ai</code> CLI Installation   Azure OpenAI Setup </p> </li> <li> <p> Azure AI Tutorials</p> <p>Azure OpenAI  Azure OpenAI Chat  Azure OpenAI Assistants </p> <p>Azure.AI.Inference  Azure AI Model Catalog  GitHub Model Marketplace </p> <p>Azure Developer CLI (azd)  AI Template Gallery </p> </li> <li> <p> ONNX GenAI Tutorials</p> <p>Phi-3 Models  ONNX w/ Phi-3 Models  ONNX Chat Basics </p> </li> </ul> <ul> <li> <p> Azure OpenAI Apps</p> <p> Create a Chat app  Create an Assistants app </p> </li> <li> <p> Azure.AI.Inference Apps</p> <p> Create an Azure AI Inference app  Create a GitHub Model app</p> </li> <li> <p> ONNX/Phi-3 Apps</p> <p> Create an ONNX Phi-3 Model app </p> </li> </ul> <ol> <li> <p>ONNX is an open format built to represent machine learning models.\u00a0\u21a9</p> </li> <li> <p>Phi-3 is a family of open AI models developed by Microsoft.\u00a0\u21a9</p> </li> </ol>"},{"location":"install-ai-cli/","title":"Azure <code>ai</code> CLI Installation","text":"<p>The Azure AI Command-Line Interface (the <code>ai</code> CLI) is a cross-platform command-line tool to connect and immediately use Azure AI services with or without writing code.</p> Windows (install)Mac (install)Linux (install)Dev Container (VS Code)Codespaces (GitHub) <p>Use <code>winget</code> to install the .NET 8 SDK, Use <code>winget</code> to install the Azure CLI (<code>az</code>),  Use <code>dotnet</code> to install the Azure AI CLI (<code>ai</code>).  </p> <pre><code>winget install -e --id Microsoft.DotNet.SDK.8\nwinget install -e --id Microsoft.AzureCLI\ndotnet tool install -g Azure.AI.CLI --prerelease\n</code></pre> If you don't have <code>winget</code> ... <p>Install WinGet Walks you thru installing the Windows Package Manager.</p> <p>Use <code>brew</code> to install the .NET 8 SDK, Use <code>brew</code> to install the Azure CLI (<code>az</code>),  Use <code>dotnet</code> to install the Azure AI CLI (<code>ai</code>).  </p> <pre><code>brew install --cask dotnet-sdk\nbrew install azure-cli\ndotnet tool install -g Azure.AI.CLI --prerelease\n</code></pre> If you don't have brew ... <p>Install Homebrew Walks you through installing Homebrew, a package manager for macOS.</p> <p>Use <code>curl</code> to download the script, Use <code>bash</code> to run the script:  </p> <pre><code>curl -sL https://aka.ms/InstallAzureAICLIDeb | sudo bash\n</code></pre> If you don't have <code>curl</code> ... <p>Install curl Walks you through installing <code>curl</code>, a command-line tool for transferring data with URL syntax.</p> <p>Use <code>git</code> to clone the repository, Use <code>code</code> to open the folder:  </p> <pre><code>git clone https://github.com/Azure/azure-ai-cli\ncode azure-ai-cli\n</code></pre> <p>Then, click the \"Reopen in Container\" button in the notification.</p> If the \"Reopen in Container\" notification does not appear ... <p>Open the command palette and run the <code>Dev Containers: Reopen in Container</code> command.</p> Learn more about Dev Containers ... <p>Installation instructions Walks you through installing and configuring the required software.</p> <p>VS Code Dev Containers Tutorial Walks you through running Dev Containers using the VS Code Extension.</p> <p>You can run the Azure <code>ai</code> CLI in a browser using GitHub Codespaces:</p> <p></p> Learn more about GitHub Codespaces ... <p>GitHub Codespaces Documentation Walks you through creating and using Codespaces.</p>"},{"location":"azure-ai-chat/basics/","title":"Azure AI Model Chat Basics","text":"TutorialGenerate Code <p>The <code>ai chat</code> command allows you to interact w/ Azure AI models from the command line.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up an Azure AI Model connection.</p> <p> Install the <code>ai</code> CLI  Setup Azure AI Model </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use Azure AI models on serverless endpoints.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up an Azure AI Model connection.</p> <p> Install the <code>ai</code> CLI  Setup Azure AI Model </p> C#GoJavaJavaScriptPython"},{"location":"azure-ai-chat/basics/#user-and-system-prompts","title":"User and System Prompts","text":"<p>The <code>ai chat</code> command sends a user prompt to GitHub's AI Inference service and displays the response.</p> User prompts are questions or statements to the model<pre><code>ai chat --user \"What is the capital of France?\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France?\n\nassistant: The capital of France is Paris.\n</code></pre> System prompts are special instructions for the model<pre><code>ai chat --user \"What is the capital of France.\" --system \"Always answer in French.\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France.\n\nassistant: La capitale de la France est Paris.\n</code></pre> --question is an alias for --user<pre><code>ai chat --question \"What is the capital of France?\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France?\n\nassistant: The capital of France is Paris.\n</code></pre>"},{"location":"azure-ai-chat/basics/#user-and-system-prompts-from-files","title":"User and System prompts from Files","text":"User prompt from a file<pre><code>ai chat --question \"@question.txt\"\n</code></pre> System prompt from a file<pre><code>ai chat --question \"What is the capital of France?\" --system \"@system.txt\"\n</code></pre>"},{"location":"azure-ai-chat/basics/#interactive-chat","title":"Interactive Chat","text":"<p>The <code>--interactive</code> flag allows back-and-forth conversations with the model.</p> Interactive chat<pre><code>ai chat --interactive\n</code></pre> Interactive with an initial question<pre><code>ai chat --interactive --question \"What is the capital of France?\"\n</code></pre> Interactive with a system prompt<pre><code>ai chat --interactive --system \"Always answer in French.\"\n</code></pre>"},{"location":"azure-ai-chat/basics/#answers-and-chat-history","title":"Answers and chat history","text":"Output answer to a file<pre><code>ai chat --question \"What is the capital of France?\" --output-answer answer.txt\n</code></pre> Output chat history to a file<pre><code>ai chat --interactive --output-chat-history history.jsonl\n</code></pre> Input chat history from a file<pre><code>ai chat --interactive --input-chat-history history.jsonl\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"azure-ai-chat/basics/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --csharp\n</code></pre>"},{"location":"azure-ai-chat/basics/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new az-inference-chat-streaming --csharp\ncd az-inference-chat-streaming-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  AzureAIInferencingChatCompletionsStreamingClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"azure-ai-chat/basics/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --go\n</code></pre>"},{"location":"azure-ai-chat/basics/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"azure-ai-chat/basics/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --java\n</code></pre>"},{"location":"azure-ai-chat/basics/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"azure-ai-chat/basics/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --javascript\n</code></pre>"},{"location":"azure-ai-chat/basics/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"azure-ai-chat/basics/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --python\n</code></pre>"},{"location":"azure-ai-chat/basics/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new az-inference-chat-streaming --python\ncd az-inference-chat-streaming-py\n</code></pre> See the code; learn how it works... <p> main.py  azureml_chat_completions_streaming.py  requirements.txt </p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre>"},{"location":"azure-ai-chat/azure-ai-chat-streaming-cs/sample-overview/","title":"Azure AI Inference Chat Streaming in C#","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure AI Inference Chat API with streaming in a C# console application.</p> <p> Program.cs  AzureAIInferencingChatCompletionsStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new az-inference-chat-streaming --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'az-inference-chat-streaming' in 'az-inference-chat-streaming-cs' (3 files)...\n\nAzureAIInferencingChatCompletionsStreaming.csproj\nAzureAIInferencingChatCompletionsStreamingClass.cs\nProgram.cs\n\nGenerating 'az-inference-chat-streaming' in 'az-inference-chat-streaming-cs' (3 files)... DONE!\n</code></pre>"},{"location":"azure-ai-chat/azure-ai-chat-streaming-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Validate and read the configuration settings from environment variables.</p> Program.cs<pre><code>var aiChatAPIKey = Environment.GetEnvironmentVariable(\"AZURE_AI_CHAT_API_KEY\") ?? \"&lt;insert your OpenAI API key here&gt;\";\nvar aiChatEndpoint = Environment.GetEnvironmentVariable(\"AZURE_AI_CHAT_ENDPOINT\") ?? \"&lt;insert your OpenAI endpoint here&gt;\";\nvar aiChatModel = Environment.GetEnvironmentVariable(\"AZURE_AI_CHAT_MODEL\");\nvar systemPrompt = Environment.GetEnvironmentVariable(\"SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n\nif (string.IsNullOrEmpty(aiChatAPIKey) || aiChatAPIKey.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(aiChatEndpoint) || aiChatEndpoint.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(systemPrompt) || systemPrompt.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use Azure AI Inference, set the following environment variables:\");\n    Console.WriteLine(\"- AZURE_AI_CHAT_API_KEY\\n- AZURE_AI_CHAT_ENDPOINT\\n- AZURE_AI_CHAT_MODEL (optional)\\n- SYSTEM_PROMPT (optional)\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> Program.cs<pre><code>var chat = new AzureAIInferenceChatCompletionsStreaming(aiChatEndpoint, aiChatAPIKey, aiChatModel, systemPrompt);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    var response = await chat.GetChatCompletionsStreamingAsync(userPrompt, update =&gt; {\n        var text = update.ContentUpdate;\n        Console.Write(text);\n    });\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"azure-ai-chat/azure-ai-chat-streaming-cs/sample-overview/#azureaiinferencingchatcompletionsstreamingclasscs","title":"AzureAIInferencingChatCompletionsStreamingClass.cs","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>public AzureAIInferenceChatCompletionsStreaming(string aiChatEndpoint, string aiChatAPIKey, string? aiChatModel, string systemPrompt)\n{\n    _systemPrompt = systemPrompt;\n    _aiChatModel = aiChatModel;\n\n    _client = string.IsNullOrEmpty(aiChatAPIKey)\n        ? new ChatCompletionsClient(new Uri(aiChatEndpoint), new DefaultAzureCredential())\n        : new ChatCompletionsClient(new Uri(aiChatEndpoint), new AzureKeyCredential(aiChatAPIKey));\n    _messages = new List&lt;ChatRequestMessage&gt;();\n\n    ClearConversation();\n}\n\npublic void ClearConversation()\n{\n    _messages.Clear();\n    _messages.Add(new ChatRequestSystemMessage(_systemPrompt));\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>public async Task&lt;string&gt; GetChatCompletionsStreamingAsync(string userPrompt, Action&lt;StreamingChatCompletionsUpdate&gt;? callback = null)\n{\n    _messages.Add(new ChatRequestUserMessage(userPrompt));\n</code></pre> <p>STEP 3: Send the chat message history to the streaming Azure AI Inference Chat API and process each update.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>    var options = new ChatCompletionsOptions(_messages);\n    if (!string.IsNullOrEmpty(_aiChatModel))\n    {\n        options.Model = _aiChatModel;\n    }\n\n    var responseContent = string.Empty;\n    var response = await _client.CompleteStreamingAsync(options);\n    await foreach (var update in response)\n    {\n        var content = update.ContentUpdate;\n\n        if (update.FinishReason == CompletionsFinishReason.ContentFiltered)\n        {\n            content = $\"{content}\\nWARNING: Content filtered!\";\n        }\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>        if (string.IsNullOrEmpty(content)) continue;\n\n        responseContent += content;\n        if (callback != null) callback(update);\n    }\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return response.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>    _messages.Add(new ChatRequestAssistantMessage() { Content = responseContent });\n    return responseContent;\n}\n</code></pre>"},{"location":"azure-ai-chat/azure-ai-chat-streaming-py/sample-overview/","title":"Azure AI Inference Chat Streaming in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure AI Inference Chat API with streaming in a Python application.</p> <p> main.py  azureml_chat_completions_streaming.py </p> How to generate this sample Command<pre><code>ai dev new az-inference-chat-streaming --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'az-inference-chat-streaming' in 'az-inference-chat-streaming-py' (3 files)...\n\nazureml_chat_completions_streaming.py\nmain.py\nrequirements.txt\n\nGenerating 'az-inference-chat-streaming' in 'az-inference-chat-streaming-py' (3 files)... DONE!\n</code></pre>"},{"location":"azure-ai-chat/azure-ai-chat-streaming-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.py<pre><code>chat_api_key = os.getenv(\"AZURE_AI_CHAT_API_KEY\", '&lt;insert your Azure AI Inference API key here&gt;')\nchat_endpoint = os.getenv(\"AZURE_AI_CHAT_ENDPOINT\", '&lt;insert your Azure AI Inference endpoint here&gt;')\nchat_model = os.getenv('AZURE_AI_CHAT_MODEL', '')\nchat_system_prompt = os.getenv('SYSTEM_PROMPT', 'You are a helpful AI assistant.')\n</code></pre> <p>STEP 2: Validate the environment variables.</p> main.py<pre><code>ok = all([chat_api_key, chat_endpoint, chat_system_prompt]) and \\\n     all([not s.startswith('&lt;insert') for s in [chat_api_key, chat_endpoint, chat_system_prompt]])\nif not ok:\n    print(\n        'To use Azure AI Chat Streaming, set the following environment variables:' +\n        '\\n- AZURE_AI_CHAT_API_KEY' +\n        '\\n- AZURE_AI_CHAT_ENDPOINT' +\n        '\\n- AZURE_AI_CHAT_MODEL (optional)' +\n        '\\n- SYSTEM_PROMPT (optional)')\n    sys.exit(1)\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings.</p> main.py<pre><code>chat = AzureAIInferenceChatCompletionsStreaming(chat_endpoint, chat_api_key, chat_model, chat_system_prompt)\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received. Handle exceptions and exit gracefully.</p> main.py<pre><code>while True:\n    user_input = input('User: ')\n    if user_input == 'exit' or user_input == '':\n        break\n\n    print('\\nAssistant: ', end='')\n    response = chat.get_chat_completions(user_input, lambda content: print(content, end=''))\n    print('\\n')\n</code></pre>"},{"location":"azure-ai-chat/azure-ai-chat-streaming-py/sample-overview/#azureml_chat_completions_streamingpy","title":"azureml_chat_completions_streaming.py","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> azureml_chat_completions_streaming.py<pre><code>class AzureAIInferenceChatCompletionsStreaming:\n    def __init__(self, chat_endpoint, chat_api_key, chat_model, chat_system_prompt):\n        self.chat_system_prompt = chat_system_prompt\n        self.chat_model = chat_model\n        self.client = ChatCompletionsClient(endpoint=chat_endpoint, credential=AzureKeyCredential(chat_api_key))\n        self.clear_conversation()\n\n    def clear_conversation(self):\n        self.messages = [\n            SystemMessage(content=self.chat_system_prompt)\n        ];\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> azureml_chat_completions_streaming.py<pre><code>    def get_chat_completions(self, user_input, callback):\n        self.messages.append(UserMessage(content=user_input))\n</code></pre> <p>STEP 3: Send the chat message history to the streaming Azure AI Chat API and process each update.</p> azureml_chat_completions_streaming.py<pre><code>        complete_content = ''\n        response = self.client.complete(\n            messages=self.messages,\n            model=self.chat_model,\n            stream=True,\n        )\n\n        for update in response:\n\n            if update.choices is None or len(update.choices) == 0: \n                continue\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> azureml_chat_completions_streaming.py<pre><code>            content = update.choices[0].delta.content or \"\"\n            if content is None: continue\n\n            complete_content += content\n            callback(content)\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return the response.</p> azureml_chat_completions_streaming.py<pre><code>        self.messages.append(AssistantMessage(content=complete_content))\n        return complete_content\n</code></pre>"},{"location":"github-chat/basics/","title":"GitHub Model Chat Basics","text":"TutorialGenerate Code <p>The <code>ai chat</code> command allows you to interact w/ GitHub Marketplace models from the command line.  </p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up a GitHub Model.</p> <p> Install the <code>ai</code> CLI  Setup GitHub Model Marketplace </p> <p>The <code>ai dev new</code> command generates sample code for interacting with the GitHub Model Marketplace.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up a GitHub Model.</p> <p> Install the <code>ai</code> CLI  Setup GitHub Model Marketplace </p> C#GoJavaJavaScriptPython"},{"location":"github-chat/basics/#user-and-system-prompts","title":"User and System Prompts","text":"<p>The <code>ai chat</code> command sends a user prompt to GitHub's AI Inference service and displays the response.</p> User prompts are questions or statements to the model<pre><code>ai chat --user \"What is the capital of France?\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France?\n\nassistant: The capital of France is Paris.\n</code></pre> System prompts are special instructions for the model<pre><code>ai chat --user \"What is the capital of France.\" --system \"Always answer in French.\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France.\n\nassistant: La capitale de la France est Paris.\n</code></pre> --question is an alias for --user<pre><code>ai chat --question \"What is the capital of France?\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France?\n\nassistant: The capital of France is Paris.\n</code></pre>"},{"location":"github-chat/basics/#user-and-system-prompts-from-files","title":"User and System prompts from Files","text":"User prompt from a file<pre><code>ai chat --question \"@question.txt\"\n</code></pre> System prompt from a file<pre><code>ai chat --question \"What is the capital of France?\" --system \"@system.txt\"\n</code></pre>"},{"location":"github-chat/basics/#interactive-chat","title":"Interactive Chat","text":"<p>The <code>--interactive</code> flag allows back-and-forth conversations with the model.</p> Interactive chat<pre><code>ai chat --interactive\n</code></pre> Interactive with an initial question<pre><code>ai chat --interactive --question \"What is the capital of France?\"\n</code></pre> Interactive with a system prompt<pre><code>ai chat --interactive --system \"Always answer in French.\"\n</code></pre>"},{"location":"github-chat/basics/#answers-and-chat-history","title":"Answers and chat history","text":"Output answer to a file<pre><code>ai chat --question \"What is the capital of France?\" --output-answer answer.txt\n</code></pre> Output chat history to a file<pre><code>ai chat --interactive --output-chat-history history.jsonl\n</code></pre> Input chat history from a file<pre><code>ai chat --interactive --input-chat-history history.jsonl\n</code></pre>"},{"location":"github-chat/basics/#model-selection","title":"Model Selection","text":"Use a different model<pre><code>ai chat --interactive --model Mistral-large-2407\n</code></pre> Set default model<pre><code>ai config --set chat.model Mistral-large-2407\n</code></pre> Use default model<pre><code>ai chat --interactive\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"github-chat/basics/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --csharp\n</code></pre>"},{"location":"github-chat/basics/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new az-inference-chat-streaming --csharp\ncd az-inference-chat-streaming-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  AzureAIInferencingChatCompletionsStreamingClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"github-chat/basics/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --go\n</code></pre>"},{"location":"github-chat/basics/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"github-chat/basics/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --java\n</code></pre>"},{"location":"github-chat/basics/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"github-chat/basics/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --javascript\n</code></pre>"},{"location":"github-chat/basics/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"github-chat/basics/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list inference --python\n</code></pre>"},{"location":"github-chat/basics/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new az-inference-chat-streaming --python\ncd az-inference-chat-streaming-py\n</code></pre> See the code; learn what it does... <p> main.py  requirements.txt </p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre>"},{"location":"github-chat/github-chat-streaming-cs/sample-overview/","title":"Azure AI Inferencing Chat Streaming in C#","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure AI Inference Chat API with streaming in a C# console application.</p> <p> Program.cs  AzureAIInferencingChatCompletionsStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new az-inference-chat-streaming --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'az-inference-chat-streaming' in 'az-inference-chat-streaming-cs' (3 files)...\n\nAzureAIInferencingChatCompletionsStreaming.csproj\nAzureAIInferencingChatCompletionsStreamingClass.cs\nProgram.cs\n\nGenerating 'az-inference-chat-streaming' in 'az-inference-chat-streaming-cs' (3 files)... DONE!\n</code></pre>"},{"location":"github-chat/github-chat-streaming-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables and validate them.</p> Program.cs<pre><code>var aiChatAPIKey = Environment.GetEnvironmentVariable(\"AZURE_AI_CHAT_API_KEY\") ?? \"&lt;insert your OpenAI API key here&gt;\";\nvar aiChatEndpoint = Environment.GetEnvironmentVariable(\"AZURE_AI_CHAT_ENDPOINT\") ?? \"&lt;insert your OpenAI endpoint here&gt;\";\nvar aiChatModel = Environment.GetEnvironmentVariable(\"AZURE_AI_CHAT_MODEL\"); // null is fine\nvar systemPrompt = Environment.GetEnvironmentVariable(\"SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n\nif (string.IsNullOrEmpty(aiChatAPIKey) || aiChatAPIKey.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(aiChatEndpoint) || aiChatEndpoint.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(systemPrompt) || systemPrompt.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use Azure AI Inference, set the following environment variables:\");\n    Console.WriteLine(\"- AZURE_AI_CHAT_API_KEY\\n- AZURE_AI_CHAT_ENDPOINT\\n- AZURE_AI_CHAT_MODEL (optional)\\n- SYSTEM_PROMPT (optional)\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> Program.cs<pre><code>var chat = new AzureAIInferenceChatCompletionsStreaming(aiChatEndpoint, aiChatAPIKey, aiChatModel, systemPrompt);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    var response = await chat.GetChatCompletionsStreamingAsync(userPrompt, update =&gt; {\n        var text = update.ContentUpdate;\n        Console.Write(text);\n    });\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"github-chat/github-chat-streaming-cs/sample-overview/#azureaiinferencingchatcompletionsstreamingclasscs","title":"AzureAIInferencingChatCompletionsStreamingClass.cs","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>public AzureAIInferenceChatCompletionsStreaming(string aiChatEndpoint, string aiChatAPIKey, string? aiChatModel, string systemPrompt)\n{\n    _systemPrompt = systemPrompt;\n    _aiChatModel = aiChatModel;\n\n    _client = string.IsNullOrEmpty(aiChatAPIKey)\n        ? new ChatCompletionsClient(new Uri(aiChatEndpoint), new DefaultAzureCredential())\n        : new ChatCompletionsClient(new Uri(aiChatEndpoint), new AzureKeyCredential(aiChatAPIKey));\n    _messages = new List&lt;ChatRequestMessage&gt;();\n\n    ClearConversation();\n}\n\npublic void ClearConversation()\n{\n    _messages.Clear();\n    _messages.Add(new ChatRequestSystemMessage(_systemPrompt));\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>public async Task&lt;string&gt; GetChatCompletionsStreamingAsync(string userPrompt, Action&lt;StreamingChatCompletionsUpdate&gt;? callback = null)\n{\n    _messages.Add(new ChatRequestUserMessage(userPrompt));\n</code></pre> <p>STEP 3: Send the chat message history to the streaming Azure AI Inference Chat API and process each update.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>    var responseContent = string.Empty;\n    var response = await _client.CompleteStreamingAsync(options);\n    await foreach (var update in response)\n    {\n        var content = update.ContentUpdate;\n\n        if (update.FinishReason == CompletionsFinishReason.ContentFiltered)\n        {\n            content = $\"{content}\\nWARNING: Content filtered!\";\n        }\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>        if (string.IsNullOrEmpty(content)) continue;\n\n        responseContent += content;\n        if (callback != null) callback(update);\n    }\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return response.</p> AzureAIInferencingChatCompletionsStreamingClass.cs<pre><code>    _messages.Add(new ChatRequestAssistantMessage() { Content = responseContent });\n    return responseContent;\n}\n</code></pre>"},{"location":"github-chat/github-chat-streaming-py/sample-overview/","title":"Azure Inference Chat Streaming in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure AI Inference Chat API with streaming in a Python console application.</p> <p> main.py  requirements.txt </p> How to generate this sample Command<pre><code>ai dev new az-inference-chat-streaming --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'az-inference-chat-streaming' in 'az-inference-chat-streaming-py' (3 files)...\n\nmain.py\nrequirements.txt\n\nGenerating 'az-inference-chat-streaming' in 'az-inference-chat-streaming-py' (2 files)... DONE!\n</code></pre>"},{"location":"github-chat/github-chat-streaming-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Import required libraries and modules.</p> main.py<pre><code>from azureml_chat_completions_streaming import AzureAIInferenceChatCompletionsStreaming\nimport os\nimport sys\n</code></pre> <p>STEP 2: Define the main function that reads the configuration settings from environment variables.</p> main.py<pre><code>def main():\n    chat_api_key = os.getenv(\"AZURE_AI_CHAT_API_KEY\", '&lt;insert your Azure AI Inference API key here&gt;')\n    chat_endpoint = os.getenv(\"AZURE_AI_CHAT_ENDPOINT\", '&lt;insert your Azure AI Inference endpoint here&gt;')\n    chat_model = os.getenv('AZURE_AI_CHAT_MODEL', '')\n    chat_system_prompt = os.getenv('SYSTEM_PROMPT', 'You are a helpful AI assistant.')\n</code></pre> <p>STEP 3: Validate the configuration settings.</p> main.py<pre><code>    ok = all([chat_api_key, chat_endpoint, chat_system_prompt]) and \\\n         all([not s.startswith('&lt;insert') for s in [chat_api_key, chat_endpoint, chat_system_prompt]])\n    if not ok:\n        print(\n            'To use Azure AI Chat Streaming, set the following environment variables:' +\n            '\\n- AZURE_AI_CHAT_API_KEY' +\n            '\\n- AZURE_AI_CHAT_ENDPOINT' +\n            '\\n- AZURE_AI_CHAT_MODEL (optional)' +\n            '\\n- SYSTEM_PROMPT (optional)')\n        sys.exit(1)\n</code></pre> <p>STEP 4: Initialize the AzureAIInferenceChatCompletionsStreaming class with the configuration settings.</p> main.py<pre><code>    chat = AzureAIInferenceChatCompletionsStreaming(chat_endpoint, chat_api_key, chat_model, chat_system_prompt)\n</code></pre> <p>STEP 5: Implement an input loop to obtain user input.</p> main.py<pre><code>    while True:\n        user_input = input('User: ')\n        if user_input == 'exit' or user_input == '':\n            break\n</code></pre> <p>STEP 6: Use the helper class to get the assistant's response and display responses as they are received.</p> main.py<pre><code>        print('\\nAssistant: ', end='')\n        response = chat.get_chat_completions(user_input, lambda content: print(content, end=''))\n        print('\\n')\n</code></pre>"},{"location":"onnx-chat/basics/","title":"ONNX Chat","text":"TutorialGenerate Code <p>The <code>ai chat</code> command allows you to interact w/ ONNX models from the command line.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up an ONNX model.</p> <p> Install the <code>ai</code> CLI  Setup ONNX and Phi-3 Model </p> <p>The <code>ai dev new</code> allows you to generate sample code that demonstrates how to use ONNX models.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up an ONNX model.</p> <p> Install the <code>ai</code> CLI  Setup ONNX and Phi-3 Model </p> C#GoJavaJavaScriptPython"},{"location":"onnx-chat/basics/#prompts","title":"Prompts","text":"One prompt<pre><code>ai chat --model-path @mp --user \"What is the capital of France?\"\n</code></pre> Interactive chat<pre><code>ai chat --model-path @mp --interactive\n</code></pre> System prompts<pre><code>ai chat --model-path @mp --interactive --system @prompt.txt\n</code></pre> User and system prompts<pre><code>ai chat --model-path @mp --interactive --system @prompt.txt --user \"Tell me a joke\"\n</code></pre>"},{"location":"onnx-chat/basics/#answers-and-chat-history","title":"Answers and chat history","text":"Output answer to a file<pre><code>ai chat --model-path @mp --interactive --output-answer answer.txt\n</code></pre> Output chat history to a file<pre><code>ai chat --model-path @mp --interactive --output-chat-history history.jsonl\n</code></pre> Input chat history<pre><code>ai chat --model-path @mp --interactive --input-chat-history history.jsonl\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"onnx-chat/basics/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --csharp\n</code></pre>"},{"location":"onnx-chat/basics/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new phi3-onnx-chat-streaming --csharp\ncd phi3-onnx-chat-streaming-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  OnnxGenAIChatCompletionsStreamingClass.cs  get-phi3-mini-onnx.cmd  Phi3ChatStreaming.csproj </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Get models<pre><code>./get-phi3-mini-onnx.cmd\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"onnx-chat/basics/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --go\n</code></pre>"},{"location":"onnx-chat/basics/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"onnx-chat/basics/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --java\n</code></pre>"},{"location":"onnx-chat/basics/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"onnx-chat/basics/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --javascript\n</code></pre>"},{"location":"onnx-chat/basics/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"onnx-chat/basics/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --python\n</code></pre>"},{"location":"onnx-chat/basics/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"onnx-chat/functions/","title":"ONNX Chat with Function Calling","text":"TutorialGenerate Code <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use ONNX with Phi-3 models and Function Calling.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up an ONNX model.</p> <p> Install the <code>ai</code> CLI  Setup ONNX and Phi-3 Model </p> C#GoJavaJavaScriptPython"},{"location":"onnx-chat/functions/#extending-the-phi-3s-world-knowledge-with-functions","title":"Extending the Phi-3's world knowledge with functions","text":"<p>THE CLI does NOT currently work with ONNX/Phi-3</p> <p>The C# sample w/ functions DOES work with ONNX/Phi-3</p> Without functions<pre><code>ai chat --model-path @mp --user \"What time is it?\"\n</code></pre> With built-in functions<pre><code>ai chat --model-path @mp --user \"What time is it?\" --built-in-functions\n</code></pre> File interaction without functions<pre><code>ai chat --model-path @mp --user \"What is in the README.md file?\"\n</code></pre> File interaction with built-in functions<pre><code>ai chat --model-path @mp --user \"What is in the README.md file?\" --built-in-functions\n</code></pre>"},{"location":"onnx-chat/functions/#allowing-the-llm-to-interact-with-your-code","title":"Allowing the LLM to interact with your code","text":"Without functions<pre><code>ai chat --model-path @mp --user \"Save the pledge of allegiance to 'pledge.txt'\"\n</code></pre> With built-in functions<pre><code>ai chat --model-path @mp --user \"Save the pledge of allegiance to 'pledge.txt'\" --built-in-functions\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"onnx-chat/functions/#list-all-samples","title":"List all samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --csharp\n</code></pre>"},{"location":"onnx-chat/functions/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new phi3-onnx-chat-streaming-with-functions --csharp\ncd phi3-onnx-chat-streaming-with-functions-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  ONNXChatCompletionsStreamingWithFunctions.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"onnx-chat/functions/#list-samples","title":"List Samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --go\n</code></pre>"},{"location":"onnx-chat/functions/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"onnx-chat/functions/#list-all-samples_1","title":"List all samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --java\n</code></pre>"},{"location":"onnx-chat/functions/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"onnx-chat/functions/#list-all-samples_2","title":"List all samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --javascript\n</code></pre>"},{"location":"onnx-chat/functions/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"onnx-chat/functions/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list onnx --python\n</code></pre>"},{"location":"onnx-chat/functions/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...  </p>"},{"location":"onnx-chat/onnx-chat-streaming-cs/sample-overview/","title":"ONNX Chat Streaming in C#","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the ONNX Chat API with streaming in a C# console application.</p> <p> Program.cs  OnnxGenAIChatCompletionsStreamingClass.cs  get-phi3-mini-onnx.cmd  Phi3ChatStreaming.csproj </p> How to generate this sample Command<pre><code>ai dev new phi3-onnx-chat-streaming --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'phi3-onnx-chat-streaming' in 'phi3-onnx-chat-streaming-cs' (4 files)...\n\nOnnxGenAIChatCompletionsStreamingClass.cs\nProgram.cs\nget-phi3-mini-onnx.cmd\nPhi3ChatStreaming.csproj\n\nGenerating 'phi3-onnx-chat-streaming' in 'phi3-onnx-chat-streaming-cs' (4 files)... DONE!\n</code></pre>"},{"location":"onnx-chat/onnx-chat-streaming-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var modelDirectory = Environment.GetEnvironmentVariable(\"ONNX_GENAI_MODEL_PATH\") ?? \"&lt;insert your ONNX GenAI model path here&gt;\";\nvar systemPrompt = Environment.GetEnvironmentVariable(\"ONNX_GENAI_SYSTEM_PROMPT\") ?? \"You are a helpful assistant.\";\n</code></pre> <p>STEP 2: Validate the configuration settings.</p> Program.cs<pre><code>if (string.IsNullOrEmpty(modelDirectory) || modelDirectory.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(systemPrompt) || systemPrompt.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use this ONNX GenAI sample, set the following environment variables:\");\n    Console.WriteLine(\"  ONNX_GENAI_MODEL_PATH\\n  ONNX_GENAI_SYSTEM_PROMPT\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings.</p> Program.cs<pre><code>var chat = new OnnxGenAIChatStreamingClass(modelDirectory, systemPrompt);\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var input = Console.ReadLine();\n    if (string.IsNullOrEmpty(input) || input == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    chat.GetChatCompletionStreaming(input, update =&gt; {\n        Console.Write(update);\n    });\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"onnx-chat/onnx-chat-streaming-cs/sample-overview/#onnxgenaichatcompletionsstreamingclasscs","title":"OnnxGenAIChatCompletionsStreamingClass.cs","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> OnnxGenAIChatCompletionsStreamingClass.cs<pre><code>public OnnxGenAIChatStreamingClass(string modelDirectory, string systemPrompt)\n{\n    _modelDirectory = modelDirectory;\n    _systemPrompt = systemPrompt;\n\n    _messages = new List&lt;ContentMessage&gt;();\n    _messages.Add(new ContentMessage { Role = \"system\", Content = systemPrompt });\n\n    _model = new Model(modelDirectory);\n    _tokenizer = new Tokenizer(_model);\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OnnxGenAIChatCompletionsStreamingClass.cs<pre><code>public string GetChatCompletionStreaming(string userPrompt, Action&lt;string&gt;? callback = null)\n{\n    _messages.Add(new ContentMessage { Role = \"user\", Content = userPrompt });\n</code></pre> <p>STEP 3: Encode the chat message history.</p> OnnxGenAIChatCompletionsStreamingClass.cs<pre><code>    var responseContent = string.Empty;\n    using var tokens = _tokenizer.Encode(string.Join(\"\\n\", _messages\n        .Select(m =&gt; $\"&lt;|{m.Role}|&gt;\\n{m.Content}\\n&lt;|end|&gt;\"))\n        + \"&lt;|assistant|&gt;\\n\");\n</code></pre> <p>STEP 4: Set the generator parameters and input sequences.</p> OnnxGenAIChatCompletionsStreamingClass.cs<pre><code>    using var generatorParams = new GeneratorParams(_model);\n    generatorParams.SetSearchOption(\"max_length\", 2048);\n    generatorParams.SetInputSequences(tokens);\n</code></pre> <p>STEP 5: Generate the response by computing logits and generating tokens until completion.</p> OnnxGenAIChatCompletionsStreamingClass.cs<pre><code>    using var generator = new Generator(_model, generatorParams);\n</code></pre> <p>STEP 6: Decode the generated tokens and accumulate the response.</p> OnnxGenAIChatCompletionsStreamingClass.cs<pre><code>    var sb = new StringBuilder();\n    while (!generator.IsDone())\n    {\n        generator.ComputeLogits();\n        generator.GenerateNextToken();\n\n        var outputTokens = generator.GetSequence(0);\n        var newToken = outputTokens.Slice(outputTokens.Length - 1, 1);\n\n        var output = _tokenizer.Decode(newToken);\n        sb.Append(output);\n</code></pre> <p>STEP 7: Invoke the callback with each update.</p> OnnxGenAIChatCompletionsStreamingClass.cs<pre><code>        callback?.Invoke(output);\n    }\n</code></pre> <p>STEP 8: Add the assistant's response to the chat message history and return the response.</p> OnnxGenAIChatCompletionsStreamingClass.cs<pre><code>    responseContent = sb.ToString();\n    _messages.Add(new ContentMessage { Role = \"assistant\", Content = responseContent });\n\n    return responseContent;\n}\n</code></pre>"},{"location":"onnx-chat/onnx-chat-streaming-with-functions-cs/sample-overview/","title":"ONNX Chat Streaming with Functions in C#","text":"<p>This sample demonstrates how to use the ONNX Chat API with streaming in a C# console application, including function calling.</p> <p> Program.cs  OnnxGenAIChatCompletionsStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new phi3-onnx-chat-streaming-with-functions --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'phi3-onnx-chat-streaming-with-functions' in 'phi3-onnx-chat-streaming-with-functions-cs' (3 files)...\n\nFunctionFactory.cs\nOnnxGenAIChatCompletionsStreamingClass.cs\nProgram.cs\n\nGenerating 'phi3-onnx-chat-streaming-with-functions' in 'phi3-onnx-chat-streaming-with-functions-cs' (3 files)... DONE!\n</code></pre>"},{"location":"onnx-chat/onnx-chat-streaming-with-functions-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var modelDirectory = Environment.GetEnvironmentVariable(\"ONNX_GENAI_MODEL_PATH\") ?? \"&lt;insert your ONNX GenAI model path here&gt;\";\nvar systemPrompt = Environment.GetEnvironmentVariable(\"ONNX_GENAI_SYSTEM_PROMPT\") ?? \"@system.txt\";\n\nif (string.IsNullOrEmpty(modelDirectory) || modelDirectory.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(systemPrompt) || systemPrompt.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use this ONNX GenAI sample, set the following environment variables:\");\n    Console.WriteLine(\"  ONNX_GENAI_MODEL_PATH\\n  ONNX_GENAI_SYSTEM_PROMPT\");\n    Environment.Exit(1);\n}\n\nif (systemPrompt.StartsWith(\"@\") &amp;&amp; File.Exists(systemPrompt.Substring(1)))\n{\n    systemPrompt = File.ReadAllText(systemPrompt.Substring(1));\n}\n</code></pre> <p>STEP 2: Validate the configuration settings.</p> Program.cs<pre><code>if (string.IsNullOrEmpty(modelDirectory) || modelDirectory.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(systemPrompt) || systemPrompt.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use this ONNX GenAI sample, set the following environment variables:\");\n    Console.WriteLine(\"  ONNX_GENAI_MODEL_PATH\\n  ONNX_GENAI_SYSTEM_PROMPT\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 3: Initialize <code>FunctionFactory</code> with custom functions.</p> Program.cs<pre><code>var factory = new FunctionFactory();\nfactory.AddFunctions(typeof(OnnxGenAIChatCompletionsCustomFunctions));\n</code></pre> <p>STEP 4: Initialize the <code>OnnxGenAIChatStreamingClass</code> with model directory, system prompt, and factory.</p> Program.cs<pre><code>var chat = new OnnxGenAIChatStreamingClass(modelDirectory, systemPrompt, factory);\n</code></pre> <p>STEP 5: Obtain user input, read from file if necessary, and use the helper class to get the assistant's response, displaying responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var input = Console.ReadLine();\n    if (string.IsNullOrEmpty(input) || input == \"exit\") break;\n\n    if (input.StartsWith('@') &amp;&amp; File.Exists(input.Substring(1)))\n    {\n        input = File.ReadAllText(input.Substring(1));\n    }\n\n    Console.Write(\"\\nAssistant: \");\n    chat.GetChatCompletionStreaming(input, update =&gt; {\n        Console.Write(update);\n    });\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"onnx-chat/onnx-chat-streaming-with-functions-cs/sample-overview/#onnxgenaichatstreamingclasscs","title":"OnnxGenAIChatStreamingClass.cs","text":"<p>STEP 1: Initialize the chat model and tokenizer, setting up the function call context.</p> OnnxGenAIChatStreamingClass.cs<pre><code>public OnnxGenAIChatStreamingClass(string modelDirectory, string systemPrompt, FunctionFactory factory)\n{\n    systemPrompt = UpdateSystemPrompt(systemPrompt, factory);\n\n    _modelDirectory = modelDirectory;\n    _systemPrompt = systemPrompt;\n    _factory = factory;\n\n    _messages = new List&lt;OnnxGenAIChatContentMessage&gt;();\n    _messages.Add(new OnnxGenAIChatContentMessage { Role = \"system\", Content = _systemPrompt });\n\n    _model = new Model(_modelDirectory);\n    _tokenizer = new Tokenizer(_model);\n\n    _functionCallContext = new OnnxGenAIChatFunctionCallContext(_factory, _messages);\n}\n</code></pre> <p>STEP 2: Clear previous messages and initialize chat message history with a system message.</p> OnnxGenAIChatStreamingClass.cs<pre><code>public void ClearMessages()\n{\n    _messages.Clear();\n    _messages.Add(new OnnxGenAIChatContentMessage { Role = \"system\", Content = _systemPrompt });\n}\n</code></pre> <p>STEP 3: When the user provides input, add the user message to the chat message history.</p> OnnxGenAIChatStreamingClass.cs<pre><code>public string GetChatCompletionStreaming(string userPrompt, Action&lt;string&gt;? callback = null)\n{\n    var debug = Environment.GetEnvironmentVariable(\"DEBUG\") != null;\n\n    _messages.Add(new OnnxGenAIChatContentMessage { Role = \"user\", Content = userPrompt });\n</code></pre> <p>STEP 4: Encode the chat message history.</p> OnnxGenAIChatStreamingClass.cs<pre><code>    var responseContent = string.Empty;\n    using var tokens = _tokenizer.Encode(string.Join(\"\\n\", _messages\n        .Select(m =&gt; $\"&lt;|{m.Role}|&gt;\\n{m.Content}\\n&lt;|end|&gt;\"))\n        + \"&lt;|assistant|&gt;\\n\");\n</code></pre> <p>STEP 5: Set the generator parameters and input sequences.</p> OnnxGenAIChatStreamingClass.cs<pre><code>    using var generatorParams = new GeneratorParams(_model);\n    generatorParams.SetSearchOption(\"max_length\", 2048);\n    generatorParams.SetInputSequences(tokens);\n</code></pre> <p>STEP 6: Generate the response by computing logits and generating tokens until completion.</p> OnnxGenAIChatStreamingClass.cs<pre><code>    using var generator = new Generator(_model, generatorParams);\n</code></pre> <p>STEP 7: Decode the generated tokens and accumulate the response.</p> OnnxGenAIChatStreamingClass.cs<pre><code>    var sb = new StringBuilder();\n    while (!generator.IsDone())\n    {\n        generator.ComputeLogits();\n        generator.GenerateNextToken();\n\n        var outputTokens = generator.GetSequence(0);\n        var newToken = outputTokens.Slice(outputTokens.Length - 1, 1);\n\n        var output = _tokenizer.Decode(newToken);\n        sb.Append(output);\n\n        callback?.Invoke(output);\n    }\n</code></pre> <p>STEP 8: Check for functions within the response and call them if necessary.</p> OnnxGenAIChatStreamingClass.cs<pre><code>    if (_functionCallContext.TryCallFunctions(sb))\n    {\n        _functionCallContext.Clear();\n        continue;\n    }\n\n    responseContent = sb.ToString();\n    var ok = !string.IsNullOrWhiteSpace(responseContent);\n    if (ok)\n    {\n        _messages.Add(new OnnxGenAIChatContentMessage { Role = \"assistant\", Content = responseContent });\n    }\n\n    return responseContent;\n}\n</code></pre> <p>STEP 9: Add the assistant's response to the chat message history and return the response.</p> OnnxGenAIChatStreamingClass.cs<pre><code>    _messages.Add(new OnnxGenAIChatContentMessage { Role = \"assistant\", Content = responseContent });\n    return responseContent;\n}\n</code></pre>"},{"location":"openai-asst/basics/","title":"OpenAI Assistants Basics","text":"TutorialGenerate Code <p>The <code>ai chat</code> commands allow you to create, manage, and interact with OpenAI's Assistants and persisted threads.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use OpenAI Assistants.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#JavaScriptPython"},{"location":"openai-asst/basics/#create-an-assistant","title":"Create an Assistant","text":"Create a simple assistant<pre><code>ai chat assistant create --name MyAssistant\n</code></pre>"},{"location":"openai-asst/basics/#threads","title":"Threads","text":"Start an interactive chat<pre><code>ai chat --interactive\n</code></pre> Continue with a previous thread<pre><code>ai chat --interactive --thread-id ID\n</code></pre> Ask a question and save the thread ID<pre><code>ai chat --question \"...\" --output-thread-id myNewThread.txt\n</code></pre> Use a saved thread ID<pre><code>ai chat --question \"...\" --thread-id @myNewThread.txt\n</code></pre> Interactive chat with thread ID and save history<pre><code>ai chat --interactive --thread-id @myNewThread.txt --output-chat-history history.jsonl\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"openai-asst/basics/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst --csharp\nai dev new list openai-asst-streaming --csharp\n</code></pre>"},{"location":"openai-asst/basics/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"StreamingNon-streaming <p>Generate a C# sample that demonstrates how to use OpenAI Assistants with streaming.</p> <pre><code>ai dev new openai-asst-streaming --csharp\ncd openai-asst-streaming-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIAssistantsStreamingClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre> <p>Generate a C# sample that demonstrates how to use OpenAI Assistants without streaming.</p> <pre><code>ai dev new openai-asst --csharp\ncd openai-asst-csharp\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIAssistantsClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"openai-asst/basics/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst --javascript\nai dev new list openai-asst-streaming --javascript\n</code></pre>"},{"location":"openai-asst/basics/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"StreamingNon-streaming <p>Generate a JavaScript sample that demonstrates how to use OpenAI Assistants with streaming.</p> <pre><code>ai dev new openai-asst-streaming --javascript\ncd openai-asst-streaming-js\n</code></pre> See the code; learn how it works... <p> main.js  OpenAIAssistantsStreamingClass.js </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>ai dev shell\nnode main.js\n</code></pre> <p>Generate a JavaScript sample that demonstrates how to use OpenAI Assistants without streaming.</p> <pre><code>ai dev new openai-asst --javascript\ncd openai-asst-js\n</code></pre> See the code; learn how it works... <p> main.js  OpenAIAssistantsClass.js</p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>ai dev shell\nnode main.js\n</code></pre>"},{"location":"openai-asst/basics/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst --python\nai dev new list openai-asst-streaming --python\n</code></pre>"},{"location":"openai-asst/basics/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"StreamingNon-streaming <p>Generate a Python sample that demonstrates how to use OpenAI Assistants with streaming.</p> <pre><code>ai dev new openai-asst-streaming --python\ncd openai-asst-streaming-py\n</code></pre> See the code; learn how it works... <p> main.py  openai_assistants_streaming.py </p> <p> Deep dive on how it works </p> Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> <p>Generate a Python sample that demonstrates how to use OpenAI Assistants without streaming.</p> <pre><code>ai dev new openai-asst --python\ncd openai-asst-py\n</code></pre> See the code; learn how it works... <p> main.py  openai_assistants.py </p> <p> Deep dive on how it works </p> Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre>"},{"location":"openai-asst/code-interpreter/","title":"OpenAI Assistants with Code Interpreter","text":"TutorialGenerate Code <p>The <code>ai</code> CLI allows you to create, manage, and interact with OpenAI's Assistants, including use of Code Interpreter.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use the Code Interpreter feature.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#JavaScriptPython"},{"location":"openai-asst/code-interpreter/#create-or-update-assistant","title":"Create or Update Assistant","text":"Create Assistant with Code Interpreter<pre><code>ai chat assistant create --name MyCodeAssistant --code-interpreter\n</code></pre> Update Assistant with Code Interpreter<pre><code>ai chat assistant update --code-interpreter\n</code></pre>"},{"location":"openai-asst/code-interpreter/#use-code-interpreter","title":"Use Code Interpreter","text":"Interactive Chat with Code Interpreter<pre><code>ai chat --interactive --question \"how many e's are there in the pledge of allegiance?\"\n</code></pre>"},{"location":"openai-asst/code-interpreter/#delete-assistant","title":"Delete Assistant","text":"Delete Assistant<pre><code>ai chat assistant delete\n</code></pre> Clear Assistant ID<pre><code>ai config --clear assistant.id\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"openai-asst/code-interpreter/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst-streaming-with-code --csharp\n</code></pre>"},{"location":"openai-asst/code-interpreter/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new openai-asst-streaming-with-code --csharp\ncd openai-asst-streaming-with-code-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIAssistantsCodeInterpreterStreamingClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"openai-asst/code-interpreter/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst-streaming-with-code --javascript\n</code></pre>"},{"location":"openai-asst/code-interpreter/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new openai-asst-streaming-with-code --javascript\ncd openai-asst-streaming-with-code-js\n</code></pre> See the code; learn how it works... <p> main.js  OpenAIAssistantsCodeInterpreterStreamingClass.js </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>ai dev shell\nnode main.js\n</code></pre>"},{"location":"openai-asst/code-interpreter/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst-streaming-with-code --python\n</code></pre>"},{"location":"openai-asst/code-interpreter/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new openai-asst-streaming-with-code --python\ncd openai-asst-streaming-with-code-py\n</code></pre> See the code; learn how it works... <p> main.py  openai_assistants_code_interpreter_streaming.py </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre>"},{"location":"openai-asst/file-search/","title":"OpenAI Assistants with File Search","text":"TutorialGenerate Code <p>The <code>ai</code> CLI allows you to extend OpenAI's models with custom data sources using File Search.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use OpenAI Assistants with File Search.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#JavaScriptPython"},{"location":"openai-asst/file-search/#create-or-update-assistant","title":"Create or Update Assistant","text":"Create assistant with file search<pre><code>ai chat assistant create --name MyFileAssistant --files \"**/*.md\"\n</code></pre> Update assistant's file search<pre><code>ai chat assistant update --files \"**/*.txt\"\n</code></pre>"},{"location":"openai-asst/file-search/#see-vector-store-and-persisted-config","title":"See Vector Store and persisted config","text":"List vector stores<pre><code>ai chat assistant vector-store list\n</code></pre> Get vector store<pre><code>ai chat assistant vector-store get\n</code></pre> See persisted config<pre><code>ai config @assistant.id\nai config @vector.store.id\n</code></pre>"},{"location":"openai-asst/file-search/#update-vector-store-directly","title":"Update Vector Store directly","text":"Update vector store with one file<pre><code>ai chat assistant vector-store update --file README.md\n</code></pre> Update vector store with many files<pre><code>ai chat assistant vector-store update --files \"**/*.txt\"\n</code></pre>"},{"location":"openai-asst/file-search/#use-file-search","title":"Use File Search","text":"Query with file search<pre><code>ai chat --user \"Find information on markdown files.\"\n</code></pre> Interactive query with file search<pre><code>ai chat --user \"Search for details on the latest updates.\" --interactive\n</code></pre>"},{"location":"openai-asst/file-search/#delete-the-assistantvector-store","title":"Delete the Assistant/Vector Store","text":"Delete the assistant<pre><code>ai chat assistant delete\nai config --clear assistant.id\n</code></pre> Delete the vector store<pre><code>ai chat assistant vector-store delete\nai config --clear vector.store.id\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"openai-asst/file-search/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst-streaming-with-file-search --csharp\n</code></pre>"},{"location":"openai-asst/file-search/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"<p>Generate a C# sample that demonstrates how to use OpenAI Assistants with File Search.</p> Generate sample code<pre><code>ai dev new openai-asst-streaming-with-file-search --csharp\ncd openai-asst-streaming-with-file-search-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIAssistantsFileSearchStreamingClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"openai-asst/file-search/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst-streaming-with-file-search --javascript\n</code></pre>"},{"location":"openai-asst/file-search/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>Generate a JavaScript sample that demonstrates how to use OpenAI Assistants with File Search.</p> Generate sample code<pre><code>ai dev new openai-asst-streaming-with-file-search --javascript\ncd openai-asst-streaming-with-file-search-js\n</code></pre> See the code; learn how it works... <p> Main.js  OpenAIAssistantsFileSearchStreamingClass.js  ReadLineWrapper.js </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>ai dev shell\nnode main.js\n</code></pre>"},{"location":"openai-asst/file-search/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> Filter the list by name<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst-streaming-with-file-search --python\n</code></pre>"},{"location":"openai-asst/file-search/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>Generate a Python sample that demonstrates how to use OpenAI Assistants with File Search.</p> Generate sample code<pre><code>ai dev new openai-asst-streaming-with-file-search --python\ncd openai-asst-streaming-with-file-search-py\n</code></pre> See the code; learn how it works... <p> main.py  openai_assistants_file_search_streaming.py </p> <p> Deep dive on how it works </p> Create virtual environment<pre><code>python -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre>"},{"location":"openai-asst/functions/","title":"OpenAI Assistants with Function Calling","text":"TutorialGenerate Code <p>The <code>ai</code> CLI allows you to extend OpenAI's models with custom functions (e.g. dates, times, math, filesystem).</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use OpenAI Assistants with Function Calling.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#JavaScriptPython"},{"location":"openai-asst/functions/#create-an-assistant","title":"Create an Assistant","text":"Create an assistant<pre><code>ai chat assistant create --name MyFunctionAssistant\n</code></pre>"},{"location":"openai-asst/functions/#use-the-assistant-with-built-in-function-calling","title":"Use the Assistant with Built-in Function Calling","text":"Ask the assistant the current time<pre><code>ai chat --user \"What time is it?\" --built-in-functions\n</code></pre> Calculate a power<pre><code>ai chat --user \"What is 3.5 to the power of 9?\" --built-in-functions\n</code></pre> Read a file<pre><code>ai chat --user \"What is in the README.md file?\" --built-in-functions\n</code></pre> Save content to a file<pre><code>ai chat --user \"Save the pledge of allegiance to 'pledge.txt'\" --built-in-functions\n</code></pre>"},{"location":"openai-asst/functions/#delete-the-assistant","title":"Delete the Assistant","text":"Delete the assistant<pre><code>ai chat assistant delete\nai config --clear assistant.id\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"openai-asst/functions/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst --csharp\n</code></pre>"},{"location":"openai-asst/functions/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"<p>Generate sample code that demonstrates how to use OpenAI Assistants with Function Calling.</p> Generate sample code<pre><code>ai dev new openai-asst-streaming-with-functions --csharp\ncd openai-asst-streaming-with-functions-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  FunctionFactory.cs  HelperFunctionDescriptionAttribute.cs  HelperFunctionParameterDescriptionAttribute.cs  OpenAIAssistantsCustomFunctions.cs  OpenAIAssistantsFunctionsStreamingClass.cs </p> <p>Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"openai-asst/functions/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst --javascript\n</code></pre>"},{"location":"openai-asst/functions/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>Generate sample code that demonstrates how to use OpenAI Assistants with Function Calling.</p> Generate sample code<pre><code>ai dev new openai-asst-streaming-with-functions --javascript\ncd openai-asst-streaming-with-functions-js\n</code></pre> See the code; learn how it works... <p> main.js  OpenAIAssistantsCustomFunctions.js  OpenAIAssistantsFunctionsStreamingClass.js </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>ai dev shell\nnode main.js\n</code></pre>"},{"location":"openai-asst/functions/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-asst --python\n</code></pre>"},{"location":"openai-asst/functions/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>Generate sample code that demonstrates how to use OpenAI Assistants with Function Calling.</p> Generate sample code<pre><code>ai dev new openai-asst-streaming-with-functions --python\ncd openai-asst-streaming-with-functions-py\n</code></pre> See the code;learn how it works... <p> main.py  openai_assistants_custom_functions.py  openai_assistants_functions_streaming.py </p> <p>Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre>"},{"location":"openai-asst/overview/","title":"OpenAI Assistants API","text":"<p>The <code>ai</code> CLI allows you to create, manage, and interact with OpenAI's Assistants API.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p>"},{"location":"openai-asst/overview/#listing-creating-updating-and-deleting-assistants","title":"Listing, creating, updating, and deleting assistants","text":"List all assistants<pre><code>ai chat assistant list\n</code></pre> Create an assistant<pre><code>ai chat assistant create --name MyAssistant\n</code></pre> Update an assistant<pre><code>ai chat assistant update --instructions @instructions.txt\n</code></pre> Delete an assistant<pre><code>ai chat assistant delete --id ID\n</code></pre>"},{"location":"openai-asst/overview/#see-the-persisted-config-from-ai-chat-assistant-createupdate","title":"See the persisted config from <code>ai chat assistant create/update</code>","text":"View assistant configuration<pre><code>ai config @assistant.id\n</code></pre>"},{"location":"openai-asst/overview/#picking-a-new-assistant","title":"Picking a new assistant","text":"List all assistants<pre><code>ai chat assistant list\n</code></pre> Set assistant by ID<pre><code>ai config --set assistant.id ID\n</code></pre>"},{"location":"openai-asst/overview/#clearing-the-assistant-id-from-the-config","title":"Clearing the assistant ID from the config","text":"Clear assistant ID<pre><code>ai config --clear assistant.id\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-cs/sample-overview/","title":"OpenAI Assistants in C#","text":"<p>This sample demonstrates how to use the OpenAI Assistants API in a C# console application.</p> <p> Program.cs  OpenAIAssistantsClass.cs </p> How to generate this sample Command<pre><code>ai dev new openai-asst --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst' in 'openai-asst-cs' (3 files)...\n\nOpenAIAssistants.csproj\nOpenAIAssistantsClass.cs\nProgram.cs\n\nGenerating 'openai-asst' in 'openai-asst-cs' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var assistantId = Environment.GetEnvironmentVariable(\"ASSISTANT_ID\") ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nvar threadId = args.Length &gt; 0 ? args[0] : null;\n\n// Validate environment variables\nvar openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\n\nif (string.IsNullOrEmpty(openAIAPIKey) || openAIAPIKey.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(openAIEndpoint) || openAIEndpoint.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(assistantId) || assistantId.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use Azure OpenAI, set the following environment variables:\");\n    Console.WriteLine(\"  ASSISTANT_ID\\n  AZURE_OPENAI_API_KEY\\n  AZURE_OPENAI_ENDPOINT\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 2: Initialize the OpenAI client and the assistant helper class.</p> Program.cs<pre><code>var client = string.IsNullOrEmpty(openAIAPIKey)\n    ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n    : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n\nvar assistant = new OpenAIAssistantsClass(client, assistantId);\n</code></pre> <p>STEP 3: Create or retrieve a thread and get thread messages if a thread ID is provided.</p> Program.cs<pre><code>if (string.IsNullOrEmpty(threadId))\n{\n    await assistant.CreateThreadAsync();\n}\nelse\n{\n    await assistant.RetrieveThreadAsync(threadId);\n    await assistant.GetThreadMessagesAsync((role, content) =&gt; \n    {\n        Console.WriteLine($\"{char.ToUpper(role[0]) + role.Substring(1)}: {content}\\n\");\n    });\n}\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    var response = await assistant.GetResponseAsync(userPrompt);\n    Console.WriteLine($\"{response}\\n\");\n}\n\nConsole.WriteLine($\"Bye! (ThreadId: {assistant.Thread?.Id})\");\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-cs/sample-overview/#openaiassistantsclasscs","title":"OpenAIAssistantsClass.cs","text":"<p>STEP 1: Initialize the assistant client and assign the assistant ID.</p> OpenAIAssistantsClass.cs<pre><code>public OpenAIAssistantsClass(OpenAIClient client, string assistantId)\n{\n    _assistantClient = client.GetAssistantClient();\n    _assistantId = assistantId;\n}\n</code></pre> <p>STEP 2: Create or retrieve a thread.</p> OpenAIAssistantsClass.cs<pre><code>public async Task CreateThreadAsync()\n{\n    var result = await _assistantClient.CreateThreadAsync();\n    Thread = result.Value;\n}\n\npublic async Task RetrieveThreadAsync(string threadId)\n{\n    var result = await _assistantClient.GetThreadAsync(threadId);\n    Thread = result.Value;\n}\n</code></pre> <p>STEP 3: Get existing messages from the thread and invoke the callback for each.</p> OpenAIAssistantsClass.cs<pre><code>public async Task GetThreadMessagesAsync(Action&lt;string, string&gt; callback)\n{\n    var options = new MessageCollectionOptions() { Order = ListOrder.OldestFirst };\n    await foreach (var message in _assistantClient.GetMessagesAsync(Thread, options).GetAllValuesAsync())\n    {\n        var content = string.Join(\"\", message.Content.Select(c =&gt; c.Text));\n        var role = message.Role == MessageRole.User ? \"user\" : \"assistant\";\n        callback(role, content);\n    }\n}\n</code></pre> <p>STEP 4: When the user provides input, add the user message to the thread and create a new run.</p> OpenAIAssistantsClass.cs<pre><code>public async Task&lt;string&gt; GetResponseAsync(string userInput)\n{\n    await _assistantClient.CreateMessageAsync(Thread, MessageRole.User, [ userInput ]);\n    var assistant = await _assistantClient.GetAssistantAsync(_assistantId);\n\n    var result = await _assistantClient.CreateRunAsync(Thread, assistant);\n    var run = result.Value;\n</code></pre> <p>STEP 5: Poll the run until it is complete and retrieve the assistant's response.</p> OpenAIAssistantsClass.cs<pre><code>    while (!run.Status.IsTerminal)\n    {\n        System.Threading.Thread.Sleep(TimeSpan.FromMilliseconds(100));\n        result = _assistantClient.GetRun(run.ThreadId, run.Id);\n        run = result.Value;\n    }\n\n    var options = new MessageCollectionOptions() { Order = ListOrder.OldestFirst };\n    await foreach (var message in _assistantClient.GetMessagesAsync(run.ThreadId, options).GetAllValuesAsync())\n    {\n        if (message.Role == MessageRole.Assistant)\n        {\n            var content = string.Join(\"\", message.Content.Select(c =&gt; c.Text));\n            return content;\n        }\n    }\n\n    return string.Empty;\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-js/sample-overview/","title":"OpenAI Assistants Basics in JavaScript","text":"<p>This sample demonstrates how to use the OpenAI Assistants API in a JavaScript console application.</p> <p> main.js  OpenAIAssistantsClass.js </p> How to generate this sample Command<pre><code>ai dev new openai-asst --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst' in 'openai-asst-js' (4 files)...\n\nOpenAIAssistantsClass.js\nReadLineWrapper.js\nmain.js\npackage.json\n\nGenerating 'openai-asst' in 'openai-asst-js' (4 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-js/sample-overview/#mainjs","title":"main.js","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.js<pre><code>const ASSISTANT_ID = process.env.ASSISTANT_ID ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nconst AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION ?? \"&lt;insert your Azure OpenAI API version here&gt;\";\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nconst AZURE_OPENAI_BASE_URL = `${AZURE_OPENAI_ENDPOINT.replace(/\\/+$, '')}/openai`;\n</code></pre> <p>STEP 2: Check if the required environment variables are set.</p> main.js<pre><code>const azureOk = \n  AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_API_VERSION != null &amp;&amp; !AZURE_OPENAI_API_VERSION.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.startsWith('&lt;insert');\n\nconst ok = azureOk &amp;&amp;\n  ASSISTANT_ID != null &amp;&amp; !ASSISTANT_ID.startsWith('&lt;insert');\n\nif (!ok) {\n  console.error(\n    'To use Azure OpenAI, set the following environment variables:\\n' +\n    '\\n  ASSISTANT_ID' +\n    '\\n  AZURE_OPENAI_API_KEY' +\n    '\\n  AZURE_OPENAI_API_VERSION' +\n    '\\n  AZURE_OPENAI_ENDPOINT'\n  );\n  console.error(\n    '\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell' +\n    '\\n  node main.js' +\n    '\\n' +\n    '\\n  or' +\n    '\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell --run \"node main.js\"'\n  );\n  process.exit(1);\n}\n</code></pre> <p>STEP 3: Initialize the OpenAI client and the helper class with the configuration settings.</p> main.js<pre><code>const openai = new OpenAI({\n  apiKey: AZURE_OPENAI_API_KEY,\n  baseURL: AZURE_OPENAI_BASE_URL,\n  defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n  defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n});\nconst assistant = new OpenAIAssistantsClass(ASSISTANT_ID, openai);\n</code></pre> <p>STEP 4: Create or retrieve the thread and display the messages if any.</p> main.js<pre><code>const threadId = process.argv[2] || null;\nif (threadId === null) {\n  await assistant.createThread()\n} else {\n  await assistant.retrieveThread(threadId);\n  await assistant.getThreadMessages((role, content) =&gt; {\n    role = role.charAt(0).toUpperCase() + role.slice(1);\n    process.stdout.write(`${role}: ${content}`);\n  });\n}\n</code></pre> <p>STEP 5: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> main.js<pre><code>while (true) {\n  const input = await readline.question('User: ');\n  if (input === 'exit' || input === '') break;\n\n  let response = await assistant.getResponse(input);\n  process.stdout.write(`\\nAssistant: ${response}\\n\\n`);\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-js/sample-overview/#openaiassistantsclassjs","title":"OpenAIAssistantsClass.js","text":"<p>STEP 1: Create the client and initialize the class with essential parameters.</p> OpenAIAssistantsClass.js<pre><code>constructor(openAIAssistantId, openai, simulateTypingDelay = 0) {\n  this.simulateTypingDelay = simulateTypingDelay;\n  this.openAIAssistantId = openAIAssistantId;\n  this.thread = null;\n  this.openai = openai;\n}\n</code></pre> <p>STEP 2: Create a new thread.</p> OpenAIAssistantsClass.js<pre><code>async createThread() {\n  this.thread = await this.openai.beta.threads.create();\n  return this.thread;\n}\n</code></pre> <p>STEP 3: Retrieve an existing thread.</p> OpenAIAssistantsClass.js<pre><code>async retrieveThread(threadId) {\n  this.thread = await this.openai.beta.threads.retrieve(threadId);\n  return this.thread;\n}\n</code></pre> <p>STEP 4: Get the messages in the thread.</p> OpenAIAssistantsClass.js<pre><code>async getThreadMessages(callback) {\n  const messages = await this.openai.beta.threads.messages.list(this.thread.id);\n  messages.data.reverse();\n\n  for (const message of messages.data) {\n    let content = message.content.map(item =&gt; item.text.value).join('') + '\\n\\n';\n    callback(message.role, content);\n  }\n}\n</code></pre> <p>STEP 5: When the user provides input, post the message on the thread and get the response.</p> OpenAIAssistantsClass.js<pre><code>async getResponse(userInput) {\n  if (this.thread == null) {\n    await this.createThread();\n  }\n\n  await this.openai.beta.threads.messages.create(this.thread.id, { role: \"user\", content: userInput });\n  const run = await this.openai.beta.threads.runs.createAndPoll(this.thread.id, { assistant_id: this.openAIAssistantId });\n  if (run.status === 'completed') {\n    const messages = await this.openai.beta.threads.messages.list(run.thread_id);\n    return messages.data[0].content.map(item =&gt; item.text.value).join('');\n  }\n\n  return run.status.toString();\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-py/sample-overview/","title":"OpenAI Assistants in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Assistants API in a Python console application.</p> <p> main.py  openai_assistants.py </p> How to generate this sample Command<pre><code>ai dev new openai-asst --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst' in 'openai-asst-py' (3 files)...\n\nmain.py\nopenai_assistants.py\nrequirements.txt\n\nGenerating 'openai-asst' in 'openai-asst-py' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.py<pre><code>ASSISTANT_ID = os.getenv('ASSISTANT_ID') or \"&lt;insert your OpenAI assistant ID here&gt;\"\nthreadId = sys.argv[1] if len(sys.argv) &gt; 1 else None\n\nAZURE_OPENAI_API_KEY = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your Azure OpenAI API key here&gt;')\nAZURE_OPENAI_API_VERSION = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your Azure OpenAI API version here&gt;')\nAZURE_OPENAI_ENDPOINT = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your Azure OpenAI endpoint here&gt;')\nAZURE_OPENAI_BASE_URL = f'{AZURE_OPENAI_ENDPOINT.rstrip(\"/\")}/openai'\n</code></pre> <p>STEP 2: Validate the environment variables.</p> main.py<pre><code>ok = \\\n    ASSISTANT_ID != None and not ASSISTANT_ID.startswith('&lt;insert') and \\\n    AZURE_OPENAI_API_KEY != None and not AZURE_OPENAI_API_KEY.startswith('&lt;insert') and \\\n    AZURE_OPENAI_API_VERSION != None and not AZURE_OPENAI_API_VERSION.startswith('&lt;insert') and \\\n    AZURE_OPENAI_ENDPOINT != None and not AZURE_OPENAI_ENDPOINT.startswith('&lt;insert')\n\nif not ok:\n    print('To use Azure OpenAI, set the following environment variables:\\n' +\n        '\\n  ASSISTANT_ID' +\n        '\\n  AZURE_OPENAI_API_KEY' +\n        '\\n  AZURE_OPENAI_API_VERSION' +\n        '\\n  AZURE_OPENAI_ENDPOINT')\n    print('\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n      '\\n  ai init' +\n      '\\n  ai dev shell' +\n      '\\n  python main.py' +\n      '\\n' +\n      '\\n  or' +\n      '\\n' +\n      '\\n  ai init' +\n      '\\n  ai dev shell --run \"python main.py\"')\n    os._exit(1)\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings.</p> main.py<pre><code>openai = OpenAI(\n    api_key = AZURE_OPENAI_API_KEY,\n    base_url = AZURE_OPENAI_BASE_URL,\n    default_query= { 'api-version': AZURE_OPENAI_API_VERSION },\n    default_headers = { 'api-key': AZURE_OPENAI_API_KEY }\n)\nassistant = OpenAIAssistantsClass(ASSISTANT_ID, openai)\n</code></pre> <p>STEP 4: Handle thread creation or retrieval.</p> main.py<pre><code>if threadId is None:\n    assistant.create_thread()\nelse:\n    assistant.retrieve_thread(threadId)\n    assistant.get_thread_messages(lambda role, content: print(f'{role.capitalize()}: {content}', end=''))\n</code></pre> <p>STEP 5: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> main.py<pre><code>while True:\n    user_input = input('User: ')\n    if user_input == 'exit' or user_input == '':\n        break\n\n    response = assistant.get_response(user_input)\n    print(f'\\nAssistant: {response}\\n')\n</code></pre>"},{"location":"openai-asst/openai-asst-non-streaming-py/sample-overview/#openai_assistantspy","title":"openai_assistants.py","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> openai_assistants.py<pre><code>class OpenAIAssistantsClass:\n\n    def __init__(self, assistant_id, openai):\n        self.assistant_id = assistant_id\n        self.thread = None\n        self.openai = openai\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> openai_assistants.py<pre><code>def get_response(self, user_input) -&gt; str:\n    if self.thread == None:\n        self.create_thread()\n\n    message = self.openai.beta.threads.messages.create(\n        thread_id=self.thread.id,\n        role=\"user\",\n        content=user_input,\n    )\n</code></pre> <p>STEP 3: Send the chat message history to the OpenAI Assistants API and process the response.</p> openai_assistants.py<pre><code>run = self.openai.beta.threads.runs.create_and_poll(\n    thread_id=self.thread.id,\n    assistant_id=self.assistant_id\n)\n\nif run.status == 'completed':\n    messages = self.openai.beta.threads.messages.list(thread_id=self.thread.id)\n    return ''.join([item.text.value for item in messages.data[0].content])\n\nreturn str(run.status)\n</code></pre> <p>STEP 4: Create and retrieve thread methods for handling threads.</p> openai_assistants.py<pre><code>def create_thread(self):\n    self.thread = self.openai.beta.threads.create()\n    return self.thread\n\n    def retrieve_thread(self, thread_id):\n        self.thread = self.openai.beta.threads.retrieve(thread_id)\n        return self.thread\n</code></pre> <p>STEP 5: Retrieve and display previous messages in the thread.</p> openai_assistants.py<pre><code>def get_thread_messages(self, callback):\n    messages = self.openai.beta.threads.messages.list(self.thread.id)\n    messages.data.reverse()\n\n    for message in messages.data:\n        content = ''.join([item.text.value for item in message.content]) + '\\n\\n'\n        callback(message.role, content)\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-cs/sample-overview/","title":"OpenAI Assistants Streaming in C#","text":"<p>This sample demonstrates how to use the OpenAI Assistants API with streaming in a C# console application.</p> <p> Program.cs  OpenAIAssistantsStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming' in 'openai-asst-streaming-cs' (3 files)...\n\nOpenAIAssistantsStreaming.csproj\nOpenAIAssistantsStreamingClass.cs\nProgram.cs\n\nGenerating 'openai-asst-streaming' in 'openai-asst-streaming-cs' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables and validate them.</p> Program.cs<pre><code>var assistantId = Environment.GetEnvironmentVariable(\"ASSISTANT_ID\") ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nvar threadId = args.Length &gt; 0 ? args[0] : null;\n\n// Validate environment variables\nvar openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\n\nif (string.IsNullOrEmpty(openAIAPIKey) || openAIAPIKey.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(openAIEndpoint) || openAIEndpoint.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(assistantId) || assistantId.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use Azure OpenAI, set the following environment variables:\");\n    Console.WriteLine(\"  ASSISTANT_ID\\n  AZURE_OPENAI_API_KEY\\n  AZURE_OPENAI_ENDPOINT\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 2: Initialize the OpenAI client and the helper class.</p> Program.cs<pre><code>var client = string.IsNullOrEmpty(openAIAPIKey)\n    ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n    : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n\nvar assistant = new OpenAIAssistantsStreamingClass(client, assistantId);\n</code></pre> <p>STEP 3: Create or retrieve a thread, and get existing messages if a thread ID is provided.</p> Program.cs<pre><code>if (string.IsNullOrEmpty(threadId))\n{\n    await assistant.CreateThreadAsync();\n}\nelse\n{\n    await assistant.RetrieveThreadAsync(threadId);\n    await assistant.GetThreadMessagesAsync((role, content) =&gt; \n    {\n        Console.WriteLine($\"{char.ToUpper(role[0]) + role.Substring(1)}: {content}\\n\");\n    });\n}\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    await assistant.GetResponseAsync(userPrompt, content =&gt; {\n        Console.Write(content);\n    });\n}\n\nConsole.WriteLine($\"Bye! (ThreadId: {assistant.Thread?.Id})\");\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-cs/sample-overview/#openaiassistantsstreamingclasscs","title":"OpenAIAssistantsStreamingClass.cs","text":"<p>STEP 1: Initialize the helper class using the OpenAI client and assistant ID.</p> OpenAIAssistantsStreamingClass.cs<pre><code>public OpenAIAssistantsStreamingClass(OpenAIClient client, string assistantId)\n{\n    _assistantClient = client.GetAssistantClient();\n    _assistantId = assistantId;\n}\n</code></pre> <p>STEP 2: Create or retrieve a thread.</p> OpenAIAssistantsStreamingClass.cs<pre><code>public async Task CreateThreadAsync()\n{\n    var result = await _assistantClient.CreateThreadAsync();\n    Thread = result.Value;\n}\n\npublic async Task RetrieveThreadAsync(string threadId)\n{\n    var result = await _assistantClient.GetThreadAsync(threadId);\n    Thread = result.Value;\n}\n</code></pre> <p>STEP 3: Get existing messages from the thread and invoke the callback for each.</p> OpenAIAssistantsStreamingClass.cs<pre><code>public async Task GetThreadMessagesAsync(Action&lt;string, string&gt; callback)\n{\n    var options = new MessageCollectionOptions() { Order = ListOrder.OldestFirst };\n    await foreach (var message in _assistantClient.GetMessagesAsync(Thread, options).GetAllValuesAsync())\n    {\n        var content = string.Join(\"\", message.Content.Select(c =&gt; c.Text));\n        var role = message.Role == MessageRole.User ? \"user\" : \"assistant\";\n        callback(role, content);\n    }\n}\n</code></pre> <p>STEP 4: When the user provides input, add the user message to the thread and create a new streaming run.</p> OpenAIAssistantsStreamingClass.cs<pre><code>public async Task GetResponseAsync(string userInput, Action&lt;string&gt; callback)\n{\n    await _assistantClient.CreateMessageAsync(Thread, MessageRole.User, [ userInput ]);\n    var assistant = await _assistantClient.GetAssistantAsync(_assistantId);\n    var stream = _assistantClient.CreateRunStreamingAsync(Thread, assistant.Value);\n</code></pre> <p>STEP 5: Process the streaming updates, invoking the callback for each content update.</p> OpenAIAssistantsStreamingClass.cs<pre><code>    await foreach (var update in stream) \n    {\n        if (update is MessageContentUpdate contentUpdate)\n        {\n            callback(contentUpdate.Text);\n        }\n\n        if (update.UpdateKind == StreamingUpdateReason.RunStepCompleted)\n        {\n            callback(\"\\n\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-js/sample-overview/","title":"OpenAI Assistants Streaming in JavaScript","text":"<p>This sample demonstrates how to use the OpenAI Assistants API with streaming in a JavaScript application.</p> <p> main.js  OpenAIAssistantsStreamingClass.js </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming' in 'openai-asst-streaming-js' (4 files)...\n\nmain.js\nOpenAIAssistantsStreamingClass.js\nReadLineWrapper.js\npackage.json\n\nGenerating 'openai-asst-streaming' in 'openai-asst-streaming-js' (4 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-js/sample-overview/#mainjs","title":"main.js","text":"<p>STEP 1: Read the configuration settings from environment variables and validate them.</p> main.js<pre><code>const ASSISTANT_ID = process.env.ASSISTANT_ID ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nconst AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION ?? \"&lt;insert your Azure OpenAI API version here&gt;\";\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nconst AZURE_OPENAI_BASE_URL = `${AZURE_OPENAI_ENDPOINT.replace(/\\/+$\", '')}/openai`;\n\nconst azureOk = \n  AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_API_VERSION != null &amp;&amp; !AZURE_OPENAI_API_VERSION.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.startsWith('&lt;insert');\n\nconst ok = azureOk &amp;&amp;\n  ASSISTANT_ID != null &amp;&amp; !ASSISTANT_ID.startsWith('&lt;insert');\n\nif (!ok) {\n  console.error(\n    'To use Azure OpenAI, set the following environment variables:\\n' +\n    '\\n  ASSISTANT_ID' +\n    '\\n  AZURE_OPENAI_API_KEY' +\n    '\\n  AZURE_OPENAI_API_VERSION' +\n    '\\n  AZURE_OPENAI_ENDPOINT'\n  );\n  console.error(\n    '\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell' +\n    '\\n  node main.js' +\n    '\\n' +\n    '\\n  or' +\n    '\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell --run \"node main.js\"'\n  );\n  process.exit(1);\n}\n</code></pre> <p>STEP 2: Initialize the OpenAI client and the helper class with the configuration settings.</p> main.js<pre><code>const openai = new OpenAI({\n  apiKey: AZURE_OPENAI_API_KEY,\n  baseURL: AZURE_OPENAI_BASE_URL,\n  defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n  defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n});\n\nconst assistant = new OpenAIAssistantsStreamingClass(ASSISTANT_ID, openai);\n</code></pre> <p>STEP 3: Create or retrieve a thread and get thread messages if thread ID is provided.</p> main.js<pre><code>if (threadId === null) {\n  await assistant.createThread()\n} else {\n  await assistant.retrieveThread(threadId);\n  await assistant.getThreadMessages((role, content) =&gt; {\n    role = role.charAt(0).toUpperCase() + role.slice(1);\n    process.stdout.write(`${role}: ${content}`);\n    });\n}\n</code></pre> <p>STEP 4: Implement the user interaction loop to get responses from the assistant.</p> main.js<pre><code>while (true) {\n\n  const input = await readline.question('User: ');\n  if (input === 'exit' || input === '') break;\n\n  process.stdout.write('\\nAssistant: ');\n  await assistant.getResponse(input, (content) =&gt; {\n    process.stdout.write(content);\n  });\n\n  process.stdout.write('\\n\\n');\n}\n\nconsole.log(`Bye! (threadId: ${assistant.thread.id})`);\nprocess.exit();\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-js/sample-overview/#openaiassistantsstreamingclassjs","title":"OpenAIAssistantsStreamingClass.js","text":"<p>STEP 1: Create the client and initialize the assistant with necessary configurations.</p> OpenAIAssistantsStreamingClass.js<pre><code>constructor(openAIAssistantId, openai, simulateTypingDelay = 0) {\n  this.simulateTypingDelay = simulateTypingDelay;\n  this.openAIAssistantId = openAIAssistantId;\n  this.thread = null;\n  this.openai = openai;\n}\n</code></pre> <p>STEP 2: Create or retrieve a thread and get thread messages if thread ID is provided.</p> OpenAIAssistantsStreamingClass.js<pre><code>async createThread() {\n  this.thread = await this.openai.beta.threads.create();\n  return this.thread;\n}\n\nasync retrieveThread(threadId) {\n  this.thread = await this.openai.beta.threads.retrieve(threadId);\n  return this.thread;\n}\n\nasync getThreadMessages(callback) {\n  const messages = await this.openai.beta.threads.messages.list(this.thread.id);\n  messages.data.reverse();\n  for (const message of messages.data) {\n    let content = message.content.map(item =&gt; item.text.value).join('') + '\\n\\n';\n    callback(message.role, content);\n  }\n}\n</code></pre> <p>STEP 3: Send the user input to the assistant and handle the streaming response:</p> OpenAIAssistantsStreamingClass.js<pre><code>async getResponse(userInput, callback) {\n  if (this.thread == null) {\n    await this.createThread();\n  }\n\n  await this.openai.beta.threads.messages.create(this.thread.id, { role: \"user\", content: userInput });\n  let stream = await this.openai.beta.threads.runs.stream(this.thread.id, {\n    assistant_id: this.openAIAssistantId,\n  });\n\n  let runCompletedPromise = new Promise((resolve) =&gt; {\n    this.resolveRunCompletedPromise = resolve;\n  });\n\n  await this.handleStreamEvents(stream, callback);\n  await runCompletedPromise;\n  runCompletedPromise = null;\n}\n\nasync handleStreamEvents(stream, callback) {\n  stream.on('textDelta', async (textDelta, snapshot) =&gt; await this.onTextDelta(textDelta, callback));\n  stream.on('event', async (event) =&gt; {\n    if (event.event == 'thread.run.completed') {\n      this.resolveRunCompletedPromise();\n    }\n    else if (event.event == 'thread.run.failed') {\n      console.log(JSON.stringify(event));\n      throw new Error('Run failed');\n    }\n  });\n}\n\nasync onTextDelta(textDelta, callback) {\n  let content = textDelta.value;\n  if (content != null) {\n    if(callback != null) {\n      callback(content);\n      if (this.simulateTypingDelay &gt; 0) {\n        await new Promise(r =&gt; setTimeout(r, this.simulateTypingDelay));\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-py/sample-overview/","title":"OpenAI Assistants Streaming in Python","text":"<p>This sample demonstrates how to use the OpenAI Assistants API with streaming in a Python console application.</p> <p> main.py  openai_assistants_streaming.py </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming' in 'openai-asst-streaming-py' (3 files)...\n\nmain.py\nopenai_assistants_streaming.py\nrequirements.txt\n\nGenerating 'openai-asst-streaming' in 'openai-asst-streaming-py' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables and validate them.</p> main.py<pre><code>ASSISTANT_ID = os.getenv('ASSISTANT_ID') or \"&lt;insert your OpenAI assistant ID here&gt;\"\nAZURE_OPENAI_API_KEY = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your Azure OpenAI API key here&gt;')\nAZURE_OPENAI_API_VERSION = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your Azure OpenAI API version here&gt;')\nAZURE_OPENAI_ENDPOINT = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your Azure OpenAI endpoint here&gt;')\nAZURE_OPENAI_BASE_URL = f'{AZURE_OPENAI_ENDPOINT.rstrip(\"/\")}/openai'\n\nok = \\\n    ASSISTANT_ID != None and not ASSISTANT_ID.startswith('&lt;insert') and \\\n    AZURE_OPENAI_API_KEY != None and not AZURE_OPENAI_API_KEY.startswith('&lt;insert') and \\\n    AZURE_OPENAI_API_VERSION != None and not AZURE_OPENAI_API_VERSION.startswith('&lt;insert') and \\\n    AZURE_OPENAI_ENDPOINT != None and not AZURE_OPENAI_ENDPOINT.startswith('&lt;insert')\n\nif not ok:\n    print('To use Azure OpenAI, set the following environment variables:\\n' +\n        '\\n  ASSISTANT_ID' +\n        '\\n  AZURE_OPENAI_API_KEY' +\n        '\\n  AZURE_OPENAI_API_VERSION' +\n        '\\n  AZURE_OPENAI_ENDPOINT')\n    print('\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n      '\\n  ai init' +\n      '\\n  ai dev shell' +\n      '\\n  python main.py' +\n      '\\n' +\n      '\\n  or' +\n      '\\n' +\n      '\\n  ai init' +\n      '\\n  ai dev shell --run \"python main.py\"')\n    os._exit(1)\n</code></pre> <p>STEP 2: Create the OpenAI client and initialize the assistant.</p> main.py<pre><code>openai = OpenAI(\n    api_key = AZURE_OPENAI_API_KEY,\n    base_url = AZURE_OPENAI_BASE_URL,\n    default_query= { 'api-version': AZURE_OPENAI_API_VERSION },\n    default_headers = { 'api-key': AZURE_OPENAI_API_KEY }\n)\nassistant = OpenAIAssistantsStreamingClass(ASSISTANT_ID, openai)\n</code></pre> <p>STEP 3: Create or retrieve a thread, and display the messages if any.</p> main.py<pre><code>if threadId is None:\n    assistant.create_thread()\nelse:\n    assistant.retrieve_thread(threadId)\n    assistant.get_thread_messages(lambda role, content: print(f'{role.capitalize()}: {content}', end=''))\n</code></pre> <p>STEP 4: Implement the user interaction loop to get responses from the assistant and display them.</p> main.py<pre><code>while True:\n    user_input = input('User: ')\n    if user_input == 'exit' or user_input == '':\n        break\n    print('\\nAssistant: ', end='')\n    assistant.get_response(user_input, lambda content: print(content, end=''))\n    print('\\n')\nprint(f\"Bye! (threadId: {assistant.thread.id})\")\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-py/sample-overview/#openai_assistants_streamingpy","title":"openai_assistants_streaming.py","text":"<p>STEP 1: Initialize the assistant with necessary configurations.</p> openai_assistants_streaming.py<pre><code>def __init__(self, assistant_id, openai):\n    self.assistant_id = assistant_id\n    self.thread = None\n    self.openai = openai\n</code></pre> <p>STEP 2: Create an event handler that processes each text delta.</p> openai_assistants_streaming.py<pre><code>class EventHandler(AssistantEventHandler):\n    def __init__(self, openai, callback):\n        super().__init__()\n        self.openai = openai\n        self.callback = callback\n\n    @override\n    def on_text_delta(self, delta, snapshot):\n        self.callback(delta.value)\n\n    @override\n    def on_event(self, event):\n        if event.event == 'thread.run.failed':\n            print(event)\n            raise Exception('Run failed')\n        super().on_event(event)\n</code></pre> <p>STEP 3: When the user provides input, add the user message to the chat message history.</p> openai_assistants_streaming.py<pre><code>message = self.openai.beta.threads.messages.create(\n    thread_id=self.thread.id,\n    role=\"user\",\n    content=user_input,\n)\n</code></pre> <p>STEP 4: Send the chat message history to the streaming OpenAI Assistants API and process each update.</p> openai_assistants_streaming.py<pre><code>with self.openai.beta.threads.runs.stream(\n    thread_id=self.thread.id,\n    assistant_id=self.assistant_id,\n    event_handler=EventHandler(self.openai, callback)\n) as stream:\n    stream.until_done()\n</code></pre> <p>STEP 5: Add the assistant's response to the chat message history, and return response.</p> openai_assistants_streaming.py<pre><code>def get_response(self, user_input, callback) -&gt; None:\n    if self.thread == None:\n        self.create_thread()\n    message = self.openai.beta.threads.messages.create(\n        thread_id=self.thread.id,\n        role=\"user\",\n        content=user_input,\n    )\n    with self.openai.beta.threads.runs.stream(\n        thread_id=self.thread.id,\n        assistant_id=self.assistant_id,\n        event_handler=EventHandler(self.openai, callback)\n    ) as stream:\n        stream.until_done()\n</code></pre> <p>STEP 6: Create and retrieve thread methods for handling threads.</p> openai_assistants_streaming.py<pre><code>def create_thread(self):\n    self.thread = self.openai.beta.threads.create()\n    return self.thread\n\n    def retrieve_thread(self, thread_id):\n        self.thread = self.openai.beta.threads.retrieve(thread_id)\n        return self.thread\n</code></pre> <p>STEP 7: Retrieve and display previous messages in the thread.</p> openai_assistants_streaming.py<pre><code>def get_thread_messages(self, callback):\n    messages = self.openai.beta.threads.messages.list(self.thread.id)\n    messages.data.reverse()\n\n    for message in messages.data:\n        content = ''.join([item.text.value for item in message.content]) + '\\n\\n'\n        callback(message.role, content)\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-cs/sample-overview/","title":"OpenAI Assistants with Code Interpreter Streaming in C#","text":"<p>This sample demonstrates how to use the OpenAI Assistants API with the Code Interpreter feature in a C# console application.</p> <p> Program.cs  OpenAIAssistantsCodeInterpreterStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-code --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-code' in 'openai-asst-streaming-with-code-cs' (3 files)...\n\nOpenAIAssistantsCodeInterpreterStreaming.csproj\nOpenAIAssistantsCodeInterpreterStreamingClass.cs\nProgram.cs\n\nGenerating 'openai-asst-streaming-with-code' in 'openai-asst-streaming-with-code-cs' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables and validate them.</p> Program.cs<pre><code>var assistantId = Environment.GetEnvironmentVariable(\"ASSISTANT_ID\") ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nvar threadId = args.Length &gt; 0 ? args[0] : null;\n\nvar openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\n\nif (string.IsNullOrEmpty(openAIAPIKey) || openAIAPIKey.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(openAIEndpoint) || openAIEndpoint.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(assistantId) || assistantId.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use Azure OpenAI, set the following environment variables:\");\n    Console.WriteLine(\"  ASSISTANT_ID\\n  AZURE_OPENAI_API_KEY\\n  AZURE_OPENAI_ENDPOINT\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 2: Initialize the OpenAI client and the helper class.</p> Program.cs<pre><code>var client = string.IsNullOrEmpty(openAIAPIKey)\n    ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n    : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n\nvar assistant = new OpenAIAssistantsCodeInterpreterStreamingClass(client, assistantId);\n</code></pre> <p>STEP 3: Create or retrieve a thread, and get existing messages if a thread ID is provided.</p> Program.cs<pre><code>if (string.IsNullOrEmpty(threadId))\n{\n    await assistant.CreateThreadAsync();\n}\nelse\n{\n    await assistant.RetrieveThreadAsync(threadId);\n    await assistant.GetThreadMessagesAsync((role, content) =&gt; \n    {\n        Console.WriteLine($\"{char.ToUpper(role[0]) + role.Substring(1)}: {content}\\n\");\n    });\n}\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    await assistant.GetResponseAsync(userPrompt, content =&gt; {\n        Console.Write(content);\n    });\n}\n\nConsole.WriteLine($\"Bye! (ThreadId: {assistant.Thread?.Id})\");\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-cs/sample-overview/#openaiassistantscodeinterpreterstreamingclasscs","title":"OpenAIAssistantsCodeInterpreterStreamingClass.cs","text":"<p>STEP 1: Initialize the helper class using the OpenAI client and assistant ID.</p> OpenAIAssistantsCodeInterpreterStreamingClass.cs<pre><code>public OpenAIAssistantsCodeInterpreterStreamingClass(OpenAIClient client, string assistantId)\n{\n    _assistantClient = client.GetAssistantClient();\n    _assistantId = assistantId;\n}\n</code></pre> <p>STEP 2: Create or retrieve a thread.</p> OpenAIAssistantsCodeInterpreterStreamingClass.cs<pre><code>public async Task CreateThreadAsync()\n{\n    var result = await _assistantClient.CreateThreadAsync();\n    Thread = result.Value;\n}\n\npublic async Task RetrieveThreadAsync(string threadId)\n{\n    var result = await _assistantClient.GetThreadAsync(threadId);\n    Thread = result.Value;\n}\n</code></pre> <p>STEP 3: Get existing messages from the thread and invoke the callback for each.</p> OpenAIAssistantsCodeInterpreterStreamingClass.cs<pre><code>public async Task GetThreadMessagesAsync(Action&lt;string, string&gt; callback)\n{\n    var options = new MessageCollectionOptions() { Order = ListOrder.OldestFirst };\n    await foreach (var message in _assistantClient.GetMessagesAsync(Thread, options).GetAllValuesAsync())\n    {\n        var content = string.Join(\"\", message.Content.Select(c =&gt; c.Text));\n        var role = message.Role == MessageRole.User ? \"user\" : \"assistant\";\n        callback(role, content);\n    }\n}\n</code></pre> <p>STEP 4: When the user provides input, add the user message to the thread and create a new streaming run.</p> OpenAIAssistantsCodeInterpreterStreamingClass.cs<pre><code>public async Task GetResponseAsync(string userInput, Action&lt;string&gt; callback)\n{\n    await _assistantClient.CreateMessageAsync(Thread, MessageRole.User, [ userInput ]);\n    var assistant = await _assistantClient.GetAssistantAsync(_assistantId);\n    var stream = _assistantClient.CreateRunStreamingAsync(Thread, assistant.Value);\n</code></pre> <p>STEP 5: Process the streaming updates, invoking the callback for each content update or code interpreter input.</p> OpenAIAssistantsCodeInterpreterStreamingClass.cs<pre><code>    await foreach (var update in stream) \n    {\n        if (update is MessageContentUpdate contentUpdate)\n        {\n            callback(contentUpdate.Text);\n        }\n        else if (update is RunStepDetailsUpdate runStepDetailsUpdate)\n        {\n            var input = runStepDetailsUpdate.CodeInterpreterInput;\n            if (input != null)\n            {\n                callback(input);\n            }\n        }\n\n        if (update.UpdateKind == StreamingUpdateReason.RunStepCompleted)\n        {\n            callback(\"\\n\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-js/sample-overview/","title":"OpenAI Assistants with Code Interpreter Streaming in JavaScript","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Assistants with a Code Interpreter in a JavaScript console application.</p> <p> main.js  OpenAIAssistantsCodeInterpreterStreamingClass.js </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-code --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-code' in 'openai-asst-streaming-with-code-js' (4 files)...\n\nOpenAIAssistantsCodeInterpreterStreamingClass.js\nReadLineWrapper.js\nmain.js\npackage.json\n\nGenerating 'openai-asst-streaming-with-code' in 'openai-asst-streaming-with-code-js' (4 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-js/sample-overview/#mainjs","title":"main.js","text":"<p>STEP 1: Read the configuration settings from environment variables and validate them.</p> main.js<pre><code>const ASSISTANT_ID = process.env.ASSISTANT_ID ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nconst threadId = process.argv[2] || null;\n\nconst AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION ?? \"&lt;insert your Azure OpenAI API version here&gt;\";\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nconst AZURE_OPENAI_BASE_URL = `${AZURE_OPENAI_ENDPOINT.replace(/\\/+$/, '')}/openai`;\n\nconst azureOk = AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.startsWith('&lt;insert') &amp;&amp; AZURE_OPENAI_API_VERSION != null &amp;&amp; !AZURE_OPENAI_API_VERSION.startsWith('&lt;insert') &amp;&amp; AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.startsWith('&lt;insert');\n\nconst ok = azureOk &amp;&amp; ASSISTANT_ID != null &amp;&amp; !ASSISTANT_ID.startsWith('&lt;insert');\n\nif (!ok) {\n console.error(\n 'To use Azure OpenAI, set the following environment variables:\\n' +\n '\\n  ASSISTANT_ID' +\n '\\n  AZURE_OPENAI_API_KEY' +\n '\\n  AZURE_OPENAI_API_VERSION' +\n '\\n  AZURE_OPENAI_ENDPOINT'\n );\n console.error(\n '\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n '\\n  ai init' +\n '\\n  ai dev shell' +\n '\\n  node main.js' +\n '\\n' +\n '\\n  or' +\n '\\n' +\n '\\n  ai init' +\n '\\n  ai dev shell --run \"node main.js\"'\n );\n process.exit(1);\n}\n</code></pre> <p>STEP 2: Create the OpenAI client.</p> main.js<pre><code>const openai = new OpenAI({\n  apiKey: AZURE_OPENAI_API_KEY,\n  baseURL: AZURE_OPENAI_BASE_URL,\n  defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n  defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n});\n</code></pre> <p>STEP 3: Create the assistants streaming helper class instance.</p> main.js<pre><code>const assistant = new OpenAIAssistantsCodeInterpreterStreamingClass(ASSISTANT_ID, openai);\n</code></pre> <p>STEP 4: Get or create the thread, and display the messages if any.</p> main.js<pre><code>if (threadId === null) {\n  await assistant.createThread()\n} else {\n  await assistant.retrieveThread(threadId);\n  await assistant.getThreadMessages((role, content) =&gt; {\n    role = role.charAt(0).toUpperCase() + role.slice(1);\n    process.stdout.write(`${role}: ${content}`);\n  });\n}\n</code></pre> <p>STEP 5: Loop until the user types 'exit', get user input and get the Assistant's response.</p> main.js<pre><code>while (true) {\n\n  const input = await readline.question('User: ');\n  if (input === 'exit' || input === '') break;\n\n  process.stdout.write('\\nAssistant: ');\n  await assistant.getResponse(input, (content) =&gt; {\n    process.stdout.write(content);\n  });\n\n  process.stdout.write('\\n\\n');\n}\n</code></pre> <p>STEP 6: Display exit message and thread ID.</p> main.js<pre><code>console.log(`Bye! (threadId: ${assistant.thread.id})`);\nprocess.exit();\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-js/sample-overview/#openaiassistantscodeinterpreterstreamingclassjs","title":"OpenAIAssistantsCodeInterpreterStreamingClass.js","text":"<p>STEP 1: Create the client, initialize class variables and create or retrieve a thread.</p> OpenAIAssistantsCodeInterpreterStreamingClass.js<pre><code>constructor(openAIAssistantId, openai, simulateTypingDelay = 0) {\n  this.simulateTypingDelay = simulateTypingDelay;\n  this.openAIAssistantId = openAIAssistantId;\n  this.thread = null;\n  this.openai = openai;\n}\n\nasync createThread() {\n  this.thread = await this.openai.beta.threads.create();\n  return this.thread;\n}\n\nasync retrieveThread(threadId) {\n  this.thread = await this.openai.beta.threads.retrieve(threadId);\n  return this.thread;\n}\n</code></pre> <p>STEP 2: Get the messages in the thread.</p> OpenAIAssistantsCodeInterpreterStreamingClass.js<pre><code>async getThreadMessages(callback) {\n\n  const messages = await this.openai.beta.threads.messages.list(this.thread.id);\n  messages.data.reverse();\n\n  for (const message of messages.data) {\n    let content = message.content.map(item =&gt; item.text.value).join('') + '\\n\\n';\n    callback(message.role, content);\n  }\n}\n</code></pre> <p>STEP 3: Get the response from the Assistant.</p> OpenAIAssistantsCodeInterpreterStreamingClass.js<pre><code>async getResponse(userInput, callback) {\n\n  if (this.thread == null) {\n    await this.createThread();\n  }\n\n  await this.openai.beta.threads.messages.create(this.thread.id, { role: \"user\", content: userInput });\n  let stream = await this.openai.beta.threads.runs.stream(this.thread.id, {\n    assistant_id: this.openAIAssistantId,\n  });\n\n  let runCompletedPromise = new Promise((resolve) =&gt; {\n    this.resolveRunCompletedPromise = resolve;\n  });\n\n  await this.handleStreamEvents(stream, callback);\n\n  await runCompletedPromise;\n  runCompletedPromise = null;\n}\n</code></pre> <p>STEP 4: Handle the stream events.</p> OpenAIAssistantsCodeInterpreterStreamingClass.js<pre><code>async handleStreamEvents(stream, callback) {\n  stream.on('textDelta', async (textDelta, snapshot) =&gt; await this.onTextDelta(textDelta, callback));\n  stream.on('event', async (event) =&gt; {\n    if (event.event == 'thread.run.completed') {\n      this.resolveRunCompletedPromise();\n    }\n    else if (event.event == 'thread.run.failed') {\n      console.log(JSON.stringify(event));\n      throw new Error('Run failed');\n    }\n  });\n  stream.on('toolCallCreated', (toolCall) =&gt; {\n    if (toolCall.type === 'code_interpreter') {\n      process.stdout.write('\\n\\nassistant-code:\\n');\n    }\n  });\n  stream.on('toolCallDelta', (toolCallDelta, snapshot) =&gt; {\n    if (toolCallDelta.type === 'code_interpreter') {\n      if (toolCallDelta.code_interpreter.input) {\n        process.stdout.write(toolCallDelta.code_interpreter.input);\n      }\n      if (toolCallDelta.code_interpreter.outputs) {\n        process.stdout.write('\\n\\nassistant-output:');\n        toolCallDelta.code_interpreter.outputs.forEach(output =&gt; {\n          if (output.type === \"logs\") {\n            process.stdout.write(`\\n${output.logs}\\n`);\n          }\n        });\n      }\n    }\n  });\n}\n</code></pre> <p>STEP 5: Process text deltas from the stream.</p> OpenAIAssistantsCodeInterpreterStreamingClass.js<pre><code>async onTextDelta(textDelta, callback) {\n  let content = textDelta.value;\n  if (content != null) {\n    if(callback != null) {\n      callback(content);\n      if (this.simulateTypingDelay &gt; 0) {\n        await new Promise(r =&gt; setTimeout(r, this.simulateTypingDelay));\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-py/sample-overview/","title":"OpenAI Assistants with Code Interpreter in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Assistants API with a code interpreter in a Python console application.</p> <p> main.py  openai_assistants_code_interpreter_streaming.py </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-code --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-code' in 'openai-asst-streaming-with-code-py' (3 files)...\n\nmain.py\nopenai_assistants_code_interpreter_streaming.py\nrequirements.txt\n\nGenerating 'openai-asst-streaming-with-code' in 'openai-asst-streaming-with-code-py' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Import required libraries and initialize variables.</p> main.py<pre><code>import os\nimport sys\nfrom openai import OpenAI\nfrom openai_assistants_code_interpreter_streaming import OpenAIAssistantsCodeInterpreterStreamingClass\n</code></pre> <p>STEP 2: Define the main function and read environment variables.</p> main.py<pre><code>def main():\n    ASSISTANT_ID = os.getenv('ASSISTANT_ID') or \"&lt;insert your OpenAI assistant ID here&gt;\"\n    threadId = sys.argv[1] if len(sys.argv) &gt; 1 else None\n\n    AZURE_OPENAI_API_KEY = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your Azure OpenAI API key here&gt;')\n    AZURE_OPENAI_API_VERSION = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your Azure OpenAI API version here&gt;')\n    AZURE_OPENAI_ENDPOINT = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your Azure OpenAI endpoint here&gt;')\n    AZURE_OPENAI_BASE_URL = f'{AZURE_OPENAI_ENDPOINT.rstrip(\"/\")}/openai'\n</code></pre> <p>STEP 3: Validate required environment variables.</p> main.py<pre><code>    ok = \\\n        ASSISTANT_ID != None and not ASSISTANT_ID.startswith('&lt;insert') and \\\n        AZURE_OPENAI_API_KEY != None and not AZURE_OPENAI_API_KEY.startswith('&lt;insert') and \\\n        AZURE_OPENAI_API_VERSION != None and not AZURE_OPENAI_API_VERSION.startswith('&lt;insert') and \\\n        AZURE_OPENAI_ENDPOINT != None and not AZURE_OPENAI_ENDPOINT.startswith('&lt;insert')\n\n    if not ok:\n        print('To use Azure OpenAI, set the following environment variables:\\n' +\n            '\\n  ASSISTANT_ID' +\n            '\\n  AZURE_OPENAI_API_KEY' +\n            '\\n  AZURE_OPENAI_API_VERSION' +\n            '\\n  AZURE_OPENAI_ENDPOINT')\n        print('\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n          '\\n  ai init' +\n          '\\n  ai dev shell' +\n          '\\n  python main.py' +\n          '\\n' +\n          '\\n  or' +\n          '\\n' +\n          '\\n  ai init' +\n          '\\n  ai dev shell --run \"python main.py\"')\n        os._exit(1)\n</code></pre> <p>STEP 4: Create the OpenAI client and assistant instance.</p> main.py<pre><code>    openai = OpenAI(\n        api_key = AZURE_OPENAI_API_KEY,\n        base_url = AZURE_OPENAI_BASE_URL,\n        default_query= { 'api-version': AZURE_OPENAI_API_VERSION },\n        default_headers = { 'api-key': AZURE_OPENAI_API_KEY }\n    )\n\n    assistant = OpenAIAssistantsCodeInterpreterStreamingClass(ASSISTANT_ID, openai)\n</code></pre> <p>STEP 5: Retrieve or create a thread and display messages.</p> main.py<pre><code>    if threadId is None:\n        assistant.create_thread()\n    else:\n        assistant.retrieve_thread(threadId)\n        assistant.get_thread_messages(lambda role, content: print(f'{role.capitalize()}: {content}', end=''))\n</code></pre> <p>STEP 6: Loop to get user input and display assistant's response.</p> main.py<pre><code>    while True:\n        user_input = input('User: ')\n        if user_input == 'exit' or user_input == '':\n            break\n\n        print('\\nAssistant: ', end='')\n        assistant.get_response(user_input, lambda content: print(content, end=''))\n\n        print('\\n')\n\n    print(f\"Bye! (threadId: {assistant.thread.id})\")\n\nif __name__ == '__main__':\n    try:\n        main()\n    except EOFError:\n        pass\n    except Exception as e:\n        print(f\"The sample encountered an error: {e}\")\n        sys.exit(1)\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-code-py/sample-overview/#openai_assistants_code_interpreter_streamingpy","title":"openai_assistants_code_interpreter_streaming.py","text":"<p>STEP 1: Import required libraries and define the event handler class.</p> openai_assistants_code_interpreter_streaming.py<pre><code>from typing_extensions import override\nfrom openai import AssistantEventHandler\n\nclass EventHandler(AssistantEventHandler):\n\n    def __init__(self, openai, callback):\n        super().__init__()\n        self.openai = openai\n        self.callback = callback\n</code></pre> <p>STEP 2: Override on_text_delta method to handle text delta events.</p> openai_assistants_code_interpreter_streaming.py<pre><code>    @override\n    def on_text_delta(self, delta, snapshot):\n        self.callback(delta.value)\n</code></pre> <p>STEP 3: Override on_tool_call_created method to handle tool call creation events.</p> openai_assistants_code_interpreter_streaming.py<pre><code>    def on_tool_call_created(self, tool_call):\n        if tool_call.type == 'code_interpreter':\n            print('\\n\\nassistant-code:\\n', end='', flush=True)\n</code></pre> <p>STEP 4: Override on_tool_call_delta method to handle tool call delta events.</p> openai_assistants_code_interpreter_streaming.py<pre><code>    def on_tool_call_delta(self, delta, snapshot):\n        if delta.type == 'code_interpreter':\n            if delta.code_interpreter.input:\n                print(delta.code_interpreter.input, end='', flush=True)\n            if delta.code_interpreter.outputs:\n                print(f'\\n\\nassistant-output:', end='', flush=True)\n                for output in delta.code_interpreter.outputs:\n                    if output.type == 'logs':\n                        print(f'\\n{output.logs}', flush=True)\n</code></pre> <p>STEP 5: Override on_event method to handle other events.</p> openai_assistants_code_interpreter_streaming.py<pre><code>    @override\n    def on_event(self, event):\n        if event.event == 'thread.run.failed':\n            print(event)\n            raise Exception('Run failed')\n        super().on_event(event)\n</code></pre> <p>STEP 6: Define the assistant class and initialize it.</p> openai_assistants_code_interpreter_streaming.py<pre><code>class OpenAIAssistantsCodeInterpreterStreamingClass:\n\n    def __init__(self, assistant_id, openai):\n        self.assistant_id = assistant_id\n        self.thread = None\n        self.openai = openai\n</code></pre> <p>STEP 7: Define methods to create and retrieve threads.</p> openai_assistants_code_interpreter_streaming.py<pre><code>    def create_thread(self):\n        self.thread = self.openai.beta.threads.create()\n        return self.thread\n\n    def retrieve_thread(self, thread_id):\n        self.thread = self.openai.beta.threads.retrieve(thread_id)\n        return self.thread\n</code></pre> <p>STEP 8: Define method to get thread messages and execute callback.</p> openai_assistants_code_interpreter_streaming.py<pre><code>    def get_thread_messages(self, callback):\n        messages = self.openai.beta.threads.messages.list(self.thread.id)\n        messages.data.reverse()\n\n        for message in messages.data:\n            content = ''.join([item.text.value for item in message.content]) + '\\n\\n'\n            callback(message.role, content)\n</code></pre> <p>STEP 9: Define method to get assistant response and handle stream events.</p> openai_assistants_code_interpreter_streaming.py<pre><code>    def get_response(self, user_input, callback) -&gt; None:\n        if self.thread == None:\n            self.create_thread()\n\n        message = self.openai.beta.threads.messages.create(\n            thread_id=self.thread.id,\n            role=\"user\",\n            content=user_input,\n        )\n\n        with self.openai.beta.threads.runs.stream(\n            thread_id=self.thread.id,\n            assistant_id=self.assistant_id,\n            event_handler=EventHandler(self.openai, callback)\n        ) as stream:\n            stream.until_done()\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-cs/sample-overview/","title":"OpenAI Assistants with File Search Streaming in C#","text":"<p>This sample demonstrates how to use OpenAI Assistants with file search streaming in a C# console application.</p> <p> Program.cs  OpenAIAssistantsFileSearchStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-file-search --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-file-search' in 'openai-asst-streaming-with-file-search-cs' (3 files)...\n\nOpenAIAssistantsFileSearchStreaming.csproj\nOpenAIAssistantsFileSearchStreamingClass.cs\nProgram.cs\n\nGenerating 'openai-asst-streaming-with-file-search' in 'openai-asst-streaming-with-file-search-cs' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables and validate them.</p> Program.cs<pre><code>var assistantId = Environment.GetEnvironmentVariable(\"ASSISTANT_ID\") ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nvar threadId = args.Length &gt; 0 ? args[0] : null;\n\n// Validate environment variables\nvar openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\n\nif (string.IsNullOrEmpty(openAIAPIKey) || openAIAPIKey.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(openAIEndpoint) || openAIEndpoint.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(assistantId) || assistantId.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use Azure OpenAI, set the following environment variables:\");\n    Console.WriteLine(\"  ASSISTANT_ID\\n  AZURE_OPENAI_API_KEY\\n  AZURE_OPENAI_ENDPOINT\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 2: Initialize the OpenAI client and the helper class.</p> Program.cs<pre><code>var client = string.IsNullOrEmpty(openAIAPIKey)\n    ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n    : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n\nvar assistant = new OpenAIAssistantsFileSearchStreamingClass(client, assistantId);\n</code></pre> <p>STEP 3: Create or retrieve a thread, and get existing messages if a thread ID is provided.</p> Program.cs<pre><code>if (string.IsNullOrEmpty(threadId))\n{\n    await assistant.CreateThreadAsync();\n}\nelse\n{\n    await assistant.RetrieveThreadAsync(threadId);\n    await assistant.GetThreadMessagesAsync((role, content) =&gt; \n    {\n        Console.WriteLine($\"{char.ToUpper(role[0]) + role.Substring(1)}: {content}\\n\");\n    });\n}\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    await assistant.GetResponseAsync(userPrompt, content =&gt; {\n        Console.Write(content);\n    });\n}\n\nConsole.WriteLine($\"Bye! (ThreadId: {assistant.Thread?.Id})\");\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-cs/sample-overview/#openaiassistantsfilesearchstreamingclasscs","title":"OpenAIAssistantsFileSearchStreamingClass.cs","text":"<p>STEP 1: Initialize the helper class using the OpenAI client and assistant ID.</p> OpenAIAssistantsFileSearchStreamingClass.cs<pre><code>public OpenAIAssistantsFileSearchStreamingClass(OpenAIClient client, string assistantId)\n{\n    _fileClient = client.GetFileClient();\n    _assistantClient = client.GetAssistantClient();\n    _assistantId = assistantId;\n}\n</code></pre> <p>STEP 2: Create or retrieve a thread.</p> OpenAIAssistantsFileSearchStreamingClass.cs<pre><code>public async Task CreateThreadAsync()\n{\n    var result = await _assistantClient.CreateThreadAsync();\n    Thread = result.Value;\n}\n\npublic async Task RetrieveThreadAsync(string threadId)\n{\n    var result = await _assistantClient.GetThreadAsync(threadId);\n    Thread = result.Value;\n}\n</code></pre> <p>STEP 3: Get existing messages from the thread and invoke the callback for each.</p> OpenAIAssistantsFileSearchStreamingClass.cs<pre><code>public async Task GetThreadMessagesAsync(Action&lt;string, string&gt; callback)\n{\n    var options = new MessageCollectionOptions() { Order = ListOrder.OldestFirst };\n    await foreach (var message in _assistantClient.GetMessagesAsync(Thread, options).GetAllValuesAsync())\n    {\n        var content = string.Join(\"\", message.Content.Select(c =&gt; c.Text));\n        var role = message.Role == MessageRole.User ? \"user\" : \"assistant\";\n        callback(role, content);\n    }\n}\n</code></pre> <p>STEP 4: When the user provides input, add the user message to the thread and create a new streaming run.</p> OpenAIAssistantsFileSearchStreamingClass.cs<pre><code>public async Task GetResponseAsync(string userInput, Action&lt;string&gt; callback)\n{\n    await _assistantClient.CreateMessageAsync(Thread, MessageRole.User, [ userInput ]);\n    var assistant = await _assistantClient.GetAssistantAsync(_assistantId);\n    var stream = _assistantClient.CreateRunStreamingAsync(Thread, assistant.Value);\n</code></pre> <p>STEP 5: Process the streaming updates, handling file search annotations, and invoking the callback for each content update.</p> OpenAIAssistantsFileSearchStreamingClass.cs<pre><code>    var cachedContent = string.Empty;\n    await foreach (var update in stream) \n    {\n        if (update is MessageContentUpdate contentUpdate)\n        {\n            var content = contentUpdate.Text;\n            var hasContent = !string.IsNullOrEmpty(content);\n\n            var replace = contentUpdate.TextAnnotation?.TextToReplace;\n            var hasAnnotation = !string.IsNullOrEmpty(replace);\n\n            var hasLenticularBrackets = hasContent &amp;&amp; content.Contains(\"\\u3010\") &amp;&amp; content.Contains(\"\\u3011\");\n            var shouldCache = hasLenticularBrackets &amp;&amp; !hasAnnotation;\n            if (shouldCache)\n            {\n                cachedContent = cachedContent + content;\n                continue;\n            }\n\n            var hasCache = !string.IsNullOrEmpty(cachedContent);\n            if (hasCache)\n            {\n                content = cachedContent + content;\n                cachedContent = string.Empty;\n            }\n\n            if (hasAnnotation)\n            {\n                var fileId = contentUpdate.TextAnnotation!.InputFileId;\n                var file = await _fileClient.GetFileAsync(fileId);\n                var fileName = file.Value.Filename ?? fileId;\n\n                var citation = $\"[{contentUpdate.TextAnnotation!.ContentIndex}](file:{fileName})\";\n                var hasReplacement = !string.IsNullOrEmpty(content) &amp;&amp; content.Contains(replace!);\n                content = hasReplacement\n                    ? content.Replace(replace!, citation)\n                    : $\"{citation} \";\n            }\n\n            callback(content);\n        }\n\n        if (update.UpdateKind == StreamingUpdateReason.RunStepCompleted)\n        {\n            callback(\"\\n\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-js/sample-overview/","title":"OpenAI Assistants with File Search in JavaScript","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Assistants API with file search functionality in a JavaScript console application.</p> <p> main.js  OpenAIAssistantsFileSearchStreamingClass.js  ReadLineWrapper.js </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-file-search --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-file-search' in 'openai-asst-streaming-with-file-search-js' (4 files)...\n\nmain.js\nOpenAIAssistantsFileSearchStreamingClass.js\npackage.json\nReadLineWrapper.js\n\nGenerating 'openai-asst-streaming-with-file-search' in 'openai-asst-streaming-with-file-search-js' (4 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-js/sample-overview/#mainjs","title":"main.js","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.js<pre><code>const ASSISTANT_ID = process.env.ASSISTANT_ID ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nconst AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION ?? \"&lt;insert your Azure OpenAI API version here&gt;\";\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nconst AZURE_OPENAI_BASE_URL = `${AZURE_OPENAI_ENDPOINT.replace(/\\/+$/, '')}/openai`;\n</code></pre> <p>STEP 2: Create the OpenAI client and the assistants streaming helper class instance.</p> main.js<pre><code>const openai = new OpenAI({\n    apiKey: AZURE_OPENAI_API_KEY,\n    baseURL: AZURE_OPENAI_BASE_URL,\n    defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n    defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n});\n\nconst assistant = new OpenAIAssistantsFileSearchStreamingClass(ASSISTANT_ID, openai);\n</code></pre> <p>STEP 3: Create or retrieve a thread and get thread messages if thread ID is provided.</p> main.js<pre><code>if (threadId === null) {\n    await assistant.createThread()\n} else {\n    await assistant.retrieveThread(threadId);\n    await assistant.getThreadMessages((role, content) =&gt; {\n      role = role.charAt(0).toUpperCase() + role.slice(1);\n      process.stdout.write(`${role}: ${content}`);\n      });\n}\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> main.js<pre><code>while (true) {\n    const input = await readline.question('User: ');\n    if (input === 'exit' || input === '') break;\n\n    process.stdout.write('\\nAssistant: ');\n    await assistant.getResponse(input, (content) =&gt; {\n        process.stdout.write(content);\n    });\n\n    process.stdout.write('\\n\\n');\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-js/sample-overview/#openaiassistantsfilesearchstreamingclassjs","title":"OpenAIAssistantsFileSearchStreamingClass.js","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> OpenAIAssistantsFileSearchStreamingClass.js<pre><code>class OpenAIAssistantsFileSearchStreamingClass {\n    constructor(openAIAssistantId, openai, simulateTypingDelay = 0) {\n        this.simulateTypingDelay = simulateTypingDelay;\n        this.openAIAssistantId = openAIAssistantId;\n        this.thread = null;\n        this.openai = openai;\n    }\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history and process streaming responses.</p> OpenAIAssistantsFileSearchStreamingClass.js<pre><code>async getResponse(userInput, callback) {\n    if (this.thread == null) {\n        await this.createThread();\n    }\n\n    await this.openai.beta.threads.messages.create(this.thread.id, { role: \"user\", content: userInput });\n    let stream = await this.openai.beta.threads.runs.stream(this.thread.id, {\n        assistant_id: this.openAIAssistantId,\n    });\n\n    let runCompletedPromise = new Promise((resolve) =&gt; {\n        this.resolveRunCompletedPromise = resolve;\n    });\n\n    await this.handleStreamEvents(stream, callback);\n    await runCompletedPromise;\n    runCompletedPromise = null;\n}\n</code></pre> <p>STEP 3: Handle the stream events and accumulate the response.</p> OpenAIAssistantsFileSearchStreamingClass.js<pre><code>async handleStreamEvents(stream, callback) {\n    stream.on('textDelta', async (textDelta, snapshot) =&gt; await this.onTextDelta(textDelta, callback));\n    stream.on('event', async (event) =&gt; {\n      if (event.event == 'thread.run.completed') {\n        this.resolveRunCompletedPromise();\n      }\n      else if (event.event == 'thread.run.failed') {\n        console.log(JSON.stringify(event));\n        throw new Error('Run failed');\n      }\n    });\n    stream.on(\"messageDone\", async (event) =&gt; {\n      if (event.content[0].type === \"text\") {\n        const { text } = event.content[0];\n        const { annotations } = text;\n        const citations = [];\n\n        let index = 0;\n        for (let annotation of annotations) {\n          const { file_citation } = annotation;\n          if (file_citation) {\n            const citedFile = await this.openai.files.retrieve(file_citation.file_id);\n            citations.push(\"[\" + index + \"] \" + citedFile.filename);\n          }\n          index++;\n        }\n        if (citations.length &gt; 0) {\n          process.stdout.write(`\\n\\n${citations.join(\"\\n\")}\\n`);\n        }\n      }\n    });\n}\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> OpenAIAssistantsFileSearchStreamingClass.js<pre><code>async onTextDelta(textDelta, callback) {\n    let content = textDelta.value;\n    if (content != null) {\n        if(callback != null) {\n            if (textDelta.annotations) {\n                for (let annotation of textDelta.annotations) {\n                    content = content.replace(annotation.text, `[${annotation.index}]`);\n                }\n            }\n            callback(content);\n            if (this.simulateTypingDelay &gt; 0) {\n                await new Promise(r =&gt; setTimeout(r, this.simulateTypingDelay));\n            }\n        }\n    }\n}\n</code></pre> <p>STEP 5: Create and retrieve threads, and get thread messages.</p> OpenAIAssistantsFileSearchStreamingClass.js<pre><code>async createThread() {\n    this.thread = await this.openai.beta.threads.create();\n    return this.thread;\n}\nasync retrieveThread(threadId) {\n    this.thread = await this.openai.beta.threads.retrieve(threadId);\n    return this.thread;\n}\nasync getThreadMessages(callback) {\n    const messages = await this.openai.beta.threads.messages.list(this.thread.id);\n    messages.data.reverse();\n    for (const message of messages.data) {\n        let content = message.content.map(item =&gt; item.text.value).join('') + '\\n\\n';\n        callback(message.role, content);\n    }\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-py/sample-overview/","title":"OpenAI Assistants with File Search in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Assistants API with file search and streaming in a Python console application.</p> <p> main.py  openai_assistants_file_search_streaming.py </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-file-search --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-file-search' in 'openai-asst-streaming-with-file-search-py' (3 files)...\n\nopenai_assistants_file_search_streaming.py\nmain.py\nrequirements.txt\n\nGenerating 'openai-asst-streaming-with-file-search' in 'openai-asst-streaming-with-file-search-py' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.py<pre><code>ASSISTANT_ID = os.getenv('ASSISTANT_ID') or \"&lt;insert your OpenAI assistant ID here&gt;\"\nAZURE_OPENAI_API_KEY = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your Azure OpenAI API key here&gt;')\nAZURE_OPENAI_API_VERSION = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your Azure OpenAI API version here&gt;')\nAZURE_OPENAI_ENDPOINT = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your Azure OpenAI endpoint here&gt;')\nAZURE_OPENAI_BASE_URL = f'{AZURE_OPENAI_ENDPOINT.rstrip(\"/\")}/openai'\n</code></pre> <p>STEP 2: Validate the environment variables.</p> main.py<pre><code>ok = \\\n    ASSISTANT_ID != None and not ASSISTANT_ID.startswith('&lt;insert') and \\\n    AZURE_OPENAI_API_KEY != None and not AZURE_OPENAI_API_KEY.startswith('&lt;insert') and \\\n    AZURE_OPENAI_API_VERSION != None and not AZURE_OPENAI_API_VERSION.startswith('&lt;insert') and \\\n    AZURE_OPENAI_ENDPOINT != None and not AZURE_OPENAI_ENDPOINT.startswith('&lt;insert')\n\nif not ok:\n    print('To use Azure OpenAI, set the following environment variables:\\n' +\n          '\\n  ASSISTANT_ID' +\n          '\\n  AZURE_OPENAI_API_KEY' +\n          '\\n  AZURE_OPENAI_API_VERSION' +\n          '\\n  AZURE_OPENAI_ENDPOINT')\n    print('\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n          '\\n  ai init' +\n          '\\n  ai dev shell' +\n          '\\n  python main.py' +\n          '\\n' +\n          '\\n  or' +\n          '\\n' +\n          '\\n  ai init' +\n          '\\n  ai dev shell --run \"python main.py\"')\n    os._exit(1)\n</code></pre> <p>STEP 3: Initialize the OpenAI client and the assistant.</p> main.py<pre><code>openai = OpenAI(\n    api_key = AZURE_OPENAI_API_KEY,\n    base_url = AZURE_OPENAI_BASE_URL,\n    default_query= { 'api-version': AZURE_OPENAI_API_VERSION },\n    default_headers = { 'api-key': AZURE_OPENAI_API_KEY }\n)\nassistant = OpenAIAssistantsFileSearchStreamingClass(ASSISTANT_ID, openai)\n</code></pre> <p>STEP 4: Create or retrieve a thread and display existing messages if thread ID is provided.</p> main.py<pre><code>threadId = sys.argv[1] if len(sys.argv) &gt; 1 else None\nif threadId is None:\n    assistant.create_thread()\nelse:\n    assistant.retrieve_thread(threadId)\n    assistant.get_thread_messages(lambda role, content: print(f'{role.capitalize()}: {content}', end=''))\n</code></pre> <p>STEP 5: Implement the user interaction loop to get responses from the assistant.</p> main.py<pre><code>while True:\n    user_input = input('User: ')\n    if user_input == 'exit' or user_input == '':\n        break\n    print('\\nAssistant: ', end='')\n    assistant.get_response(user_input, lambda content: print(content, end=''))\n    print('\\n')\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-file-search-py/sample-overview/#openai_assistants_file_search_streamingpy","title":"openai_assistants_file_search_streaming.py","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> openai_assistants_file_search_streaming.py<pre><code>class OpenAIAssistantsFileSearchStreamingClass:\n\n    def __init__(self, assistant_id, openai):\n        self.assistant_id = assistant_id\n        self.thread = None\n        self.openai = openai\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history and process streaming responses.</p> openai_assistants_file_search_streaming.py<pre><code>def get_response(self, user_input, callback) -&gt; None:\n    if self.thread == None:\n        self.create_thread()\n    message = self.openai.beta.threads.messages.create(\n        thread_id=self.thread.id,\n        role=\"user\",\n        content=user_input,\n    )\n    with self.openai.beta.threads.runs.stream(\n        thread_id=self.thread.id,\n        assistant_id=self.assistant_id,\n        event_handler=EventHandler(self.openai, callback)\n    ) as stream:\n        stream.until_done()\n</code></pre> <p>STEP 3: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> openai_assistants_file_search_streaming.py<pre><code>def on_text_delta(self, delta, snapshot):\n    content = delta.value\n    if delta.annotations:\n        for annotation in delta.annotations:\n            content = content.replace(annotation.text, f\"[{annotation.index}]\")\n    self.callback(content)\n</code></pre> <p>STEP 4: Once the message is done, output citations.</p> openai_assistants_file_search_streaming.py<pre><code>def on_message_done(self, message) -&gt; None:\n    message_content = message.content[0].text\n    annotations = message_content.annotations\n    citations = []\n    for index, annotation in enumerate(annotations):\n        if file_citation := getattr(annotation, \"file_citation\", None):\n            cited_file = self.openai.files.retrieve(file_citation.file_id)\n            citations.append(f\"[{index}] {cited_file.filename}\")\n    if citations:\n        print(\"\\n\\n\" + \"\\n\".join(citations), end=\"\", flush=True)\n</code></pre> <p>STEP 5: Create and retrieve threads, and get thread messages.</p> openai_assistants_file_search_streaming.py<pre><code>def create_thread(self):\n    self.thread = self.openai.beta.threads.create()\n    return self.thread\n\ndef retrieve_thread(self, thread_id):\n    self.thread = self.openai.beta.threads.retrieve(thread_id)\n    return self.thread\n\ndef get_thread_messages(self, callback):\n    messages = self.openai.beta.threads.messages.list(self.thread.id)\n    messages.data.reverse()\n\n    for message in messages.data:\n        content = ''.join([item.text.value for item in message.content]) + '\\n\\n'\n        callback(message.role, content)\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-cs/sample-overview/","title":"OpenAI Assistants with Function Calling in C#","text":"<p>This sample demonstrates how to use OpenAI Assistants with function calling in a C# console application.</p> <p> Program.cs  FunctionFactory.cs  HelperFunctionDescriptionAttribute.cs  HelperFunctionParameterDescriptionAttribute.cs  OpenAIAssistantsCustomFunctions.cs  OpenAIAssistantsFunctionsStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-functions --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-functions' in 'openai-asst-streaming-with-functions-cs' (7 files)...\n\nFunctionFactory.cs\nHelperFunctionDescriptionAttribute.cs\nHelperFunctionParameterDescriptionAttribute.cs\nOpenAIAssistantsCustomFunctions.cs\nOpenAIAssistantsFunctionsStreamingClass.cs\nProgram.cs\n\nGenerating 'openai-asst-streaming-with-functions' in 'openai-asst-streaming-with-functions-cs' (7 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var assistantId = Environment.GetEnvironmentVariable(\"ASSISTANT_ID\") ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nvar threadId = args.Length &gt; 0 ? args[0] : null;\n\n// Validate environment variables\nvar openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\n</code></pre> <p>STEP 2: Validate the environment variables.</p> Program.cs<pre><code>if (string.IsNullOrEmpty(openAIAPIKey) || openAIAPIKey.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(openAIEndpoint) || openAIEndpoint.StartsWith(\"&lt;insert\") ||\n    string.IsNullOrEmpty(assistantId) || assistantId.StartsWith(\"&lt;insert\"))\n{\n    Console.WriteLine(\"To use Azure OpenAI, set the following environment variables:\");\n    Console.WriteLine(\"  ASSISTANT_ID\\n  AZURE_OPENAI_API_KEY\\n  AZURE_OPENAI_ENDPOINT\");\n    Environment.Exit(1);\n}\n</code></pre> <p>STEP 3: Initialize OpenAI Client.</p> Program.cs<pre><code>var client = string.IsNullOrEmpty(openAIAPIKey)\n    ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n    : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n</code></pre> <p>STEP 4: Register custom functions.</p> Program.cs<pre><code>var factory = new FunctionFactory();\nfactory.AddFunctions(typeof(OpenAIChatCompletionsCustomFunctions));\n</code></pre> <p>STEP 5: Initialize the helper class with the OpenAI client, assistant ID, and function factory.</p> Program.cs<pre><code>var assistant = new OpenAIAssistantsFunctionsStreamingClass(client, assistantId, factory);\n</code></pre> <p>STEP 6: Create or retrieve a thread, and get existing messages if a thread ID is provided.</p> Program.cs<pre><code>if (string.IsNullOrEmpty(threadId))\n{\n    await assistant.CreateThreadAsync();\n}\nelse\n{\n    await assistant.RetrieveThreadAsync(threadId);\n    await assistant.GetThreadMessagesAsync((role, content) =&gt; \n    {\n        Console.WriteLine($\"{char.ToUpper(role[0]) + role.Substring(1)}: {content}\\n\");\n    });\n}\n</code></pre> <p>STEP 7: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    await assistant.GetResponseAsync(userPrompt, content =&gt; {\n        Console.Write(content);\n    });\n}\n\nConsole.WriteLine($\"Bye! (ThreadId: {assistant.Thread?.Id})\");\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-cs/sample-overview/#openaiassistantsfunctionsstreamingclasscs","title":"OpenAIAssistantsFunctionsStreamingClass.cs","text":"<p>STEP 1: Initialize the helper class using the OpenAI client, assistant ID, and function factory.</p> OpenAIAssistantsFunctionsStreamingClass.cs<pre><code>public OpenAIAssistantsFunctionsStreamingClass(OpenAIClient client, string assistantId, FunctionFactory factory)\n{\n    _assistantClient = client.GetAssistantClient();\n    _assistantId = assistantId;\n    _functionFactory = factory;\n</code></pre> <p>STEP 2: Update the run options with the available tool definitions.</p> OpenAIAssistantsFunctionsStreamingClass.cs<pre><code>    _runOptions=  new RunCreationOptions();\n    foreach (var tool in _functionFactory.GetToolDefinitions())\n    {\n        _runOptions.ToolsOverride.Add(tool);\n    }\n}\n</code></pre> <p>STEP 3: Create or retrieve thread.</p> OpenAIAssistantsFunctionsStreamingClass.cs<pre><code>public async Task CreateThreadAsync()\n{\n    var result = await _assistantClient.CreateThreadAsync();\n    Thread = result.Value;\n}\n\npublic async Task RetrieveThreadAsync(string threadId)\n{\n    var result = await _assistantClient.GetThreadAsync(threadId);\n    Thread = result.Value;\n}\n</code></pre> <p>STEP 4: Get existing messages from the thread and invoke the callback for each.</p> OpenAIAssistantsStreamingClass.cs<pre><code>public async Task GetThreadMessagesAsync(Action&lt;string, string&gt; callback)\n{\n    var options = new MessageCollectionOptions() { Order = ListOrder.OldestFirst };\n    await foreach (var message in _assistantClient.GetMessagesAsync(Thread, options).GetAllValuesAsync())\n    {\n        var content = string.Join(\"\", message.Content.Select(c =&gt; c.Text));\n        var role = message.Role == MessageRole.User ? \"user\" : \"assistant\";\n        callback(role, content);\n    }\n}\n</code></pre> <p>STEP 5: When the user provides input, add the user message to the thread and create a new streaming run with the run options containing the tool definitions.</p> OpenAIAssistantsFunctionsStreamingClass.cs<pre><code>public async Task GetResponseAsync(string userInput, Action&lt;string&gt; callback)\n{\n    await _assistantClient.CreateMessageAsync(Thread, MessageRole.User, [ userInput ]);\n    var assistant = await _assistantClient.GetAssistantAsync(_assistantId);\n    var stream = _assistantClient.CreateRunStreamingAsync(Thread, assistant.Value, _runOptions);\n</code></pre> <p>STEP 6: Process the streaming updates, invoking the callback for each content update.</p> OpenAIAssistantsFunctionsStreamingClass.cs<pre><code>    ThreadRun? run = null;\n    List&lt;ToolOutput&gt; toolOutputs = [];\n    do\n    {\n        await foreach (var update in stream)\n        {\n            if (update is MessageContentUpdate contentUpdate)\n            {\n                callback(contentUpdate.Text);\n            }\n</code></pre> <p>STEP 7: If the update is a required action, try calling the requested function, and cache the tool outputs</p> OpenAIAssistantsFunctionsStreamingClass.cs<pre><code>            else if (update is RequiredActionUpdate requiredActionUpdate)\n            {\n                if (_functionFactory.TryCallFunction(requiredActionUpdate.FunctionName, requiredActionUpdate.FunctionArguments, out var result))\n                {\n                    callback($\"\\rassistant-function: {requiredActionUpdate.FunctionName}({requiredActionUpdate.FunctionArguments}) =&gt; {result}\\n\");\n                    callback(\"\\nAssistant: \");\n                    toolOutputs.Add(new ToolOutput(requiredActionUpdate.ToolCallId, result));\n                }\n            }\n\n            if (update is RunUpdate runUpdate)\n            {\n                run = runUpdate;\n            }\n\n            if (run?.Status.IsTerminal == true)\n            {\n                callback(\"\\n\\n\");\n            }\n        }\n</code></pre> <p>STEP 7: After processing all the updates, submit the tool outputs to the run if there are any.</p> OpenAIAssistantsFunctionsStreamingClass.cs<pre><code>        if (toolOutputs.Count &gt; 0 &amp;&amp; run != null)\n        {\n            stream = _assistantClient.SubmitToolOutputsToRunStreamingAsync(run, toolOutputs);\n            toolOutputs.Clear();\n        }\n    }\n    while (run?.Status.IsTerminal == false);\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-js/sample-overview/","title":"OpenAI Assistants with Function Calling in JavaScript","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Assistants API with function calling in a JavaScript application.</p> <p> main.js  OpenAIAssistantsCustomFunctions.js  OpenAIAssistantsFunctionsStreamingClass.js </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-functions --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-functions' in 'openai-asst-streaming-with-functions-js' (3 files)...\n\nOpenAIAssistantsFunctionsStreamingClass.js\nOpenAIAssistantsCustomFunctions.js\nmain.js\n\nGenerating 'openai-asst-streaming-with-functions' in 'openai-asst-streaming-with-functions-js' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-js/sample-overview/#mainjs","title":"main.js","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.js<pre><code>const ASSISTANT_ID = process.env.ASSISTANT_ID ?? \"&lt;insert your OpenAI assistant ID here&gt;\";\nconst AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION ?? \"&lt;insert your Azure OpenAI API version here&gt;\";\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nconst AZURE_OPENAI_BASE_URL = `${AZURE_OPENAI_ENDPOINT.replace(/\\/+$, '')}/openai`;\n</code></pre> <p>STEP 2: Validate the environment variables.</p> main.js<pre><code>const azureOk = \n  AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_API_VERSION != null &amp;&amp; !AZURE_OPENAI_API_VERSION.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.startsWith('&lt;insert');\n\nconst ok = azureOk &amp;&amp;\n  ASSISTANT_ID != null &amp;&amp; !ASSISTANT_ID.startsWith('&lt;insert');\n\nif (!ok) {\n  console.error(\n    'To use Azure OpenAI, set the following environment variables:\\n' +\n    '\\n  ASSISTANT_ID' +\n    '\\n  AZURE_OPENAI_API_KEY' +\n    '\\n  AZURE_OPENAI_API_VERSION' +\n    '\\n  AZURE_OPENAI_ENDPOINT'\n  );\n  console.error(\n    '\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell' +\n    '\\n  node main.js' +\n    '\\n' +\n    '\\n  or' +\n    '\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell --run \"node main.js\"'\n  );\n  process.exit(1);\n}\n</code></pre> <p>STEP 3: Create the OpenAI client.</p> main.js<pre><code>const openai = new OpenAI({\n  apiKey: AZURE_OPENAI_API_KEY,\n  baseURL: AZURE_OPENAI_BASE_URL,\n  defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n  defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n});\n</code></pre> <p>STEP 4: Initialize the assistant's streaming helper class.</p> main.js<pre><code>const assistant = new OpenAIAssistantsFunctionsStreamingClass(ASSISTANT_ID, factory, openai);\n</code></pre> <p>STEP 5: Create or retrieve a thread and display its messages.</p> main.js<pre><code>if (threadId === null) {\n  await assistant.createThread()\n} else {\n  await assistant.retrieveThread(threadId);\n  await assistant.getThreadMessages((role, content) =&gt; {\n    role = role.charAt(0).toUpperCase() + role.slice(1);\n    process.stdout.write(`${role}: ${content}`);\n  });\n}\n</code></pre> <p>STEP 6: Loop to get user input and get the assistant's response.</p> main.js<pre><code>while (true) {\n  const input = await readline.question('User: ');\n  if (input === 'exit' || input === '') break;\n\n  process.stdout.write('\\nAssistant: ');\n  await assistant.getResponse(input, (content) =&gt; {\n    process.stdout.write(content);\n  });\n  process.stdout.write('\\n\\n');\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-js/sample-overview/#openaiassistantscustomfunctionsjs","title":"OpenAIAssistantsCustomFunctions.js","text":"<p>STEP 1: Define the function and its schema, then add it to the function factory.</p> OpenAIAssistantsCustomFunctions.js<pre><code>function getCurrentWeather(function_arguments) {\n  const location = JSON.parse(function_arguments).location;\n  return `The weather in ${location} is 72 degrees and sunny.`;\n};\n\nconst getCurrentWeatherSchema = {\n  name: \"get_current_weather\",\n  description: \"Get the current weather in a given location\",\n  parameters: {\n    type: \"object\",\n    properties: {\n      location: {\n        type: \"string\",\n        description: \"The city and state, e.g. San Francisco, CA\",\n      },\n      unit: {\n        type: \"string\",\n        enum: [\"celsius\", \"fahrenheit\"],\n      },\n    },\n    required: [\"location\"],\n  },\n};\n\nfactory.addFunction(getCurrentWeatherSchema, getCurrentWeather);\n</code></pre> <p>STEP 2: Add more functions following the same pattern.</p> OpenAIAssistantsCustomFunctions.js<pre><code>function getCurrentDate() {\n  const date = new Date();\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n}\n\nconst getCurrentDateSchema = {\n  name: \"get_current_date\",\n  description: \"Get the current date\",\n  parameters: {\n    type: \"object\",\n    properties: {},\n  },\n};\n\nfactory.addFunction(getCurrentDateSchema, getCurrentDate);\n\nfunction getCurrentTime() {\n  const date = new Date();\n  return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n}\n\nconst getCurrentTimeSchema = {\n  name: \"get_current_time\",\n  description: \"Get the current time\",\n  parameters: {\n    type: \"object\",\n    properties: {},\n  },\n};\n\nfactory.addFunction(getCurrentTimeSchema, getCurrentTime);\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-js/sample-overview/#openaiassistantsfunctionsstreamingclassjs","title":"OpenAIAssistantsFunctionsStreamingClass.js","text":"<p>STEP 1: Create the constructor to initialize the class.</p> OpenAIAssistantsFunctionsStreamingClass.js<pre><code>constructor(openAIAssistantId, functionFactory, openai, simulateTypingDelay = 0) {\n  this.simulateTypingDelay = simulateTypingDelay;\n  this.openAIAssistantId = openAIAssistantId;\n  this.functionFactory = functionFactory;\n  this.thread = null;\n  this.openai = openai;\n}\n</code></pre> <p>STEP 2: Implement methods to create/retrieve threads and get messages.</p> OpenAIAssistantsFunctionsStreamingClass.js<pre><code>async createThread() {\n  this.thread = await this.openai.beta.threads.create();\n  return this.thread;\n}\n\nasync retrieveThread(threadId) {\n  this.thread = await this.openai.beta.threads.retrieve(threadId);\n  return this.thread;\n}\n\nasync getThreadMessages(callback) {\n  const messages = await this.openai.beta.threads.messages.list(this.thread.id);\n  messages.data.reverse();\n  for (const message of messages.data) {\n    let content = message.content.map(item =&gt; item.text.value).join('') + '\\n\\n';\n    callback(message.role, content);\n  }\n}\n</code></pre> <p>STEP 3: Implement the method to get the assistant's response.</p> OpenAIAssistantsFunctionsStreamingClass.js<pre><code>async getResponse(userInput, callback) {\n  if (this.thread == null) {\n    await this.createThread();\n  }\n  await this.openai.beta.threads.messages.create(this.thread.id, { role: \"user\", content: userInput });\n  let stream = await this.openai.beta.threads.runs.stream(this.thread.id, {\n    assistant_id: this.openAIAssistantId,\n    tools: this.functionFactory.getTools()\n  });\n  let runCompletedPromise = new Promise((resolve) =&gt; {\n    this.resolveRunCompletedPromise = resolve;\n  });\n  await this.handleStreamEvents(stream, callback);\n  await runCompletedPromise;\n  runCompletedPromise = null;\n}\n</code></pre> <p>STEP 4: Handle stream events and tool calls.</p> OpenAIAssistantsFunctionsStreamingClass.js<pre><code>async handleStreamEvents(stream, callback) {\n  stream.on('textDelta', async (textDelta, snapshot) =&gt; await this.onTextDelta(textDelta, callback));\n  stream.on('event', async (event) =&gt; {\n    if (event.event == 'thread.run.completed') {\n      this.resolveRunCompletedPromise();\n    }\n    else if (event.event == 'thread.run.failed') {\n      console.log(JSON.stringify(event));\n      throw new Error('Run failed');\n    }\n    else if (event.event == 'thread.run.requires_action') {\n      await this.onThreadRunRequiresAction(event, callback);\n    }\n  });\n}\n\nasync onTextDelta(textDelta, callback) {\n  let content = textDelta.value;\n  if (content != null) {\n    if(callback != null) {\n      callback(content);\n      if (this.simulateTypingDelay &gt; 0) {\n        await new Promise(r =&gt; setTimeout(r, this.simulateTypingDelay));\n      }\n    }\n  }\n}\n\nasync onThreadRunRequiresAction(event, callback) {\n  let toolCalls = event.data?.required_action?.submit_tool_outputs?.tool_calls;\n  if (toolCalls != null) {\n    let tool_outputs = this.getToolOutputs(toolCalls);\n    let stream = await this.openai.beta.threads.runs.submitToolOutputsStream(this.thread.id, event.data.id, { tool_outputs: tool_outputs})\n    await this.handleStreamEvents(stream, callback);\n  }\n}\n\ngetToolOutputs(toolCalls) {\n  let tool_outputs = [];\n  for (let toolCall of toolCalls) {\n    if (toolCall.type == 'function') {\n      let result = this.functionFactory.tryCallFunction(toolCall.function?.name, toolCall.function?.arguments);\n      tool_outputs.push({\n        output: result,\n        tool_call_id: toolCall.id\n      });\n    }\n  }\n  return tool_outputs;\n}\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-py/sample-overview/","title":"OpenAI Assistants with Function Calling in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Assistants API with function calling in a Python console application.</p> <p> main.py  openai_assistants_custom_functions.py  openai_assistants_functions_streaming.py </p> How to generate this sample Command<pre><code>ai dev new openai-asst-streaming-with-functions --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-asst-streaming-with-functions' in 'openai-asst-streaming-with-functions-py' (3 files)...\n\nmain.py\nopenai_assistants_custom_functions.py\nopenai_assistants_functions_streaming.py\n\nGenerating 'openai-asst-streaming-with-functions' in 'openai-asst-streaming-with-functions-py' (3 files)... DONE!\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.py<pre><code>ASSISTANT_ID = os.getenv('ASSISTANT_ID') or \"&lt;insert your OpenAI assistant ID here&gt;\"\nAZURE_OPENAI_API_KEY = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your Azure OpenAI API key here&gt;')\nAZURE_OPENAI_API_VERSION = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your Azure OpenAI API version here&gt;')\nAZURE_OPENAI_ENDPOINT = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your Azure OpenAI endpoint here&gt;')\nAZURE_OPENAI_BASE_URL = f'{AZURE_OPENAI_ENDPOINT.rstrip(\"/\")}/openai'\n</code></pre> <p>STEP 2: Validate the environment variables.</p> main.py<pre><code>ok = \\\n    ASSISTANT_ID != None and not ASSISTANT_ID.startswith('&lt;insert') and \\\n    AZURE_OPENAI_API_KEY != None and not AZURE_OPENAI_API_KEY.startswith('&lt;insert') and \\\n    AZURE_OPENAI_API_VERSION != None and not AZURE_OPENAI_API_VERSION.startswith('&lt;insert') and \\\n    AZURE_OPENAI_ENDPOINT != None and not AZURE_OPENAI_ENDPOINT.startswith('&lt;insert')\n\nif not ok:\n    print('To use Azure OpenAI, set the following environment variables:\\n' +\n        '\\n  ASSISTANT_ID' +\n        '\\n  AZURE_OPENAI_API_KEY' +\n        '\\n  AZURE_OPENAI_API_VERSION' +\n        '\\n  AZURE_OPENAI_ENDPOINT')\n    print('\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n      '\\n  ai init' +\n      '\\n  ai dev shell' +\n      '\\n  python main.py' +\n      '\\n' +\n      '\\n  or' +\n      '\\n' +\n      '\\n  ai init' +\n      '\\n  ai dev shell --run \"python main.py\"')\n    os._exit(1)\n</code></pre> <p>STEP 3: Initialize the OpenAI client with the configuration settings.</p> main.py<pre><code>openai = OpenAI(\n    api_key = AZURE_OPENAI_API_KEY,\n    base_url = AZURE_OPENAI_BASE_URL,\n    default_query= { 'api-version': AZURE_OPENAI_API_VERSION },\n    default_headers = { 'api-key': AZURE_OPENAI_API_KEY }\n)\n</code></pre> <p>STEP 4: Initialize the helper class with the OpenAI client.</p> main.py<pre><code>assistant = OpenAIAssistantsFunctionsStreamingClass(ASSISTANT_ID, factory, openai)\n</code></pre> <p>STEP 5: Create or retrieve a thread and display its messages.</p> main.py<pre><code>if threadId is None:\n    assistant.create_thread()\nelse:\n    assistant.retrieve_thread(threadId)\n    assistant.get_thread_messages(lambda role, content: print(f'{role.capitalize()}: {content}', end=''))\n</code></pre> <p>STEP 6: Loop to get user input and get the assistant's response.</p> main.py<pre><code>while True:\n    user_input = input('User: ')\n    if user_input == 'exit' or user_input == '':\n        break\n\n    print('\\nAssistant: ', end='')\n    assistant.get_response(user_input, lambda content: print(content, end=''))\n\n    print('\\n')\n\nprint(f\"Bye! (threadId: {assistant.thread.id})\")\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-py/sample-overview/#openai_assistants_custom_functionspy","title":"openai_assistants_custom_functions.py","text":"<p>STEP 1: Define the function and its schema, then add it to the function factory.</p> openai_assistants_custom_functions.py<pre><code>@ignore_args_decorator\ndef get_current_date():\n    from datetime import date\n    today = date.today()\n    return f'{today.year}-{today.month}-{today.day}'\n\nget_current_date_schema = {\n    'name': 'get_current_date',\n    'description': 'Get the current date',\n    'parameters': {\n        'type': 'object',\n        'properties': {},\n    },\n}\n\nfactory.add_function(get_current_date_schema, get_current_date)\n</code></pre> <p>STEP 2: Add more functions following the same pattern.</p> openai_assistants_custom_functions.py<pre><code>@ignore_args_decorator\ndef get_current_time():\n    from datetime import datetime\n    now = datetime.now()\n    return f'{now.hour}:{now.minute}'\n\nget_current_time_schema = {\n    'name': 'get_current_time',\n    'description': 'Get the current time',\n    'parameters': {\n        'type': 'object',\n        'properties': {},\n    },\n}\n\nfactory.add_function(get_current_time_schema, get_current_time)\n\ndef get_current_weather(function_arguments):\n    location = function_arguments.get('location')\n    return f'The weather in {location} is 72 degrees and sunny.'\n\nget_current_weather_schema = {\n    'name': 'get_current_weather',\n    'description': 'Get the current weather in a given location',\n    'parameters': {\n        'type': 'object',\n        'properties': {\n            'location': {\n                'type': 'string',\n                'description': 'The city and state, e.g. San Francisco, CA',\n            },\n            'unit': {\n                'type': 'string',\n                'enum': ['celsius', 'fahrenheit'],\n            },\n        },\n        'required': ['location'],\n    },\n}\n\nfactory.add_function(get_current_weather_schema, get_current_weather)\n</code></pre>"},{"location":"openai-asst/openai-asst-streaming-with-functions-py/sample-overview/#openai_assistants_functions_streamingpy","title":"openai_assistants_functions_streaming.py","text":"<p>STEP 1: Create the client and initialize chat message history.</p> openai_assistants_functions_streaming.py<pre><code>class OpenAIAssistantsFunctionsStreamingClass:\n\n    def __init__(self, assistant_id, function_factory, openai):\n        self.assistant_id = assistant_id\n        self.function_factory = function_factory\n        self.thread = None\n        self.openai = openai\n</code></pre> <p>STEP 2: Create an event handler that processes each text delta.</p> openai_assistants_functions_streaming.py<pre><code>class EventHandler(AssistantEventHandler):\n    def __init__(self, openai, callback):\n        super().__init__()\n        self.openai = openai\n        self.callback = callback\n\n    @override\n    def on_text_delta(self, delta, snapshot):\n        self.callback(delta.value)\n\n    @override\n    def on_event(self, event):\n        if event.event == 'thread.run.requires_action':\n            run_id = event.data.id\n            self.handle_requires_action(event.data, run_id)\n        elif event.event == 'thread.run.failed':\n            print(event)\n            raise Exception('Run failed')\n        super().on_event(event)\n</code></pre> <p>STEP 3: Implement the required actions and tool outputs handling.</p> openai_assistants_functions_streaming.py<pre><code>def handle_requires_action(self, data, run_id):\n    tool_outputs = []\n\n    tool_calls = data.required_action.submit_tool_outputs.tool_calls\n    if tool_calls != None:\n        tool_outputs = self.get_tool_outputs(tool_calls)\n\n    self.submit_tool_outputs(tool_outputs, run_id)\n\n# The rest of the code follows the same pattern of handling different parts of the streaming process.\n</code></pre>"},{"location":"openai-chat/ai-search/","title":"OpenAI Chat AI Search","text":"Why use OpenAI Chat with AI Search? <p>Using OpenAI Chat with AI Search allows you to extend the LLM's innate world knowledge with custom data of your own. This enables you to provide more relevant and accurate responses to user queries by leveraging Azure AI Search to find and retrieve data from your own data sources, using keyword, vector, and/or semantic search.</p> TutorialGenerate Code <p>The <code>ai</code> CLI allows you to extend OpenAI's models with custom data sources using Azure AI Search.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> <p>The <code>ai dev new</code> command allows you to generate OpenAI Chat sample code with custom data sources using Azure AI Search.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#GoJavaJavaScriptPython"},{"location":"openai-chat/ai-search/#initialize-azure-ai-search-resource","title":"Initialize Azure AI Search resource","text":"<p>Initialize Azure AI Search<pre><code>ai init search\n</code></pre> Follow the prompts to select your Azure subscription and Azure AI Search resource.</p>"},{"location":"openai-chat/ai-search/#see-the-persisted-config-from-ai-init-search","title":"See the persisted config from <code>ai init search</code>","text":"Get search endpoint<pre><code>ai config @search.endpoint\n</code></pre> Get search key<pre><code>ai config @search.key\n</code></pre>"},{"location":"openai-chat/ai-search/#create-or-update-your-azure-ai-search-index","title":"Create or update your Azure AI Search index","text":"Create search index<pre><code>ai search index create --name MyFiles --files *.md --blob-container https://...\n</code></pre> Update search index<pre><code>ai search index update --name MyFiles --files *.md --blob-container https://...\n</code></pre>"},{"location":"openai-chat/ai-search/#see-the-persisted-config-from-ai-search-index-createupdate","title":"See the persisted config from <code>ai search index create/update</code>","text":"Get search index name<pre><code>ai config @search.index.name\n</code></pre>"},{"location":"openai-chat/ai-search/#use-the-search-index-in-chat-completions","title":"Use the search index in chat completions","text":"Use search index in chat<pre><code>ai chat --user \"What is the capital of France?\" --index MyFiles\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"openai-chat/ai-search/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-data --csharp\n</code></pre>"},{"location":"openai-chat/ai-search/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"<p>Generate a C# sample that uses AI Search functionalities.</p> <pre><code>aai dev new openai-chat-streaming-with-data --csharp\ncd openai-chat-streaming-with-data-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIChatCompletionsWithDataStreamingClass.cs</p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"openai-chat/ai-search/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-data --go\n</code></pre>"},{"location":"openai-chat/ai-search/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>Generate a Go sample that uses AI Search functionalities.</p> <pre><code>aai dev new openai-chat-streaming-with-data --go\ncd openai-chat-streaming-with-data-go\n</code></pre> See the code; learn how it works... <p> main.go  openai_chat_completions_streaming_with_data_hello_world.go</p> <p> Deep dive on how it works </p> Install dependencies<pre><code>go mod tidy\n</code></pre> Run the sample<pre><code>ai dev shell\ngo run main.go\n</code></pre>"},{"location":"openai-chat/ai-search/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-data --java\n</code></pre>"},{"location":"openai-chat/ai-search/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>Generate a Java sample that uses AI Search functionalities.</p> <pre><code>aai dev new openai-chat-streaming-with-data --java\ncd openai-chat-streaming-with-data-java\n</code></pre> See the code; learn how it works... <p> Main.java  OpenAIChatCompletionsWithDataStreamingClass.java</p> <p> Deep dive on how it works </p> Restore packages<pre><code>mvn clean package\n</code></pre> Build the sample<pre><code>ai dev shell\njavac -cp \"target/lib/*\" src/OpenAIChatCompletionsWithDataStreamingClass.java src/Main.java -d out\n</code></pre> Run the sample<pre><code>java -cp \"out;target/lib/*\" Main\n</code></pre>"},{"location":"openai-chat/ai-search/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-data --javascript\n</code></pre>"},{"location":"openai-chat/ai-search/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"<p>Generate a JavaScript sample that uses AI Search functionalities.</p> <pre><code>aai dev new openai-chat-streaming-with-data --javascript\ncd openai-chat-streaming-with-data-js\n</code></pre> See the code; learn how it works... <p> Main.js  OpenAIChatCompletionsWithDataStreamingClass.js</p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>ai dev shell\nnode Main.js\n</code></pre>"},{"location":"openai-chat/ai-search/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-data --python\n</code></pre>"},{"location":"openai-chat/ai-search/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"<p>Generate a Python sample that uses AI Search functionalities.</p> <pre><code>aai dev new openai-chat-streaming-with-data --python\ncd openai-chat-streaming-with-data-py\n</code></pre> See the code; learn how it works... <p> main.py  requirements.txt</p> <p> Deep dive on how it works </p> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre>"},{"location":"openai-chat/basics/","title":"OpenAI Chat Basics","text":"TutorialGenerate Code <p>The <code>ai chat</code> command allows you to interact w/ OpenAI models from the command line.  </p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> <p>The <code>ai dev new</code> command allows you to generate sample code to interact w/ OpenAI models.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#GoJavaJavaScriptPython"},{"location":"openai-chat/basics/#user-and-system-prompts","title":"User and System Prompts","text":"<p>The <code>ai chat</code> command sends a user prompt to OpenAI and displays the response.</p> User prompts are questions or statements to the model<pre><code>ai chat --user \"What is the capital of France?\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France?\n\nassistant: The capital of France is Paris.\n</code></pre> System prompts are special instructions for the model<pre><code>ai chat --user \"What is the capital of France.\" --system \"Always answer in French.\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France.\n\nassistant: La capitale de la France est Paris.\n</code></pre> --question is an alias for --user<pre><code>ai chat --question \"What is the capital of France?\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nuser@CHAT: What is the capital of France?\n\nassistant: The capital of France is Paris.\n</code></pre>"},{"location":"openai-chat/basics/#user-and-system-prompts-from-files","title":"User and System prompts from Files","text":"User prompt from a file<pre><code>ai chat --question \"@question.txt\"\n</code></pre> System prompt from a file<pre><code>ai chat --question \"What is the capital of France?\" --system \"@system.txt\"\n</code></pre>"},{"location":"openai-chat/basics/#interactive-chat","title":"Interactive Chat","text":"<p>The <code>--interactive</code> flag allows back-and-forth conversations with the model.</p> Interactive chat<pre><code>ai chat --interactive\n</code></pre> Interactive with an initial question<pre><code>ai chat --interactive --question \"What is the capital of France?\"\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nPress ENTER for more options.\n\nuser@CHAT: What is the capital of France?\n\nassistant: The capital of France is Paris.\n\nuser@CHAT: What about the US?\n\nassistant: The capital of the United States is Washington, D.C.\n\nuser@CHAT: exit\n</code></pre> Interactive with a system prompt<pre><code>ai chat --interactive --system \"Always answer in French.\"\n</code></pre>"},{"location":"openai-chat/basics/#answers-and-chat-history","title":"Answers and chat history","text":"Output answer to a file<pre><code>ai chat --question \"What is the capital of France?\" --output-answer answer.txt\n</code></pre> Output chat history to a file<pre><code>ai chat --interactive --output-chat-history history.jsonl\n</code></pre> Input chat history from a file<pre><code>ai chat --interactive --input-chat-history history.jsonl\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"openai-chat/basics/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat --csharp\nai dev new list openai-chat-streaming --csharp\n</code></pre>"},{"location":"openai-chat/basics/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"StreamingNon-streaming <p>Generate a C# sample that uses streaming completions.</p> <pre><code>ai dev new openai-chat-streaming --csharp\ncd openai-chat-streaming-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIChatCompletionsStreamingClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre> <p>Generate a C# sample that uses non-streaming completions.</p> <pre><code>ai dev new openai-chat --csharp\ncd openai-chat-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIChatCompletionsClass.cs</p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"openai-chat/basics/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat --go\nai dev new list openai-chat-streaming --go\n</code></pre>"},{"location":"openai-chat/basics/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"StreamingNon-streaming <p>Generate a Go sample that uses streaming completions.</p> <pre><code>ai dev new openai-chat-streaming --go\ncd openai-chat-streaming-go\n</code></pre> See the code; learn how it works... <p> main.go  openai_chat_completions_streaming_hello_world.go </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>go mod tidy\n</code></pre> Run the sample<pre><code>go run main.go\n</code></pre> <p>Generate a Go sample that uses non-streaming completions.</p> <pre><code>ai dev new openai-chat --go\ncd openai-chat-go\n</code></pre> See the code; learn how it works... <p> main.go  openai_chat_completions_hello_world.go </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>go mod tidy\n</code></pre> Run the sample<pre><code>go run main.go\n</code></pre>"},{"location":"openai-chat/basics/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat --java\nai dev new list openai-chat-streaming --java\n</code></pre>"},{"location":"openai-chat/basics/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"StreamingNon-streaming <p>Generate a Java sample that uses streaming completions.</p> <pre><code>ai dev new openai-chat-streaming --java\ncd openai-chat-streaming-java\n</code></pre> See the code; learn how it works... <p> Main.java  OpenAIChatCompletionsStreamingClass.java </p> <p> Deep dive on how it works </p> Restore packages<pre><code>mvn clean package\n</code></pre> WindowsmacOSLinux Build the sample<pre><code>ai dev shell\njavac -cp \"target/lib/*\" src/OpenAIChatCompletionsStreamingClass.java src/Main.java -d out\n</code></pre> Run the sample<pre><code>java -cp \"out;target/lib/*\" Main\n</code></pre> Build the sample<pre><code>ai dev shell\njavac -cp \"target/lib/*\" src/OpenAIChatCompletionsStreamingClass.java src/Main.java -d out\n</code></pre> Run the sample<pre><code>java -cp \"out:target/lib/*\" Main\n</code></pre> Build the sample<pre><code>ai dev shell\njavac -cp \"target/lib/*\" src/OpenAIChatCompletionsStreamingClass.java src/Main.java -d out\n</code></pre> Run the sample<pre><code>java -cp \"out:target/lib/*\" Main\n</code></pre> <p>Generate a Java sample that uses non-streaming completions.</p> <pre><code>ai dev new openai-chat --java\ncd openai-chat-java\n</code></pre> See the code; learn how it works... <p> Main.java  OpenAIChatCompletionsClass.java </p> <p> Deep dive on how it works </p> Restore packages<pre><code>mvn clean package\n</code></pre> WindowsmacOSLinux Build the sample<pre><code>ai dev shell\njavac -cp \"target/lib/*\" src/OpenAIChatCompletionsClass.java src/Main.java -d out\n</code></pre> Run the sample<pre><code>java -cp \"out;target/lib/*\" Main\n</code></pre> Build the sample<pre><code>ai dev shell\njavac -cp \"target/lib/*\" src/OpenAIChatCompletionsClass.java src/Main.java -d out\n</code></pre> Run the sample<pre><code>java -cp \"out:target/lib/*\" Main\n</code></pre> Build the sample<pre><code>ai dev shell\njavac -cp \"target/lib/*\" src/OpenAIChatCompletionsClass.java src/Main.java -d out\n</code></pre> Run the sample<pre><code>java -cp \"out:target/lib/*\" Main\n</code></pre>"},{"location":"openai-chat/basics/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat --javascript\nai dev new list openai-chat-streaming --javascript\n</code></pre>"},{"location":"openai-chat/basics/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"StreamingNon-streaming <p>Generate a JavaScript sample that uses streaming completions.</p> <pre><code>ai dev new openai-chat-streaming --javascript\ncd openai-chat-streaming-js\n</code></pre> See the code; learn how it works... <p> Main.js  OpenAIChatCompletionsStreamingClass.js </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>node Main.js\n</code></pre> <p>Generate a JavaScript sample that uses non-streaming completions.</p> <pre><code>ai dev new openai-chat --javascript\ncd openai-chat-js\n</code></pre> See the code; learn how it works... <p> Main.js  OpenAIChatCompletionsClass.js </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>node Main.js\n</code></pre>"},{"location":"openai-chat/basics/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat --python\nai dev new list openai-chat-streaming --python\n</code></pre>"},{"location":"openai-chat/basics/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"StreamingNon-streaming <p>Generate a Python sample that uses streaming completions.</p> <pre><code>ai dev new openai-chat-streaming --python\ncd openai-chat-streaming-py\n</code></pre> See the code; learn how it works... <p> main.py  openai_chat_completions_streaming.py </p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> <p>Generate a Python sample that uses non-streaming completions.</p> <pre><code>ai dev new openai-chat --python\ncd openai-chat-py\n</code></pre> See the code; learn how it works... <p> main.py  openai_chat_completions.py </p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython openai_chat_completions.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 openai_chat_completions.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 openai_chat_completions.py\n</code></pre>"},{"location":"openai-chat/functions/","title":"OpenAI Chat with Function Calling","text":"Why use OpenAI Function Calling? <p>OpenAI Chat with Function Calling allows you to extend the capabilities of the Language Model (LLM) by adding custom functions that can be called from within the chat session. This enables you to perform a wide range of tasks, such as accessing the current date/time, performing mathematical calculations, reading/writing files, and more.</p> <p>By using custom functions, you can enhance the LLM's world knowledge and allow it to 'do stuff' that it wouldn't otherwise be able to do. This can be particularly useful when you need to interact with external systems or perform complex operations that are not natively supported by the LLM.</p> TutorialGenerate Code <p>The <code>ai chat</code> <code>--built-in-functions</code> option enables CLI-provided \"custom functions\".</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use OpenAI Chat with Function Calling.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#GoJavaJavaScriptPython"},{"location":"openai-chat/functions/#access-information","title":"Access information","text":"<p>Often, you need to access information that is not available to the OpenAI model. For example, you might want to know the current date and time, perform mathematical calculations, or read/write files. With custom functions provided by the CLI, you can easily access this information.</p> Date and time<pre><code>ai chat --question \"What time is it?\" --built-in-functions\n</code></pre> Math<pre><code>ai chat --question \"What is 3.5 to the power of 9?\" --built-in-functions\n</code></pre> File input<pre><code>ai chat --question \"What is in the README.md file?\" --built-in-functions\n</code></pre>"},{"location":"openai-chat/functions/#perform-actions","title":"Perform actions","text":"File output<pre><code>ai chat --user \"Save the pledge of allegiance to 'pledge.txt'\" --built-in-functions\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"openai-chat/functions/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-functions --csharp\n</code></pre>"},{"location":"openai-chat/functions/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new openai-chat-streaming-with-functions --csharp\ncd openai-chat-streaming-with-functions-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIChatCompletionsCustomFunctions.cs  OpenAIChatCompletionsFunctionsStreamingClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"openai-chat/functions/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-functions --go\n</code></pre>"},{"location":"openai-chat/functions/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new openai-chat-streaming-with-functions --go\ncd openai-chat-streaming-with-functions-go\n</code></pre> See the code; learn how it works... <p> main.go  function_call_context.go  function_factory.go  openai_chat_completions_custom_functions.go  openai_chat_completions_functions_streaming_hello_world.go </p> <p> Deep dive on how it works</p> Install dependencies<pre><code>go mod tidy\n</code></pre> Run the sample<pre><code>ai dev shell\ngo run main.go\n</code></pre>"},{"location":"openai-chat/functions/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-functions --java\n</code></pre>"},{"location":"openai-chat/functions/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>THE CLI does NOT currently generate Java samples for OpenAI Chat with Function Calling.</p> <p>The OpenAI Java SDK does support OpenAI Function Calling</p>"},{"location":"openai-chat/functions/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-functions --javascript\n</code></pre>"},{"location":"openai-chat/functions/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new openai-chat-streaming-with-functions --javascript\ncd openai-chat-streaming-with-functions-js\n</code></pre> See the code; learn how it works... <p> Main.js  OpenAIChatCompletionsCustomFunctions.js  OpenAIChatCompletionsFunctionsStreamingClass.js </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>npm install\n</code></pre> Run the sample<pre><code>ai dev shell\nnode Main.js\n</code></pre>"},{"location":"openai-chat/functions/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list openai-chat-streaming-with-functions --python\n</code></pre>"},{"location":"openai-chat/functions/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new openai-chat-streaming-with-functions --python\ncd openai-chat-streaming-with-functions-py\n</code></pre> See the code; learn how it works... <p> main.py  openai_chat_completions_custom_functions.py  openai_chat_completions_functions_streaming.py </p> <p> Deep dive on how it works </p> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-cs/sample-overview/","title":"OpenAI Chat with Functions Streaming in C#","text":"<p>This sample demonstrates how to use the OpenAI Chat API with function calling in a C# console application.</p> <p> Program.cs  OpenAIChatCompletionsFunctionsStreamingClass.cs  OpenAIChatCompletionsCustomFunctions.cs </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming-with-functions --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming-with-functions' in 'openai-chat-streaming-with-functions-cs' (4 files)...\n\nOpenAIChatCompletionsFunctionsStreaming.csproj\nOpenAIChatCompletionsFunctionsStreamingClass.cs\nOpenAIChatCompletionsCustomFunctions.cs\nProgram.cs\n\nGenerating 'openai-chat-streaming-with-functions' in 'openai-chat-streaming-with-functions-cs' (4 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-cs/sample-overview/#openaichatcompletionscustomfunctionscs","title":"OpenAIChatCompletionsCustomFunctions.cs","text":"<p>STEP 1: Define helper functions that can be called by the assistant.</p> OpenAIChatCompletionsCustomFunctions.cs<pre><code>[HelperFunctionDescription(\"Gets the current weather for a location.\")]\npublic static string GetCurrentWeather(string location)\n{\n    return $\"The weather in {location} is 72 degrees and sunny.\";\n}\n\n[HelperFunctionDescription(\"Gets the current date.\")]\npublic static string GetCurrentDate()\n{\n    var date = DateTime.Now;\n    return $\"{date.Year}-{date.Month}-{date.Day}\";\n}\n\n[HelperFunctionDescription(\"Gets the current time.\")]\npublic static string GetCurrentTime()\n{\n    var date = DateTime.Now;\n    return $\"{date.Hour}:{date.Minute}:{date.Second}\";\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your OpenAI API key here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your OpenAI endpoint here&gt;\";\nvar openAIChatDeploymentName = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") ?? \"&lt;insert your OpenAI chat deployment name here&gt;\";\nvar openAISystemPrompt = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n</code></pre> <p>STEP 2: Create a function factory, add functions from the <code>OpenAIChatCompletionsCustomFunctions</code> class.</p> Program.cs<pre><code>var factory = new FunctionFactory();\nfactory.AddFunctions(typeof(OpenAIChatCompletionsCustomFunctions));\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings and the function factory.</p> Program.cs<pre><code>var chat = new OpenAIChatCompletionsFunctionsStreamingClass(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt, factory);\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    var response = await chat.GetChatCompletionsStreamingAsync(userPrompt, update =&gt; {\n        var text = string.Join(\"\", update.ContentUpdate\n            .Where(x =&gt; x.Kind == ChatMessageContentPartKind.Text)\n            .Select(x =&gt; x.Text)\n            .ToList());\n        Console.Write(text);\n    });\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-cs/sample-overview/#openaichatcompletionsfunctionsstreamingclasscs","title":"OpenAIChatCompletionsFunctionsStreamingClass.cs","text":"<p>STEP 1: Create the client, initialize chat message history with a system message, and add available factory functions.</p> OpenAIChatCompletionsFunctionsStreamingClass.cs<pre><code>public OpenAIChatCompletionsFunctionsStreamingClass(string openAIEndpoint, string openAIAPIKey, string openAIChatDeploymentName, string openAISystemPrompt, FunctionFactory factory)\n{\n    _openAISystemPrompt = openAISystemPrompt;\n    _functionFactory = factory;\n\n    _client = string.IsNullOrEmpty(openAIAPIKey)\n        ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n        : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n\n    _chatClient = _client.GetChatClient(openAIChatDeploymentName);\n    _messages = new List&lt;ChatMessage&gt;();\n\n    _options = new ChatCompletionOptions();\n    foreach (var tool in _functionFactory.GetChatTools())\n    {\n        _options.Tools.Add(tool);\n    }\n\n    _functionCallContext = new FunctionCallContext(_functionFactory, _messages);\n    ClearConversation();\n}\n\npublic void ClearConversation()\n{\n    _messages.Clear();\n    _messages.Add(ChatMessage.CreateSystemMessage(_openAISystemPrompt));\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsFunctionsStreamingClass.cs<pre><code>public async Task&lt;string&gt; GetChatCompletionsStreamingAsync(string userPrompt, Action&lt;StreamingChatCompletionUpdate&gt;? callback = null)\n{\n    _messages.Add(ChatMessage.CreateUserMessage(userPrompt));\n</code></pre> <p>STEP 3: Send the chat message history to the streaming API, processing each update, including checking for function calls.</p> OpenAIChatCompletionsFunctionsStreamingClass.cs<pre><code>    var responseContent = string.Empty;\n    while (true)\n    {\n        var response = _chatClient.CompleteChatStreamingAsync(_messages, _options);\n        await foreach (var update in response)\n        {\n            _functionCallContext.CheckForUpdate(update);\n\n            var content = string.Join(\"\", update.ContentUpdate\n                .Where(x =&gt; x.Kind == ChatMessageContentPartKind.Text)\n                .Select(x =&gt; x.Text)\n                .ToList());\n            if (update.FinishReason == ChatFinishReason.ContentFilter)\n            {\n                content = $\"{content}\\nWARNING: Content filtered!\";\n            }\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> OpenAIChatCompletionsFunctionsStreamingClass.cs<pre><code>            if (string.IsNullOrEmpty(content)) continue;\n\n            responseContent += content;\n            if (callback != null) callback(update);\n        }\n</code></pre> <p>STEP 5: Check if the response contained function calls, if so, process the function calls and continue processing the response.</p> OpenAIChatCompletionsFunctionsStreamingClass.cs<pre><code>        if (_functionCallContext.TryCallFunctions(responseContent))\n        {\n            _functionCallContext.Clear();\n            continue;\n        }\n</code></pre> <p>STEP 6: Finally, add the assistant's response to the chat message history, and return the response.</p> OpenAIChatCompletionsFunctionsStreamingClass.cs<pre><code>        _messages.Add(ChatMessage.CreateAssistantMessage(responseContent));\n        return responseContent;\n    }\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-go/sample-overview/","title":"OpenAI Chat Streaming with Functions in Go","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API with streaming and function calling in a Go console application.</p> <p> main.go  function_call_context.go  function_factory.go  openai_chat_completions_custom_functions.go  openai_chat_completions_functions_streaming_hello_world.go </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming-with-functions --go\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming-with-functions' in 'openai-chat-streaming-with-functions-go' (6 files)...\n\nfunction_call_context.go\nfunction_factory.go\ngo.mod\nmain.go\nopenai_chat_completions_custom_functions.go\nopenai_chat_completions_functions_streaming_hello_world.go\n\nGenerating 'openai-chat-streaming-with-functions' in 'openai-chat-streaming-with-functions-go' (6 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-go/sample-overview/#maingo","title":"main.go","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.go<pre><code>openAIAPIKey := os.Getenv(\"AZURE_OPENAI_API_KEY\")\nif openAIAPIKey == \"\" {\n    openAIAPIKey = \"&lt;insert your OpenAI API key here&gt;\"\n}\nopenAIEndpoint := os.Getenv(\"AZURE_OPENAI_ENDPOINT\")\nif openAIEndpoint == \"\" {\n    openAIEndpoint = \"&lt;insert your OpenAI endpoint here&gt;\"\n}\nopenAIChatDeploymentName := os.Getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\")\nif openAIChatDeploymentName == \"\" {\n    openAIChatDeploymentName = \"&lt;insert your OpenAI deployment name here&gt;\"\n}\nopenAISystemPrompt := os.Getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\")\nif openAISystemPrompt == \"\" {\n    openAISystemPrompt = \"You are a helpful AI assistant.\"\n}\n\nif openAIEndpoint == \"\" || openAIAPIKey == \"\" || openAIChatDeploymentName == \"\" || openAISystemPrompt == \"\" {\n    fmt.Println(\"Please set the environment variables.\")\n    os.Exit(1)\n}\n\nfactory := NewFunctionFactoryWithCustomFunctions()\nchat, err := NewOpenAIChatCompletionsFunctionsStreamingExample(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt, factory)\nif err != nil {\n    log.Fatalf(\"ERROR: %s\", err)\n}\n\nfor {\n    fmt.Print(\"User: \")\n    input, _ := getUserInput()\n    if input == \"exit\" || input == \"\" {\n        break\n    }\n\n    fmt.Printf(\"\\nAssistant: \")\n    _, err := chat.GetChatCompletionsStream(input, func(content string) {\n        fmt.Printf(\"%s\", content)\n    })\n    if err != nil {\n        log.Fatalf(\"ERROR: %s\", err)\n    }\n    fmt.Printf(\"\\n\\n\")\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-go/sample-overview/#function_factorygo","title":"function_factory.go","text":"<p>STEP 1: Create the <code>FunctionFactory</code> struct and methods to add functions, get function schemas, and try calling functions.</p> function_factory.go<pre><code>type FunctionInfo struct {\n    Schema   azopenai.FunctionDefinition\n    Function func(string) string\n}\n\ntype FunctionFactory struct {\n    functions map[string]FunctionInfo\n}\n\nfunc NewFunctionFactory() *FunctionFactory {\n    return &amp;FunctionFactory{\n        functions: make(map[string]FunctionInfo),\n    }\n}\n\nfunc (ff *FunctionFactory) AddFunction(schema azopenai.FunctionDefinition, fun func(string) string) {\n    ff.functions[*schema.Name] = FunctionInfo{Schema: schema, Function: fun}\n}\n\nfunc (ff *FunctionFactory) GetFunctionSchemas() []azopenai.FunctionDefinition {\n    schemas := []azopenai.FunctionDefinition{}\n    for _, functionInfo := range ff.functions {\n        schemas = append(schemas, functionInfo.Schema)\n    }\n    return schemas\n}\n\nfunc (ff *FunctionFactory) TryCallFunction(functionName string, functionArguments string) string {\n    functionInfo, exists := ff.functions[functionName]\n    if (!exists) {\n        return \"\"\n    }\n\n    return functionInfo.Function(functionArguments)\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-go/sample-overview/#openai_chat_completions_custom_functionsgo","title":"openai_chat_completions_custom_functions.go","text":"<p>STEP 1: Define custom functions and their schemas.</p> openai_chat_completions_custom_functions.go<pre><code>func GetCurrentWeather(functionArguments string) string {\n    var args map[string]string\n    json.Unmarshal([]byte(functionArguments), &amp;args)\n    location, _ := args[\"location\"]\n    return fmt.Sprintf(\"The weather in %s is 72 degrees and sunny.\", location)\n}\n\nvar GetCurrentWeatherSchema = azopenai.FunctionDefinition{\n    Name:        to.Ptr(\"get_current_weather\"),\n    Description: to.Ptr(\"Get the current weather in a given location\"),\n    Parameters: map[string]any{\n        \"type\": \"object\",\n        \"properties\": map[string]any{\n            \"location\": map[string]any{\n                \"type\":        \"string\",\n                \"description\": \"The city and state, e.g. San Francisco, CA\",\n            },\n        },\n        \"required\": []string{\"location\"},\n    },\n}\n\nfunc GetCurrentDate(_ string) string {\n    return time.Now().Format(\"2006-01-02\")\n}\n\nvar GetCurrentDateSchema = azopenai.FunctionDefinition{\n    Name:        to.Ptr(\"get_current_date\"),\n    Description: to.Ptr(\"Get the current date\"),\n    Parameters: map[string]any{\n        \"type\":       \"object\",\n        \"properties\": map[string]any{},\n    },\n}\n\nfunc GetCurrentTime(_ string) string {\n    return time.Now().Format(\"15:04:05\")\n}\n\nvar GetCurrentTimeSchema = azopenai.FunctionDefinition{\n    Name:        to.Ptr(\"get_current_time\"),\n    Description: to.Ptr(\"Get the current time\"),\n    Parameters: map[string]any{\n        \"type\":       \"object\",\n        \"properties\": map[string]any{},\n    },\n}\n\nfunc NewFunctionFactoryWithCustomFunctions() *FunctionFactory {\n    factory := NewFunctionFactory()\n    factory.AddFunction(GetCurrentWeatherSchema, GetCurrentWeather)\n    factory.AddFunction(GetCurrentDateSchema, GetCurrentDate)\n    factory.AddFunction(GetCurrentTimeSchema, GetCurrentTime)\n    return factory\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-go/sample-overview/#function_call_contextgo","title":"function_call_context.go","text":"<p>STEP 1: Create the <code>FunctionCallContext</code> struct and initialize it with the function factory and chat completion options.</p> function_call_context.go<pre><code>type FunctionCallContext struct {\n    functionFactory   *FunctionFactory\n    options           *azopenai.ChatCompletionsOptions\n    functionName      string\n    functionArguments string\n}\n\nfunc NewFunctionCallContext(functionFactory *FunctionFactory, options *azopenai.ChatCompletionsOptions) *FunctionCallContext {\n    return &amp;FunctionCallContext{\n        functionFactory:   functionFactory,\n        options:           options,\n        functionName:      \"\",\n        functionArguments: \"\",\n    }\n}\n</code></pre> <p>STEP 2: Define methods to check for function call updates, attempt to call a function, and clear the context.</p> function_call_context.go<pre><code>func (fcc *FunctionCallContext) CheckForUpdate(choice azopenai.ChatChoice) bool {\n    updated := false\n\n    if choice.Delta != nil &amp;&amp; choice.Delta.FunctionCall != nil {\n        name := choice.Delta.FunctionCall.Name\n        if name != nil &amp;&amp; *name != \"\" {\n            fcc.functionName = *name\n            updated = true\n        }\n    }\n\n    if choice.Delta != nil &amp;&amp; choice.Delta.FunctionCall != nil {\n        args := choice.Delta.FunctionCall.Arguments\n        if args != nil &amp;&amp; *args != \"\" {\n            fcc.functionArguments = *args\n            updated = true\n        }\n    }\n\n    return updated\n}\n\nfunc (fcc *FunctionCallContext) TryCallFunction() string {\n    result := fcc.functionFactory.TryCallFunction(fcc.functionName, fcc.functionArguments)\n    if result == \"\" {\n        return \"\"\n    }\n\n    fmt.Printf(\"\\rassistant-function: %s(%s) =&gt; %s\\n\", fcc.functionName, fcc.functionArguments, result)\n    fmt.Printf(\"\\nAssistant: \")\n\n    fcc.options.Messages = append(fcc.options.Messages, azopenai.ChatMessage{Role: to.Ptr(azopenai.ChatRoleAssistant), Content: to.Ptr(\"\"), FunctionCall: &amp;azopenai.ChatMessageFunctionCall{Name: to.Ptr(fcc.functionName), Arguments: to.Ptr(fcc.functionArguments)}})\n    fcc.options.Messages = append(fcc.options.Messages, azopenai.ChatMessage{Role: to.Ptr(azopenai.ChatRoleFunction), Content: to.Ptr(result), Name: to.Ptr(fcc.functionName)})\n\n    return result\n}\n\nfunc (fcc *FunctionCallContext) Clear() {\n    fcc.functionName = \"\"\n    fcc.functionArguments = \"\"\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-go/sample-overview/#openai_chat_completions_functions_streaming_hello_worldgo","title":"openai_chat_completions_functions_streaming_hello_world.go","text":"<p>STEP 1: Create a struct to manage the chat completions with function calling.</p> openai_chat_completions_functions_streaming_hello_world.go<pre><code>type OpenAIChatCompletionsFunctionsStreamingExample struct {\n    client              *azopenai.Client\n    options             *azopenai.ChatCompletionsOptions\n    functionFactory     *FunctionFactory\n    functionCallContext *FunctionCallContext\n}\n\nfunc NewOpenAIChatCompletionsFunctionsStreamingExample(openAIEndpoint string, openAIAPIKey string, openAIChatDeploymentName string, openAISystemPrompt string, functionFactory *FunctionFactory) (*OpenAIChatCompletionsFunctionsStreamingExample, error) {\n    keyCredential, err := azopenai.NewKeyCredential(openAIAPIKey)\n    if err != nil {\n        return nil, err\n    }\n    client, err := azopenai.NewClientWithKeyCredential(openAIEndpoint, keyCredential, nil)\n    if err != nil {\n        return nil, err\n    }\n\n    messages := []azopenai.ChatMessage{\n        {Role: to.Ptr(azopenai.ChatRoleSystem), Content: to.Ptr(openAISystemPrompt)},\n    }\n\n    options := &amp;azopenai.ChatCompletionsOptions{\n        Deployment: openAIChatDeploymentName,\n        Messages: messages,\n        FunctionCall: &amp;azopenai.ChatCompletionsOptionsFunctionCall{\n            Value: to.Ptr(\"auto\"),\n        },\n        Functions: functionFactory.GetFunctionSchemas(),\n    }\n\n    return &amp;OpenAIChatCompletionsFunctionsStreamingExample{\n        client: client,\n        options: options,\n        functionCallContext: NewFunctionCallContext(functionFactory, options),\n    }, nil\n}\n</code></pre> <p>STEP 2: Define methods to clear the conversation and get chat completions with function calling.</p> openai_chat_completions_functions_streaming_hello_world.go<pre><code>func (chat *OpenAIChatCompletionsFunctionsStreamingExample) ClearConversation() {\n    chat.options.Messages = chat.options.Messages[:1]\n}\n\nfunc (chat *OpenAIChatCompletionsFunctionsStreamingExample) GetChatCompletionsStream(userPrompt string, callback func(content string)) (string, error) {\n    chat.options.Messages = append(chat.options.Messages, azopenai.ChatMessage{Role: to.Ptr(azopenai.ChatRoleUser), Content: to.Ptr(userPrompt)})\n\n    responseContent := \"\"\n    for {\n        resp, err := chat.client.GetChatCompletionsStream(context.TODO(), *chat.options, nil)\n        if err != nil {\n            return \"\", err\n        }\n        defer resp.ChatCompletionsStream.Close()\n\n        for {\n            chatCompletions, err := resp.ChatCompletionsStream.Read()\n            if errors.Is(err, io.EOF) {\n                break\n            }\n            if err != nil {\n                return \"\", err\n            }\n\n            for _, choice := range chatCompletions.Choices {\n\n                chat.functionCallContext.CheckForUpdate(choice)\n\n                content := \"\"\n                if choice.Delta.Content != nil {\n                    content = *choice.Delta.Content\n                }\n\n                if choice.FinishReason != nil {\n                    finishReason := *choice.FinishReason\n                    if finishReason == azopenai.CompletionsFinishReasonLength {\n                        content = content + \"\\nWARNING: Exceeded token limit!\"\n                    }\n                }\n\n                if content == \"\" {\n                    continue\n                }\n\n                callback(content)\n                responseContent += content\n            }\n        }\n\n        if chat.functionCallContext.TryCallFunction() != \"\" {\n            chat.functionCallContext.Clear()\n            continue\n        }\n\n        chat.options.Messages = append(chat.options.Messages, azopenai.ChatMessage{Role: to.Ptr(azopenai.ChatRoleAssistant), Content: to.Ptr(responseContent)})\n        return responseContent, nil\n    }\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-js/sample-overview/","title":"OpenAI Chat with Function Calling in JavaScript","text":"<p>This sample demonstrates how to use the OpenAI Chat API with function calling in a JavaScript application.</p> <p> Main.js  OpenAIChatCompletionsCustomFunctions.js  OpenAIChatCompletionsFunctionsStreamingClass.js </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming-with-functions --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming-with-functions' in 'openai-chat-streaming-with-functions-js' (7 files)...\n\nFunctionCallContext.js\nFunctionFactory.js\nMain.js\nOpenAIChatCompletionsCustomFunctions.js\nOpenAIChatCompletionsFunctionsStreamingClass.js\npackage.json\nReadLineWrapper.js\n\nGenerating 'openai-chat-streaming-with-functions' in 'openai-chat-streaming-with-functions-js' (7 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-js/sample-overview/#openaichatcompletionscustomfunctionsjs","title":"OpenAIChatCompletionsCustomFunctions.js","text":"<p>STEP 1: Define custom functions and their schemas:</p> OpenAIChatCompletionsCustomFunctions.js<pre><code>function getCurrentWeather(function_arguments) {\n    const location = JSON.parse(function_arguments).location;\n    return `The weather in ${location} is 72 degrees and sunny.`;\n  };\n\nconst getCurrentWeatherSchema = {\n  name: \"get_current_weather\",\n  description: \"Get the current weather in a given location\",\n  parameters: {\n    type: \"object\",\n    properties: {\n      location: {\n        type: \"string\",\n        description: \"The city and state, e.g. San Francisco, CA\",\n      },\n      unit: {\n        type: \"string\",\n        enum: [\"celsius\", \"fahrenheit\"],\n      },\n    },\n    required: [\"location\"],\n  },\n};\n\nfactory.addFunction(getCurrentWeatherSchema, getCurrentWeather);\n\nfunction getCurrentDate() {\n  const date = new Date();\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n}\n\nconst getCurrentDateSchema = {\n  name: \"get_current_date\",\n  description: \"Get the current date\",\n  parameters: {\n    type: \"object\",\n    properties: {},\n  },\n};\n\nfactory.addFunction(getCurrentDateSchema, getCurrentDate);\n\nfunction getCurrentTime() {\n  const date = new Date();\n  return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n}\n\nconst getCurrentTimeSchema = {\n  name: \"get_current_time\",\n  description: \"Get the current time\",\n  parameters: {\n    type: \"object\",\n    properties: {},\n  },\n};\n\nfactory.addFunction(getCurrentTimeSchema, getCurrentTime);\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-js/sample-overview/#mainjs","title":"Main.js","text":"<p>STEP 1: Read the configuration settings from environment variables:</p> Main.js<pre><code>const AZURE_OPENAI_SYSTEM_PROMPT = process.env.AZURE_OPENAI_SYSTEM_PROMPT ?? \"You are a helpful AI assistant.\";\nconst AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION ?? \"&lt;insert your Azure OpenAI API version here&gt;\";\nconst AZURE_OPENAI_CHAT_DEPLOYMENT = process.env.AZURE_OPENAI_CHAT_DEPLOYMENT ?? \"&lt;insert your Azure OpenAI chat deployment name here&gt;\";\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nconst AZURE_OPENAI_BASE_URL = `${AZURE_OPENAI_ENDPOINT.replace(/\\/+$//, '')}/openai/deployments/${AZURE_OPENAI_CHAT_DEPLOYMENT}`;\n</code></pre> <p>STEP 2: Initialize the client and helper class with the configuration settings and the function factory:</p> Main.js<pre><code>const openai = new OpenAI({\n    apiKey: AZURE_OPENAI_API_KEY,\n    baseURL: AZURE_OPENAI_BASE_URL,\n    defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n    defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n  });\n\nconst chat = new OpenAIChatCompletionsFunctionsStreamingClass(AZURE_OPENAI_CHAT_DEPLOYMENT, AZURE_OPENAI_SYSTEM_PROMPT, factory, openai, 20);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received:</p> Main.js<pre><code>while (true) {\n    const input = await readline.question('User: ');\n    if (input === 'exit' || input === '') break;\n\n    process.stdout.write('\\nAssistant: ');\n    await chat.getResponse(input, (content) =&gt; {\n      process.stdout.write(content);\n    });\n\n    process.stdout.write('\\n\\n');\n  }\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-js/sample-overview/#openaichatcompletionsfunctionsstreamingclassjs","title":"OpenAIChatCompletionsFunctionsStreamingClass.js","text":"<p>STEP 1: Initialize the chat message history with a system message:</p> OpenAIChatCompletionsFunctionsStreamingClass.js<pre><code>constructor(openAIModelOrDeploymentName, systemPrompt, functionFactory, openai, simulateTypingDelay = 0) {\n    this.simulateTypingDelay = simulateTypingDelay;\n    this.systemPrompt = systemPrompt;\n    this.openAIModelOrDeploymentName = openAIModelOrDeploymentName;\n    this.openai = openai;\n    this.functionFactory = functionFactory;\n\n    this.clearConversation();\n}\n\nclearConversation() {\n    this.messages = [\n      { role: 'system', content: this.systemPrompt }\n    ];\n    this.functionCallContext = new FunctionCallContext(this.functionFactory, this.messages);\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history:</p> OpenAIChatCompletionsFunctionsStreamingClass.js<pre><code>async getResponse(userInput, callback) {\n  this.messages.push({ role: 'user', content: userInput });\n</code></pre> <p>STEP 3: Send the chat message history to the streaming API, processing each update, including checking for function calls:</p> OpenAIChatCompletionsFunctionsStreamingClass.js<pre><code>  let response = '';\n  while (true) {\n    const events = await this.openai.chat.completions.create({\n      model: this.openAIModelOrDeploymentName,\n      messages: this.messages,\n      functions: this.functionFactory.getFunctionSchemas(),\n      stream: true\n    });\n\n    for await (const event of events) {\n      for (const choice of event.choices) {\n        this.functionCallContext.checkForUpdate(choice);\n        let content = choice.delta?.content;\n        if (choice.finish_reason === 'length') {\n          content = `${content}\\nERROR: Exceeded token limit!`;\n        }\n</code></pre> <p>STEP 4: For each non-empty update, invoke the callback for the update, and accumulate the response</p> OpenAIChatCompletionsFunctionsStreamingClass.js<pre><code>        if (content != null) {\n          if(callback != null) {\n            callback(content);\n            if (this.simulateTypingDelay &gt; 0) {\n              await new Promise(r =&gt; setTimeout(r, this.simulateTypingDelay));\n            }\n          }\n          response += content;\n        }\n      }\n    }\n</code></pre> <p>STEP 5: Check if the response contained function calls, and process them:</p> OpenAIChatCompletionsFunctionsStreamingClass.js<pre><code>    if (this.functionCallContext.tryCallFunction() !== undefined) {\n      this.functionCallContext.clear();\n      continue;\n    }\n</code></pre> <p>STEP 6: Finally, add the assistant's response to the chat message history, and return the response:</p> OpenAIChatCompletionsFunctionsStreamingClass.js<pre><code>    this.messages.push({ role: 'assistant', content: response });\n    return response;\n  }\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-py/sample-overview/","title":"OpenAI Chat with Function Calling in Python","text":"<p>This sample demonstrates how to use the OpenAI Chat API with function calling in a Python console application.</p> <p> main.py  openai_chat_completions_custom_functions.py  openai_chat_completions_functions_streaming.py </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming-with-functions --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming-with-functions' in 'openai-chat-streaming-with-functions-py' (5 files)...\n\nfunction_factory.py\nopenai_chat_completions_custom_functions.py\nopenai_chat_completions_functions_streaming.py\nmain.py\nrequirements.txt\n\nGenerating 'openai-chat-streaming-with-functions' in 'openai-chat-streaming-with-functions-py' (5 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-py/sample-overview/#openai_chat_completions_custom_functionspy","title":"openai_chat_completions_custom_functions.py","text":"<p>STEP 1: Import the FunctionFactory class and create an instance.</p> openai_chat_completions_custom_functions.py<pre><code>from function_factory import FunctionFactory\nfactory = FunctionFactory()\n</code></pre> <p>STEP 2: Define and add the get_current_date, get_current_time, and get_current_weather functions to the factory.</p> openai_chat_completions_custom_functions.py<pre><code>@ignore_args_decorator\ndef get_current_date():\n    from datetime import date\n    today = date.today()\n    return f'{today.year}-{today.month}-{today.day}'\n\nget_current_date_schema = {\n    'name': 'get_current_date',\n    'description': 'Get the current date',\n    'parameters': {\n        'type': 'object',\n        'properties': {},\n    },\n}\n\nfactory.add_function(get_current_date_schema, get_current_date)\n\n@ignore_args_decorator\ndef get_current_time():\n    from datetime import datetime\n    now = datetime.now()\n    return f'{now.hour}:{now.minute}'\n\nget_current_time_schema = {\n    'name': 'get_current_time',\n    'description': 'Get the current time',\n    'parameters': {\n        'type': 'object',\n        'properties': {},\n    },\n}\n\nfactory.add_function(get_current_time_schema, get_current_time)\n\ndef get_current_weather(function_arguments):\n    location = function_arguments.get('location')\n    return f'The weather in {location} is 72 degrees and sunny.'\n\nget_current_weather_schema = {\n    'name': 'get_current_weather',\n    'description': 'Get the current weather in a given location',\n    'parameters': {\n        'type': 'object',\n        'properties': {\n            'location': {\n                'type': 'string',\n                'description': 'The city and state, e.g. San Francisco, CA',\n            },\n            'unit': {\n                'type': 'string',\n                'enum': ['celsius', 'fahrenheit'],\n            },\n        },\n        'required': ['location'],\n    },\n}\n\nfactory.add_function(get_current_weather_schema, get_current_weather)\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.py<pre><code>openai_api_key = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your OpenAI API key here&gt;')\nopenai_api_version = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your Azure OpenAI API version here&gt;')\nopenai_endpoint = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your OpenAI endpoint here&gt;')\nopenai_chat_deployment_name = os.getenv('AZURE_OPENAI_CHAT_DEPLOYMENT', '&lt;insert your OpenAI chat deployment name here&gt;')\nopenai_system_prompt = os.getenv('AZURE_OPENAI_SYSTEM_PROMPT', 'You are a helpful AI assistant.')\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings and the function factory.</p> main.py<pre><code>chat = OpenAIChatCompletionsFunctionsStreaming(openai_api_version, openai_endpoint, openai_api_key, openai_chat_deployment_name, openai_system_prompt, factory)\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> main.py<pre><code>while True:\n    user_input = input('User: ')\n    if user_input == 'exit' or user_input == '':\n        break\n\n    print(\"\\nAssistant: \", end=\"\")\n    response = chat.get_chat_completions(user_input, lambda content: print(content, end=\"\"))\n    print(\"\\n\")\n</code></pre>"},{"location":"openai-chat/openai-chat-functions-py/sample-overview/#openai_chat_completions_functions_streamingpy","title":"openai_chat_completions_functions_streaming.py","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> openai_chat_completions_functions_streaming.py<pre><code>def __init__(self, openai_api_version, openai_endpoint, openai_key, openai_chat_deployment_name, openai_system_prompt, function_factory):\n    self.openai_system_prompt = openai_system_prompt\n    self.openai_chat_deployment_name = openai_chat_deployment_name\n    self.function_factory = function_factory\n    self.client = AzureOpenAI(\n        api_key=openai_key,\n        api_version=openai_api_version,\n        azure_endpoint = openai_endpoint\n        )\n    self.clear_conversation()\n\ndef clear_conversation(self):\n    self.messages = [\n        {'role': 'system', 'content': self.openai_system_prompt}\n    ]\n    self.function_call_context = FunctionCallContext(self.function_factory, self.messages)\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> openai_chat_completions_functions_streaming.py<pre><code>def get_chat_completions(self, user_input, callback):\n    self.messages.append({'role': 'user', 'content': user_input})\n</code></pre> <p>STEP 3: Send the chat message history and the function schemas to the streaming API and process each update, including checking for function calls.</p> openai_chat_completions_functions_streaming.py<pre><code>    complete_content = ''\n    functions = self.function_factory.get_function_schemas()\n\n    while True:\n        response = self.client.chat.completions.create(\n            model=self.openai_chat_deployment_name,\n            messages=self.messages,\n            stream=True,\n            functions=functions,\n            function_call='auto')\n\n        for chunk in response:\n\n            choice0 = chunk.choices[0] if hasattr(chunk, 'choices') and chunk.choices else None\n            self.function_call_context.check_for_update(choice0)\n\n            delta = choice0.delta if choice0 and hasattr(choice0, 'delta') else None\n            content = delta.content if delta and hasattr(delta, 'content') else ''\n\n            finish_reason = choice0.finish_reason if choice0 and hasattr(choice0, 'finish_reason') else None\n            if finish_reason == 'length':\n                content += f\"{content}\\nERROR: Exceeded max token length!\"\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> openai_chat_completions_functions_streaming.py<pre><code>            if content is None: continue\n\n            complete_content += content\n            callback(content)\n</code></pre> <p>STEP 5: Check if the response contained function calls, and process them.</p> openai_chat_completions_functions_streaming.py<pre><code>        if self.function_call_context.try_call_function() is not None:\n            self.function_call_context.clear()\n            continue\n</code></pre> <p>STEP 6: Finally, add the assistant's response to the chat message history and return the response.</p> openai_chat_completions_functions_streaming.py<pre><code>    self.messages.append({'role': 'assistant', 'content': complete_content})\n    return complete_content\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-cs/sample-overview/","title":"OpenAI Chat API in C#","text":"<p>This sample demonstrates how to use the OpenAI Chat API in a C# console application.</p> <p> Program.cs  OpenAIChatCompletionsClass.cs </p> How to generate this sample Command<pre><code>ai dev new openai-chat --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat' in 'openai-chat-cs' (3 files)...\n\nOpenAIChatCompletions.csproj\nOpenAIChatCompletionsClass.cs\nProgram.cs\n\nGenerating 'openai-chat' in 'openai-chat-cs' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your OpenAI API key here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your OpenAI endpoint here&gt;\";\nvar openAIChatDeploymentName = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") ?? \"&lt;insert your OpenAI chat deployment name here&gt;\";\nvar openAISystemPrompt = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> Program.cs<pre><code>var chat = new OpenAIChatCompletionsClass(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display the response.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    var response = chat.GetChatCompletion(userPrompt);\n    Console.WriteLine($\"\\nAssistant: {response}\\n\");\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-cs/sample-overview/#openaichatcompletionsclasscs","title":"OpenAIChatCompletionsClass.cs","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> OpenAIChatCompletionsClass.cs<pre><code>public OpenAIChatCompletionsClass(string openAIEndpoint, string openAIAPIKey, string openAIChatDeploymentName, string openAISystemPrompt)\n{\n    _openAISystemPrompt = openAISystemPrompt;\n\n    _client = string.IsNullOrEmpty(openAIAPIKey)\n        ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n        : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n    _chatClient = _client.GetChatClient(openAIChatDeploymentName);\n    _messages = new List&lt;ChatMessage&gt;();\n\n    ClearConversation();\n}\n\npublic void ClearConversation()\n{\n    _messages.Clear();\n    _messages.Add(ChatMessage.CreateSystemMessage(_openAISystemPrompt));\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsClass.cs<pre><code>public string GetChatCompletion(string userPrompt)\n{\n    _messages.Add(ChatMessage.CreateUserMessage(userPrompt));\n</code></pre> <p>STEP 3: Send the chat message history to the OpenAI Chat API and process the response.</p> OpenAIChatCompletionsClass.cs<pre><code>    var response = _chatClient.CompleteChat(_messages);\n    var responseText = string.Join(\"\", response.Value.Content\n        .Where(x =&gt; x.Kind == ChatMessageContentPartKind.Text)\n        .Select(x =&gt; x.Text)\n        .ToList());\n</code></pre> <p>STEP 4: Add the assistant's response to the chat message history and return the response.</p> OpenAIChatCompletionsClass.cs<pre><code>    _messages.Add(ChatMessage.CreateAssistantMessage(responseText));\n    return responseText;\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-go/sample-overview/","title":"OpenAI Chat in Go","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API in a Go console application.</p> <p> main.go  openai_chat_completions_hello_world.go </p> How to generate this sample Command<pre><code>ai dev new openai-chat --go\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat' in 'openai-chat-go' (3 files)...\n\ngo.mod\nmain.go\nopenai_chat_completions_hello_world.go\n\nGenerating 'openai-chat' in 'openai-chat-go' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-go/sample-overview/#maingo","title":"main.go","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.go<pre><code>openAIAPIKey := os.Getenv(\"AZURE_OPENAI_API_KEY\")\nif openAIAPIKey == \"\" {\n    openAIAPIKey = \"&lt;insert your OpenAI API key here&gt;\"\n}\nopenAIEndpoint := os.Getenv(\"AZURE_OPENAI_ENDPOINT\")\nif openAIEndpoint == \"\" {\n    openAIEndpoint = \"&lt;insert your OpenAI endpoint here&gt;\"\n}\nopenAIChatDeploymentName := os.Getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\")\nif openAIChatDeploymentName == \"\" {\n    openAIChatDeploymentName = \"&lt;insert your OpenAI chat deployment name here&gt;\"\n}\nopenAISystemPrompt := os.Getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\")\nif openAISystemPrompt == \"\" {\n    openAISystemPrompt = \"You are a helpful AI assistant.\"\n}\n</code></pre> <p>STEP 2: Validate the environment variables.</p> main.go<pre><code>if openAIEndpoint == \"\" || openAIAPIKey == \"\" || openAIChatDeploymentName == \"\" || openAISystemPrompt == \"\" {\n    fmt.Println(\"Please set the environment variables.\")\n    os.Exit(1)\n}\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings.</p> main.go<pre><code>chat, err := NewOpenAIChatCompletionsExample(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt)\nif err != nil {\n    log.Fatalf(\"ERROR: %s\", err)\n}\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> main.go<pre><code>for {\n    fmt.Print(\"User: \")\n    input, _ := getUserInput()\n    if input == \"exit\" || input == \"\" {\n        break\n    }\n\n    response, err := chat.GetChatCompletions(input)\n    if err != nil {\n        log.Fatalf(\"ERROR: %s\", err)\n    }\n\n    fmt.Printf(\"Assistant: %s\\n\\n\", response)\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-go/sample-overview/#openai_chat_completions_hello_worldgo","title":"openai_chat_completions_hello_world.go","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> openai_chat_completions_hello_world.go<pre><code>client, err := azopenai.NewClientWithKeyCredential(openAIEndpoint, keyCredential, nil)\nif err != nil {\n    return nil, err\n}\n\nmessages := []azopenai.ChatRequestMessageClassification{\n    &amp;azopenai.ChatRequestSystemMessage{\n        Content: &amp;openAISystemPrompt,\n    },\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> openai_chat_completions_hello_world.go<pre><code>func (chat *OpenAIChatCompletionsExample) GetChatCompletions(userPrompt string) (string, error) {\n    chat.options.Messages = append(chat.options.Messages, &amp;azopenai.ChatRequestUserMessage{Content: azopenai.NewChatRequestUserMessageContent(userPrompt)})\n</code></pre> <p>STEP 3: Send the chat message history to the OpenAI Chat API and process the response.</p> openai_chat_completions_hello_world.go<pre><code>resp, err := chat.client.GetChatCompletions(context.TODO(), *chat.options, nil)\nif err != nil {\n    return \"\", err\n}\n</code></pre> <p>STEP 4: Add the assistant's response to the chat message history and return the response.</p> openai_chat_completions_hello_world.go<pre><code>responseContent := *resp.Choices[0].Message.Content\nchat.options.Messages = append(chat.options.Messages, &amp;azopenai.ChatRequestAssistantMessage{Content: to.Ptr(responseContent)})\n\nreturn responseContent, nil\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-java/sample-overview/","title":"OpenAI Chat in Java","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API in a Java console application.</p> <p> Main.java  OpenAIChatCompletionsClass.java </p> How to generate this sample Command<pre><code>ai dev new openai-chat --java\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat' in 'openai-chat-java' (3 files)...\n\npom.xml\nsrc/Main.java\nsrc/OpenAIChatCompletionsClass.java\n\nGenerating 'openai-chat' in 'openai-chat-java' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-java/sample-overview/#mainjava","title":"Main.java","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Main.java<pre><code>String openAIAPIKey = (System.getenv(\"AZURE_OPENAI_API_KEY\") != null) ? System.getenv(\"AZURE_OPENAI_API_KEY\") : \"&lt;insert your OpenAI API key here&gt;\";\nString openAIEndpoint = (System.getenv(\"AZURE_OPENAI_ENDPOINT\") != null) ? System.getenv(\"AZURE_OPENAI_ENDPOINT\") : \"&lt;insert your OpenAI endpoint here&gt;\";\nString openAIChatDeployment = (System.getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") != null) ? System.getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") : \"&lt;insert your OpenAI chat deployment name here&gt;\";\nString openAISystemPrompt = (System.getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\") != null) ? System.getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\") : \"You are a helpful AI assistant.\";\n</code></pre> <p>STEP 2: Validate the environment variables.</p> Main.java<pre><code>if (openAIAPIKey.contains(\"&lt;insert\") || openAIEndpoint.contains(\"&lt;insert\") || openAIChatDeployment.contains(\"&lt;insert\")) {\n    System.err.println(\"Please set the environment variables properly.\");\n    System.exit(1);\n}\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings.</p> Main.java<pre><code>OpenAIChatCompletionsClass chat = new OpenAIChatCompletionsClass(openAIAPIKey, openAIEndpoint, openAIChatDeployment, openAISystemPrompt);\n</code></pre> <p>STEP 4: Create the OpenAI client.</p> Main.java<pre><code>OpenAIClient client = new OpenAIClientBuilder()\n    .endpoint(openAIEndpoint)\n    .credential(new AzureKeyCredential(openAIAPIKey))\n    .buildClient();\n</code></pre> <p>STEP 5: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Main.java<pre><code>Scanner scanner = new Scanner(System.in);\nwhile (true) {\n    System.out.print(\"User: \");\n    if (!scanner.hasNextLine()) break;\n\n    String userPrompt = scanner.nextLine();\n    if (userPrompt.isEmpty() || \"exit\".equals(userPrompt)) break;\n\n    String response = chat.getChatCompletion(userPrompt);\n    System.out.println(\"\\nAssistant: \" + response + \"\\n\");\n}\nscanner.close();\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-java/sample-overview/#openaichatcompletionsclassjava","title":"OpenAIChatCompletionsClass.java","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> OpenAIChatCompletionsClass.java<pre><code>public OpenAIChatCompletionsClass (String openAIAPIKey, String openAIEndpoint, String openAIChatDeployment, String openAISystemPrompt) {\n    this.openAIChatDeployment = openAIChatDeployment;\n    this.openAISystemPrompt = openAISystemPrompt;\n    client = new OpenAIClientBuilder()\n        .endpoint(openAIEndpoint)\n        .credential(new AzureKeyCredential(openAIAPIKey))\n        .buildClient();\n\n    List&lt;ChatRequestMessage&gt; chatMessages = new ArrayList&lt;&gt;();\n    options = new ChatCompletionsOptions(chatMessages);\n    ClearConversation();\n}\n</code></pre> <p>STEP 2: Clear previous conversation and set the initial system message.</p> OpenAIChatCompletionsClass.java<pre><code>public void ClearConversation(){\n    List&lt;ChatRequestMessage&gt; chatMessages = options.getMessages();\n    chatMessages.clear();\n    chatMessages.add(new ChatRequestSystemMessage(this.openAISystemPrompt));\n}\n</code></pre> <p>STEP 3: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsClass.java<pre><code>public String getChatCompletion(String userPrompt) {\n    options.getMessages().add(new ChatRequestUserMessage(userPrompt));\n</code></pre> <p>STEP 4: Send the chat message history to the OpenAI Chat API and process the response.</p> OpenAIChatCompletionsClass.java<pre><code>    ChatCompletions chatCompletions = client.getChatCompletions(this.openAIChatDeployment, options);\n    String responseContent = chatCompletions.getChoices().get(0).getMessage().getContent();\n}\n</code></pre> <p>STEP 5: Add the assistant's response to the chat message history and return the response.</p> OpenAIChatCompletionsClass.java<pre><code>    options.getMessages().add(new ChatRequestAssistantMessage(responseContent.toString()));\n\n    return responseContent;\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-js/sample-overview/","title":"OpenAI Chat in JavaScript","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API in a JavaScript console application.</p> <p> Main.js  OpenAIChatCompletionsClass.js </p> How to generate this sample Command<pre><code>ai dev new openai-chat --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat' in 'openai-chat-js' (3 files)...\n\nMain.js\nOpenAIChatCompletionsClass.js\nReadLineWrapper.js\n\nGenerating 'openai-chat' in 'openai-chat-js' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-js/sample-overview/#mainjs","title":"Main.js","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Main.js<pre><code>const AZURE_OPENAI_SYSTEM_PROMPT = process.env.AZURE_OPENAI_SYSTEM_PROMPT ?? \"You are a helpful AI assistant.\";\nconst AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION ?? \"&lt;insert your Azure OpenAI API version here&gt;\";\nconst AZURE_OPENAI_CHAT_DEPLOYMENT = process.env.AZURE_OPENAI_CHAT_DEPLOYMENT ?? \"&lt;insert your Azure OpenAI chat deployment name here&gt;\";\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nconst AZURE_OPENAI_BASE_URL = `${AZURE_OPENAI_ENDPOINT.replace(/\\/+$/, '')}/openai/deployments/${AZURE_OPENAI_CHAT_DEPLOYMENT}`;\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> Main.js<pre><code>const openai = new OpenAI({\n  apiKey: AZURE_OPENAI_API_KEY,\n  baseURL: AZURE_OPENAI_BASE_URL,\n  defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n  defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n});\n\nconst chat = new OpenAIChatCompletionsClass(AZURE_OPENAI_CHAT_DEPLOYMENT, AZURE_OPENAI_SYSTEM_PROMPT, openai);\n</code></pre> <p>STEP 3: Check if the required environment variables are set.</p> Main.js<pre><code>const azureOk = \n  AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_API_VERSION != null &amp;&amp; !AZURE_OPENAI_API_VERSION.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_CHAT_DEPLOYMENT != null &amp;&amp; !AZURE_OPENAI_CHAT_DEPLOYMENT.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.startsWith('&lt;insert');\n\nconst ok = azureOk &amp;&amp;\n  AZURE_OPENAI_SYSTEM_PROMPT != null &amp;&amp; !AZURE_OPENAI_SYSTEM_PROMPT.startsWith('&lt;insert');\n\nif (!ok) {\n  console.error(\n    'To use Azure OpenAI, set the following environment variables:\\n' +\n    '\\n  AZURE_OPENAI_SYSTEM_PROMPT' +\n    '\\n  AZURE_OPENAI_API_KEY' +\n    '\\n  AZURE_OPENAI_API_VERSION' +\n    '\\n  AZURE_OPENAI_CHAT_DEPLOYMENT' +\n    '\\n  AZURE_OPENAI_ENDPOINT'\n  );\n  console.error(\n    '\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell' +\n    '\\n  node main.js' +\n    '\\n' +\n    '\\n  or' +\n    '\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell --run \"node main.js\"'\n  );\n  process.exit(1);\n}\n</code></pre> <p>STEP 4: Create the OpenAI client.</p> Main.js<pre><code>const openai = new OpenAI({\n  apiKey: AZURE_OPENAI_API_KEY,\n  baseURL: AZURE_OPENAI_BASE_URL,\n  defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n  defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n});\n</code></pre> <p>STEP 5: Create the streaming chat completions helper.</p> Main.js<pre><code>const chat = new OpenAIChatCompletionsClass(AZURE_OPENAI_CHAT_DEPLOYMENT, AZURE_OPENAI_SYSTEM_PROMPT, openai);\n</code></pre> <p>STEP 6: Get user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Main.js<pre><code>while (true) {\n  const input = await readline.question('User: ');\n  if (input === 'exit' || input === '') break;\n\n  const response = await chat.getResponse(input);\n  process.stdout.write(`\\nAssistant: ${response}\\n\\n`);\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-js/sample-overview/#openaichatcompletionsclassjs","title":"OpenAIChatCompletionsClass.js","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> OpenAIChatCompletionsClass.js<pre><code>constructor(openAIModelOrDeploymentName, systemPrompt, openai) {\n  this.systemPrompt = systemPrompt;\n  this.openAIModelOrDeploymentName = openAIModelOrDeploymentName;\n  this.openai = openai;\n  this.clearConversation();\n}\n\nclearConversation() {\n  this.messages = [\n    { role: 'system', content: this.systemPrompt }\n  ];\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsClass.js<pre><code>async getResponse(userInput) {\n  this.messages.push({ role: 'user', content: userInput });\n</code></pre> <p>STEP 3: Send the chat message history to the OpenAI Chat API and process each update.</p> OpenAIChatCompletionsClass.js<pre><code>const completion = await this.openai.chat.completions.create({\n  model: this.openAIModelOrDeploymentName,\n  messages: this.messages,\n});\n\nconst choice = completion.choices[0];\nlet content = choice.message?.content;\nif (choice.finish_reason === 'length') {\n  content = `${content}\\nERROR: Exceeded token limit!`;\n}\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> OpenAIChatCompletionsClass.js<pre><code>this.messages.push({ role: 'assistant', content: content });\nreturn content;\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-py/sample-overview/","title":"OpenAI Chat in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API in a Python console application.</p> <p> main.py  openai_chat_completions.py </p> How to generate this sample Command<pre><code>ai dev new openai-chat --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat' in 'openai-chat-py' (3 files)...\n\nmain.py\nopenai_chat_completions.py\nrequirements.txt\n\nGenerating 'openai-chat' in 'openai-chat-py' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables:</p> main.py<pre><code>openai_api_key = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your OpenAI API key here&gt;')\nopenai_api_version = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your Azure OpenAI API version here&gt;')\nopenai_endpoint = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your OpenAI endpoint here&gt;')\nopenai_chat_deployment_name = os.getenv('AZURE_OPENAI_CHAT_DEPLOYMENT', '&lt;insert your OpenAI chat deployment name here&gt;')\nopenai_system_prompt = os.getenv('AZURE_OPENAI_SYSTEM_PROMPT', 'You are a helpful AI assistant.')\n</code></pre> <p>STEP 2: Initialize the AzureOpenAI client with the configuration settings:</p> main.py<pre><code>client = AzureOpenAI(\n  api_key=openai_api_key,\n  api_version=openai_api_version,\n  azure_endpoint = openai_endpoint\n)\nmessages=[\n    {'role': 'system', 'content': openai_system_prompt},\n]\n</code></pre> <p>STEP 3: Obtain user input, use the helper function to get the assistant's response, and display responses:</p> main.py<pre><code>def main():\n    while True:\n        user_input = input('User: ')\n        if user_input == 'exit' or user_input == '':\n            break\n\n        response_content = get_chat_completions(user_input)\n        print(f\"\\nAssistant: {response_content}\\n\")\n</code></pre>"},{"location":"openai-chat/openai-chat-non-streaming-py/sample-overview/#openai_chat_completionspy","title":"openai_chat_completions.py","text":"<p>STEP 1: Create the client and initialize chat message history with a system message:</p> openai_chat_completions.py<pre><code>client = AzureOpenAI(\n  api_key=openai_api_key,\n  api_version=openai_api_version,\n  azure_endpoint = openai_endpoint\n)\n\nmessages=[\n    {'role': 'system', 'content': openai_system_prompt},\n]\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history:</p> openai_chat_completions.py<pre><code>def get_chat_completions(user_input) -&gt; str:\n    messages.append({'role': 'user', 'content': user_input})\n\n    response = client.chat.completions.create(\n        model=openai_chat_deployment_name,\n        messages=messages,\n    )\n\n    response_content = response.choices[0].message.content\n    messages.append({'role': 'assistant', 'content': response_content})\n\n    return response_content\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-cs/sample-overview/","title":"OpenAI Chat Streaming in C#","text":"<p>This sample demonstrates how to use the OpenAI Chat API with streaming in a C# console application.</p> <p> Program.cs  OpenAIChatCompletionsStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming' in 'openai-chat-streaming-cs' (3 files)...\n\nOpenAIChatCompletionsStreaming.csproj\nOpenAIChatCompletionsStreamingClass.cs\nProgram.cs\n\nGenerating 'openai-chat-streaming' in 'openai-chat-streaming-cs' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your OpenAI API key here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your OpenAI endpoint here&gt;\";\nvar openAIChatDeploymentName = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") ?? \"&lt;insert your OpenAI chat deployment name here&gt;\";\nvar openAISystemPrompt = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> Program.cs<pre><code>var chat = new OpenAIChatCompletionsStreamingClass(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    var response = await chat.GetChatCompletionsStreamingAsync(userPrompt, update =&gt; {\n        var text = string.Join(\"\", update.ContentUpdate\n            .Where(x =&gt; x.Kind == ChatMessageContentPartKind.Text)\n            .Select(x =&gt; x.Text)\n            .ToList());\n        Console.Write(text);\n    });\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-cs/sample-overview/#openaichatcompletionsstreamingclasscs","title":"OpenAIChatCompletionsStreamingClass.cs","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> OpenAIChatCompletionsStreamingClass.cs<pre><code>public OpenAIChatCompletionsStreamingClass(string openAIEndpoint, string openAIAPIKey, string openAIChatDeploymentName, string openAISystemPrompt)\n{\n    _openAISystemPrompt = openAISystemPrompt;\n\n    _client = string.IsNullOrEmpty(openAIAPIKey)\n        ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n        : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n    _chatClient = _client.GetChatClient(openAIChatDeploymentName);\n    _messages = new List&lt;ChatMessage&gt;();\n\n    ClearConversation();\n}\n\npublic void ClearConversation()\n{\n    _messages.Clear();\n    _messages.Add(ChatMessage.CreateSystemMessage(_openAISystemPrompt));\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsStreamingClass.cs<pre><code>public async Task&lt;string&gt; GetChatCompletionsStreamingAsync(string userPrompt, Action&lt;StreamingChatCompletionUpdate&gt;? callback = null)\n{\n    _messages.Add(ChatMessage.CreateUserMessage(userPrompt));\n</code></pre> <p>STEP 3: Send the chat message history to the streaming OpenAI Chat API and process each update.</p> OpenAIChatCompletionsStreamingClass.cs<pre><code>    var responseContent = string.Empty;\n    var response = _chatClient.CompleteChatStreamingAsync(_messages);\n    await foreach (var update in response)\n    {\n        var content = string.Join(\"\", update.ContentUpdate\n            .Where(x =&gt; x.Kind == ChatMessageContentPartKind.Text)\n            .Select(x =&gt; x.Text)\n            .ToList());\n\n        if (update.FinishReason == ChatFinishReason.ContentFilter)\n        {\n            content = $\"{content}\\nWARNING: Content filtered!\";\n        }\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> OpenAIChatCompletionsStreamingClass.cs<pre><code>        if (string.IsNullOrEmpty(content)) continue;\n\n        responseContent += content;\n        if (callback != null) callback(update);\n    }\n</code></pre> <p>STEP 5: After processing all the updates, add the assistant's response to the chat message history and return the response.</p> OpenAIChatCompletionsStreamingClass.cs<pre><code>    _messages.Add(ChatMessage.CreateAssistantMessage(responseContent));\n    return responseContent;\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-go/sample-overview/","title":"Sample Overview: OpenAI Chat Streaming (Go)","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API with streaming in a Go application. The sample covers the following aspects:</p> <ul> <li>Getting connection information and secrets from environment variables</li> <li>Using a helper class to encapsulate the OpenAI API calls</li> <li>Getting input from the user</li> <li>Sending the input to the helper class</li> <li>Getting the response from the helper class</li> <li>Deeper dive into the helper class</li> </ul>"},{"location":"openai-chat/openai-chat-streaming-go/sample-overview/#files-in-this-sample","title":"Files in this sample","text":"<ul> <li><code>go.mod</code>: The module definition and dependencies for this Go application.</li> <li><code>main.go</code>: The main entry point of the application where user input is handled and the chat completions are streamed.</li> <li><code>openai_chat_completions_streaming_hello_world.go</code>: The helper class that interacts with the OpenAI Chat API.</li> </ul>"},{"location":"openai-chat/openai-chat-streaming-go/sample-overview/#gomod","title":"<code>go.mod</code>","text":"go.mod<pre><code>module openai_chat_completions_streaming_hello_world\nrequire (\n    github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai v0.4.1\n    github.com/Azure/azure-sdk-for-go/sdk/azcore v1.9.1\n)\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-go/sample-overview/#maingo","title":"<code>main.go</code>","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.go<pre><code>openAIAPIKey := os.Getenv(\"AZURE_OPENAI_API_KEY\")\nif openAIAPIKey == \"\" {\n    openAIAPIKey = \"&lt;insert your OpenAI API key here&gt;\"\n}\nopenAIEndpoint := os.Getenv(\"AZURE_OPENAI_ENDPOINT\")\nif openAIEndpoint == \"\" {\n    openAIEndpoint = \"&lt;insert your OpenAI endpoint here&gt;\"\n}\nopenAIChatDeploymentName := os.Getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\")\nif openAIChatDeploymentName == \"\" {\n    openAIChatDeploymentName = \"&lt;insert your OpenAI chat deployment name here&gt;\"\n}\nopenAISystemPrompt := os.Getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\")\nif openAISystemPrompt == \"\" {\n    openAISystemPrompt = \"You are a helpful AI assistant.\"\n}\n</code></pre> <p>STEP 2: Validate the environment variables and exit if any required variable is missing.</p> main.go<pre><code>if openAIEndpoint == \"\" || openAIAPIKey == \"\" || openAIChatDeploymentName == \"\" || openAISystemPrompt == \"\" {\n    fmt.Println(\"Please set the environment variables.\")\n    os.Exit(1)\n}\n</code></pre> <p>STEP 3: Initialize the chat helper with the configuration settings.</p> main.go<pre><code>chat, err := NewOpenAIChatCompletionsStreamingExample(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt)\nif err != nil {\n    log.Fatalf(\"ERROR: %s\", err)\n}\n</code></pre> <p>STEP 4: Enter user interaction loop to read input, get chat completions, and print responses.</p> main.go<pre><code>for {\n    fmt.Print(\"User: \")\n    input, _ := getUserInput()\n    if input == \"exit\" || input == \"\" {\n        break\n    }\n\n    fmt.Printf(\"\\nAssistant: \")\n    _, err := chat.GetChatCompletionsStream(input, func(content string) {\n        fmt.Printf(\"%s\", content)\n    })\n    if err != nil {\n        log.Fatalf(\"ERROR: %s\", err)\n    }\n    fmt.Printf(\"\\n\\n\")\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-go/sample-overview/#openai_chat_completions_streaming_hello_worldgo","title":"<code>openai_chat_completions_streaming_hello_world.go</code>","text":"<p>STEP 1: Initialize the helper class with provided settings.</p> openai_chat_completions_streaming_hello_world.go<pre><code>func NewOpenAIChatCompletionsStreamingExample(openAIEndpoint string, openAIAPIKey string, openAIChatDeploymentName string, openAISystemPrompt string) (*OpenAIChatCompletionsStreamingExample, error) {\n    keyCredential := azcore.NewKeyCredential(openAIAPIKey)\n\n    client, err := azopenai.NewClientWithKeyCredential(openAIEndpoint, keyCredential, nil)\n    if err != nil {\n        return nil, err\n    }\n\n    messages := []azopenai.ChatRequestMessageClassification{\n        &amp;azopenai.ChatRequestSystemMessage{\n            Content: &amp;openAISystemPrompt,\n        },\n    }\n\n    options := &amp;azopenai.ChatCompletionsOptions{\n        DeploymentName: &amp;openAIChatDeploymentName,\n        Messages: messages,\n    }\n\n    return &amp;OpenAIChatCompletionsStreamingExample {\n        client: client,\n        options: options,\n    }, nil\n}\n</code></pre> <p>STEP 2: Clear conversation history.</p> openai_chat_completions_streaming_hello_world.go<pre><code>func (chat *OpenAIChatCompletionsStreamingExample) ClearConversation() {\n    chat.options.Messages = chat.options.Messages[:1]\n}\n</code></pre> <p>STEP 3: Get chat completions stream, invoke callback for each message, and update message history.</p> openai_chat_completions_streaming_hello_world.go<pre><code>func (chat *OpenAIChatCompletionsStreamingExample) GetChatCompletionsStream(userPrompt string, callback func(content string)) (string, error) {\n    chat.options.Messages = append(chat.options.Messages, &amp;azopenai.ChatRequestUserMessage{Content: azopenai.NewChatRequestUserMessageContent(userPrompt)})\n\n    resp, err := chat.client.GetChatCompletionsStream(context.TODO(), *chat.options, nil)\n    if err != nil {\n        return \"\", err\n    }\n    defer resp.ChatCompletionsStream.Close()\n\n    responseContent := \"\"\n    for {\n        chatCompletions, err := resp.ChatCompletionsStream.Read()\n        if errors.Is(err, io.EOF) {\n            break\n        }\n        if err != nil {\n            return \"\", err\n        }\n\n        for _, choice := range chatCompletions.Choices {\n\n            content := \"\"\n            if choice.Delta.Content != nil {\n                content = *choice.Delta.Content\n            }\n\n            if choice.FinishReason != nil {\n                finishReason := *choice.FinishReason\n                if finishReason == azopenai.CompletionsFinishReasonTokenLimitReached {\n                    content = content + \"\\nWARNING: Exceeded token limit!\"\n                }\n            }\n\n            if content == \"\" {\n                continue\n            }\n\n            callback(content)\n            responseContent += content\n        }\n    }\n\n    chat.options.Messages = append(chat.options.Messages, &amp;azopenai.ChatRequestAssistantMessage{Content: to.Ptr(responseContent)})\n    return responseContent, nil\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-java/sample-overview/","title":"OpenAI Chat Streaming in Java","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API with streaming in a Java console application.</p> <p> Main.java  OpenAIChatCompletionsStreamingClass.java </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming --java\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming' in 'openai-chat-streaming-java' (3 files)...\n\npom.xml\nsrc/Main.java\nsrc/OpenAIChatCompletionsStreamingClass.java\n\nGenerating 'openai-chat-streaming' in 'openai-chat-streaming-java' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-java/sample-overview/#mainjava","title":"Main.java","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Main.java<pre><code>String openAIAPIKey = (System.getenv(\"AZURE_OPENAI_API_KEY\") != null) ? System.getenv(\"AZURE_OPENAI_API_KEY\") : \"&lt;insert your OpenAI API key here&gt;\";\nString openAIEndpoint = (System.getenv(\"AZURE_OPENAI_ENDPOINT\") != null) ? System.getenv(\"AZURE_OPENAI_ENDPOINT\") : \"&lt;insert your OpenAI endpoint here&gt;\";\nString openAIChatDeployment = (System.getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") != null) ? System.getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") : \"&lt;insert your OpenAI chat deployment name here&gt;\";\nString openAISystemPrompt = (System.getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\") != null) ? System.getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\") : \"You are a helpful AI assistant.\";\n</code></pre> <p>STEP 2: Validate the environment variables.</p> Main.java<pre><code>if (openAIAPIKey.isEmpty() || openAIEndpoint.isEmpty() || openAIChatDeployment.isEmpty()) {\n    throw new IllegalArgumentException(\"One or more environment variables are not set correctly.\");\n}\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings.</p> Main.java<pre><code>OpenAIChatCompletionsStreamingClass chat = new OpenAIChatCompletionsStreamingClass(openAIAPIKey, openAIEndpoint, openAIChatDeployment, openAISystemPrompt);\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Main.java<pre><code>Scanner scanner = new Scanner(System.in);\nwhile (true) {\n    System.out.print(\"User: \");\n    if (!scanner.hasNextLine()) break;\n\n    String userPrompt = scanner.nextLine();\n    if (userPrompt.isEmpty() || \"exit\".equals(userPrompt))\n        break;\n\n    System.out.print(\"\\nAssistant: \");\n    Flux&lt;ChatCompletions&gt; responseFlux = chat.getChatCompletionsStreamingAsync(userPrompt, update -&gt; {\n        System.out.print(update.getContent());\n    });\n    responseFlux.blockLast();\n    System.out.println(\"\\n\");\n}\nscanner.close();\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-java/sample-overview/#openaichatcompletionsstreamingclassjava","title":"OpenAIChatCompletionsStreamingClass.java","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> OpenAIChatCompletionsStreamingClass.java<pre><code>public OpenAIChatCompletionsStreamingClass (String openAIAPIKey, String openAIEndpoint, String openAIChatDeployment, String openAISystemPrompt) {\n\n    this.openAIChatDeployment = openAIChatDeployment;\n    this.openAISystemPrompt = openAISystemPrompt;\n    client = new OpenAIClientBuilder()\n        .endpoint(openAIEndpoint)\n        .credential(new AzureKeyCredential(openAIAPIKey))\n        .buildAsyncClient();\n\n    List&lt;ChatRequestMessage&gt; chatMessages = new ArrayList&lt;&gt;();\n    options = new ChatCompletionsOptions(chatMessages);\n    ClearConversation();\n    options.setStream(true);\n}\n\npublic void ClearConversation(){\n    List&lt;ChatRequestMessage&gt; chatMessages = options.getMessages();\n    chatMessages.clear();\n    chatMessages.add(new ChatRequestSystemMessage(this.openAISystemPrompt));\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsStreamingClass.java<pre><code>public Flux&lt;ChatCompletions&gt; getChatCompletionsStreamingAsync(String userPrompt,\n        Consumer&lt;ChatResponseMessage&gt; callback) {\n    options.getMessages().add(new ChatRequestUserMessage(userPrompt));\n</code></pre> <p>STEP 3: Send the chat message history to the streaming OpenAI Chat API and process each update.</p> OpenAIChatCompletionsStreamingClass.java<pre><code>    StringBuilder responseContent = new StringBuilder();\n    Flux&lt;ChatCompletions&gt; response = client.getChatCompletionsStream(this.openAIChatDeployment, options);\n\n    response.subscribe(chatResponse -&gt; {\n        if (chatResponse.getChoices() != null) {\n            for (ChatChoice update : chatResponse.getChoices()) {\n                if (update.getDelta() == null || update.getDelta().getContent() == null)\n                    continue;\n                String content = update.getDelta().getContent();\n\n                if (update.getFinishReason() == CompletionsFinishReason.CONTENT_FILTERED) {\n                    content = content + \"\\nWARNING: Content filtered!\";\n                } else if (update.getFinishReason() == CompletionsFinishReason.TOKEN_LIMIT_REACHED) {\n                    content = content + \"\\nERROR: Exceeded token limit!\";\n                }\n\n                if (content.isEmpty())\n                    continue;\n</code></pre> <p>STEP 4: For each non-empty update, invoke the callback for the update, and accumulate the response.</p> OpenAIChatCompletionsStreamingClass.java<pre><code>                if(callback != null) {\n                    callback.accept(update.getDelta());\n                }\n                responseContent.append(content);\n            }\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return the response.</p> OpenAIChatCompletionsStreamingClass.java<pre><code>            options.getMessages().add(new ChatRequestAssistantMessage(responseContent.toString()));\n        }\n    });\n\n    return response;\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-js/sample-overview/","title":"OpenAI Chat Streaming in JavaScript","text":"<p>This sample demonstrates how to use the OpenAI Chat API with streaming in a JavaScript application.</p> <p> Main.js  OpenAIChatCompletionsStreamingClass.js </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming' in 'openai-chat-streaming-js' (3 files)...\n\nOpenAIChatCompletionsStreamingClass.js\nMain.js\nReadLineWrapper.js\n\nGenerating 'openai-chat-streaming' in 'openai-chat-streaming-js' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-js/sample-overview/#mainjs","title":"Main.js","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Main.js<pre><code>const AZURE_OPENAI_SYSTEM_PROMPT = process.env.AZURE_OPENAI_SYSTEM_PROMPT ?? \"You are a helpful AI assistant.\";\n\n// NOTE: Never deploy your API Key in client-side environments like browsers or mobile apps\n// SEE: https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n\n// Get the required environment variables\nconst AZURE_OPENAI_API_KEY = process.env.AZURE_OPENAI_API_KEY ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nconst AZURE_OPENAI_API_VERSION = process.env.AZURE_OPENAI_API_VERSION ?? \"&lt;insert your Azure OpenAI API version here&gt;\";\nconst AZURE_OPENAI_CHAT_DEPLOYMENT = process.env.AZURE_OPENAI_CHAT_DEPLOYMENT ?? \"&lt;insert your Azure OpenAI chat deployment name here&gt;\";\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nconst AZURE_OPENAI_BASE_URL = `${AZURE_OPENAI_ENDPOINT.replace(/\\/+$/, '')}/openai/deployments/${AZURE_OPENAI_CHAT_DEPLOYMENT}`;\n</code></pre> <p>STEP 2: Validate the environment variables.</p> Main.js<pre><code>// Check if the required environment variables are set\nconst azureOk = \n  AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_API_VERSION != null &amp;&amp; !AZURE_OPENAI_API_VERSION.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_CHAT_DEPLOYMENT != null &amp;&amp; !AZURE_OPENAI_CHAT_DEPLOYMENT.startsWith('&lt;insert') &amp;&amp;\n  AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.startsWith('&lt;insert');\n\nconst ok = azureOk &amp;&amp;\n  AZURE_OPENAI_SYSTEM_PROMPT != null &amp;&amp; !AZURE_OPENAI_SYSTEM_PROMPT.startsWith('&lt;insert');\n\nif (!ok) {\n  console.error(\n    'To use Azure OpenAI, set the following environment variables:\\n' +\n    '\\n  AZURE_OPENAI_SYSTEM_PROMPT' +\n    '\\n  AZURE_OPENAI_API_KEY' +\n    '\\n  AZURE_OPENAI_API_VERSION' +\n    '\\n  AZURE_OPENAI_CHAT_DEPLOYMENT' +\n    '\\n  AZURE_OPENAI_ENDPOINT'\n  );\n  console.error(\n    '\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell' +\n    '\\n  node main.js' +\n    '\\n' +\n    '\\n  or' +\n    '\\n' +\n    '\\n  ai init' +\n    '\\n  ai dev shell --run \"node main.js\"'\n  );\n  process.exit(1);\n}\n</code></pre> <p>STEP 3: Create the client with the configuration settings and initialize the helper class.</p> Main.js<pre><code>const openai = new OpenAI({\n  apiKey: AZURE_OPENAI_API_KEY,\n  baseURL: AZURE_OPENAI_BASE_URL,\n  defaultQuery: { 'api-version': AZURE_OPENAI_API_VERSION },\n  defaultHeaders: { 'api-key': AZURE_OPENAI_API_KEY },\n});\n\nconst chat = new OpenAIChatCompletionsStreamingClass(AZURE_OPENAI_CHAT_DEPLOYMENT, AZURE_OPENAI_SYSTEM_PROMPT, openai, 20);\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Main.js<pre><code>while (true) {\n\n  // Get user input\n  const input = await readline.question('User: ');\n  if (input === 'exit' || input === '') break;\n\n  // Get the response\n  process.stdout.write('\\nAssistant: ');\n  await chat.getResponse(input, (content) =&gt; {\n    process.stdout.write(content);\n  });\n\n  process.stdout.write('\\n\\n');\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-js/sample-overview/#openaichatcompletionsstreamingclassjs","title":"OpenAIChatCompletionsStreamingClass.js","text":"<p>STEP 1: Initialize chat message history with a system message.</p> OpenAIChatCompletionsStreamingClass.js<pre><code>constructor(openAIModelOrDeploymentName, systemPrompt, openai, simulateTypingDelay = 0) {\n  this.simulateTypingDelay = simulateTypingDelay;\n  this.systemPrompt = systemPrompt;\n  this.openAIModelOrDeploymentName = openAIModelOrDeploymentName;\n  this.openai = openai;\n\n  this.clearConversation();\n}\n\nclearConversation() {\n  this.messages = [\n    { role: 'system', content: this.systemPrompt }\n  ];\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsStreamingClass.js<pre><code>this.messages.push({ role: 'user', content: userInput });\n</code></pre> <p>STEP 3: Send the chat message history to the OpenAI Chat streaming API and process each update.</p> OpenAIChatCompletionsStreamingClass.js<pre><code>const events = await this.openai.chat.completions.create({\n  model: this.openAIModelOrDeploymentName,\n  messages: this.messages,\n  stream: true\n});\n\nfor await (const event of events) {\n  for (const choice of event.choices) {\n\n    let content = choice.delta?.content;\n    if (choice.finish_reason === 'length') {\n      content = `${content}\\nERROR: Exceeded token limit!`;\n    }\n</code></pre> <p>STEP 4: For each non-empty update, invoke the callback for the update, and accumulate the response.</p> OpenAIChatCompletionsStreamingClass.js<pre><code>if (content != null) {\n  if(callback != null) {\n    callback(content);\n    if (this.simulateTypingDelay &gt; 0) {\n      await new Promise(r =&gt; setTimeout(r, this.simulateTypingDelay));\n    }\n  }\n  response += content;\n}\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return the response.</p> OpenAIChatCompletionsStreamingClass.js<pre><code>this.messages.push({ role: 'assistant', content: response });\nreturn response;\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-py/sample-overview/","title":"OpenAI Chat Streaming in Python","text":"<p>This sample demonstrates how to use the OpenAI Chat API with streaming in a Python console application.</p> <p> main.py  openai_chat_completions_streaming.py </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming' in 'openai-chat-streaming-py' (3 files)...\n\nopenai_chat_completions_streaming.py\nmain.py\nrequirements.txt\n\nGenerating 'openai-chat-streaming' in 'openai-chat-streaming-py' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.py<pre><code>openai_api_key = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your OpenAI API key here&gt;')\nopenai_api_version = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your Azure OpenAI API version here&gt;')\nopenai_endpoint = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your OpenAI endpoint here&gt;')\nopenai_chat_deployment_name = os.getenv('AZURE_OPENAI_CHAT_DEPLOYMENT', '&lt;insert your OpenAI chat deployment name here&gt;')\nopenai_system_prompt = os.getenv('AZURE_OPENAI_SYSTEM_PROMPT', 'You are a helpful AI assistant.')\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> main.py<pre><code>chat = OpenAIChatCompletionsStreaming(openai_api_version, openai_endpoint, openai_api_key, openai_chat_deployment_name, openai_system_prompt)\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> main.py<pre><code>while True:\n{\n    user_input = input('User: ')\n    if user_input == 'exit' or user_input == '':\n        break\n\n    print(\"\\nAssistant: \", end=\"\")\n    response = chat.get_chat_completions(user_input, lambda content: print(content, end=\"\"))\n    print(\"\\n\")\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-py/sample-overview/#openai_chat_completions_streamingpy","title":"openai_chat_completions_streaming.py","text":"<p>STEP 1: Create the client and initialize chat message history with a system message.</p> openai_chat_completions_streaming.py<pre><code>class OpenAIChatCompletionsStreaming:\n    def __init__(self, openai_api_version, openai_endpoint, openai_key, openai_chat_deployment_name, openai_system_prompt):\n        self.openai_system_prompt = openai_system_prompt\n        self.openai_chat_deployment_name = openai_chat_deployment_name\n        self.client = AzureOpenAI(\n            api_key=openai_key,\n            api_version=openai_api_version,\n            azure_endpoint = openai_endpoint\n            )\n        self.clear_conversation()\n\n    def clear_conversation(self):\n        self.messages = [\n            {'role': 'system', 'content': self.openai_system_prompt}\n        ]\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> openai_chat_completions_streaming.py<pre><code>    def get_chat_completions(self, user_input, callback):\n        self.messages.append({'role': 'user', 'content': user_input})\n</code></pre> <p>STEP 3: Send the chat message history to the streaming OpenAI Chat API and process each update.</p> openai_chat_completions_streaming.py<pre><code>        complete_content = ''\n        response = self.client.chat.completions.create(\n            model=self.openai_chat_deployment_name,\n            messages=self.messages,\n            stream=True)\n\n        for chunk in response:\n\n            choice0 = chunk.choices[0] if hasattr(chunk, 'choices') and chunk.choices else None\n            delta = choice0.delta if choice0 and hasattr(choice0, 'delta') else None\n            content = delta.content if delta and hasattr(delta, 'content') else ''\n\n            finish_reason = choice0.finish_reason if choice0 and hasattr(choice0, 'finish_reason') else None\n            if finish_reason == 'length':\n                content += f\"{content}\\nERROR: Exceeded max token length!\"\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> openai_chat_completions_streaming.py<pre><code>            if content is None: continue\n\n            complete_content += content\n            callback(content)\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return response.</p> openai_chat_completions_streaming.py<pre><code>        self.messages.append({'role': 'assistant', 'content': complete_content})\n        return complete_content\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-cs/sample-overview/","title":"OpenAI Chat with Data Streaming in C#","text":"<p>This sample demonstrates how to use the OpenAI Chat API incorporating data streaming from Azure AI Search in a C# console application.</p> <p> Program.cs  OpenAIChatCompletionsWithDataStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming-with-data --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming-with-data' in 'openai-chat-streaming-with-data-cs' (3 files)...\n\nOpenAIChatCompletionsWithDataStreaming.csproj\nOpenAIChatCompletionsWithDataStreamingClass.cs\nProgram.cs\n\nGenerating 'openai-chat-streaming-with-data' in 'openai-chat-streaming-with-data-cs' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var openAIAPIKey = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your OpenAI API key here&gt;\";\nvar openAIApiVersion = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\") ?? \"&lt;insert your open api version here&gt;\";\nvar openAIEndpoint = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your OpenAI endpoint here&gt;\";\nvar openAIChatDeploymentName = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") ?? \"&lt;insert your OpenAI chat deployment name here&gt;\";\nvar openAISystemPrompt = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n\nvar openAIEmbeddingsDeploymentName = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_EMBEDDING_DEPLOYMENT\") ?? \"&lt;insert your OpenAI embeddings deployment name here&gt;\";\nvar openAIEmbeddingsEndpoint = $\"{openAIEndpoint.Trim('/')}/openai/deployments/{openAIEmbeddingsDeploymentName}/embeddings?api-version={openAIApiVersion}\";\n\nvar searchApiKey = Environment.GetEnvironmentVariable(\"AZURE_AI_SEARCH_KEY\") ?? \"&lt;insert your search api key here&gt;\";\nvar searchEndpoint = Environment.GetEnvironmentVariable(\"AZURE_AI_SEARCH_ENDPOINT\") ?? \"&lt;insert your search endpoint here&gt;\";\nvar searchIndexName = Environment.GetEnvironmentVariable(\"AZURE_AI_SEARCH_INDEX_NAME\") ?? \"&lt;insert your search index name here&gt;\";\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> Program.cs<pre><code>var chat = new OpenAIChatCompletionsWithDataStreamingClass(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt, searchEndpoint, searchApiKey, searchIndexName, openAIEmbeddingsEndpoint);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    var response = await chat.GetChatCompletionsStreamingAsync(userPrompt, update =&gt; {\n        var text = string.Join(\"\", update.ContentUpdate\n            .Where(x =&gt; x.Kind == ChatMessageContentPartKind.Text)\n            .Select(x =&gt; x.Text)\n            .ToList());\n        Console.Write(text);\n    });\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-cs/sample-overview/#openaichatcompletionswithdatastreamingclasscs","title":"OpenAIChatCompletionsWithDataStreamingClass.cs","text":"<p>STEP 1: Create the client and initialize chat message history with a system message and set up data sources.</p> OpenAIChatCompletionsWithDataStreamingClass.cs<pre><code>public OpenAIChatCompletionsWithDataStreamingClass(string openAIEndpoint, string openAIAPIKey, string openAIChatDeploymentName, string openAISystemPrompt, string searchEndpoint, string searchApiKey, string searchIndexName, string embeddingsEndpoint)\n{\n    _openAISystemPrompt = openAISystemPrompt;\n\n    _client = string.IsNullOrEmpty(openAIAPIKey)\n        ? new AzureOpenAIClient(new Uri(openAIEndpoint), new DefaultAzureCredential())\n        : new AzureOpenAIClient(new Uri(openAIEndpoint), new AzureKeyCredential(openAIAPIKey));\n\n    _chatClient = _client.GetChatClient(openAIChatDeploymentName);\n    _messages = new List&lt;ChatMessage&gt;();\n\n    _options = new();\n    _options.AddDataSource(new AzureSearchChatDataSource()\n    {\n        Authentication = DataSourceAuthentication.FromApiKey(searchApiKey),\n        Endpoint = new Uri(searchEndpoint),\n        IndexName = searchIndexName,\n        QueryType = DataSourceQueryType.VectorSimpleHybrid, // Use VectorSimpleHybrid to get the best vector and keyword search query types.\n        VectorizationSource = DataSourceVectorizer.FromEndpoint(new Uri(embeddingsEndpoint), DataSourceAuthentication.FromApiKey(openAIAPIKey))\n    });\n\n    ClearConversation();\n}\n\npublic void ClearConversation()\n{\n    _messages.Clear();\n    _messages.Add(ChatMessage.CreateSystemMessage(_openAISystemPrompt));\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsWithDataStreamingClass.cs<pre><code>public async Task&lt;string&gt; GetChatCompletionsStreamingAsync(string userPrompt, Action&lt;StreamingChatCompletionUpdate&gt;? callback = null)\n{\n    _messages.Add(ChatMessage.CreateUserMessage(userPrompt));\n</code></pre> <p>STEP 3: Send the chat message history to the streaming OpenAI Chat API and process each update.</p> OpenAIChatCompletionsWithDataStreamingClass.cs<pre><code>    var responseContent = string.Empty;\n    var response = _chatClient.CompleteChatStreamingAsync(_messages, _options);\n    await foreach (var update in response)\n    {\n        var content = string.Join(\"\", update.ContentUpdate\n            .Where(x =&gt; x.Kind == ChatMessageContentPartKind.Text)\n            .Select(x =&gt; x.Text)\n            .ToList());\n\n        if (update.FinishReason == ChatFinishReason.ContentFilter)\n        {\n            content = $\"{content}\\nWARNING: Content filtered!\";\n        }\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> OpenAIChatCompletionsWithDataStreamingClass.cs<pre><code>        if (string.IsNullOrEmpty(content)) continue;\n\n        responseContent += content;\n        if (callback != null) callback(update);\n    }\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return response.</p> OpenAIChatCompletionsWithDataStreamingClass.cs<pre><code>    _messages.Add(ChatMessage.CreateAssistantMessage(responseContent));\n    return responseContent;\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-go/sample-overview/","title":"Sample overview","text":"<p>hide: - navigation - toc</p>"},{"location":"openai-chat/openai-chat-streaming-with-data-go/sample-overview/#openai-chat-streaming-with-data-in-go","title":"OpenAI Chat Streaming with Data in Go","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API with data streaming in a Go console application.</p> <p> main.go  openai_chat_completions_streaming_with_data_hello_world.go </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming-with-data --go\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming-with-data' in 'openai-chat-streaming-with-data-go' (3 files)...\n\ngo.mod\nmain.go\nopenai_chat_completions_streaming_with_data_hello_world.go\n\nGenerating 'openai-chat-streaming-with-data' in 'openai-chat-streaming-with-data-go' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-go/sample-overview/#maingo","title":"main.go","text":"<p>STEP 1: Read the configuration settings from environment variables and initialize variables.</p> main.go<pre><code>openAIAPIKey := os.Getenv(\"AZURE_OPENAI_API_KEY\")\nif openAIAPIKey == \"\" {\n    openAIAPIKey = \"&lt;insert your OpenAI API key here&gt;\"\n}\nopenAIApiVersion := os.Getenv(\"AZURE_OPENAI_API_VERSION\")\nif openAIApiVersion == \"\" {\n    openAIApiVersion = \"&lt;insert your open api version here&gt;\"\n}\nopenAIEndpoint := os.Getenv(\"AZURE_OPENAI_ENDPOINT\")\nif openAIEndpoint == \"\" {\n    openAIEndpoint = \"&lt;insert your OpenAI endpoint here&gt;\"\n}\nopenAIChatDeploymentName := os.Getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\")\nif openAIChatDeploymentName == \"\" {\n    openAIChatDeploymentName = \"&lt;insert your OpenAI chat deployment name here&gt;\"\n}\nopenAISystemPrompt := os.Getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\")\nif openAISystemPrompt == \"\" {\n    openAISystemPrompt = \"You are a helpful AI assistant.\"\n}\n\nopenAIEmbeddingsDeploymentName := os.Getenv(\"AZURE_OPENAI_EMBEDDING_DEPLOYMENT\")\nif openAIEmbeddingsDeploymentName == \"\" {\n    openAIEmbeddingsDeploymentName = \"&lt;insert your OpenAI embeddings deployment name here&gt;\"\n}\n\nopenAIEndpoint = strings.TrimSuffix(openAIEndpoint, \"/\")\n\nazureSearchApiKey := os.Getenv(\"AZURE_AI_SEARCH_KEY\")\nif azureSearchApiKey == \"\" {\n    azureSearchApiKey = \"&lt;insert your search api key here&gt;\"\n}\n\nazureSearchEndpoint := os.Getenv(\"AZURE_AI_SEARCH_ENDPOINT\")\nif azureSearchEndpoint == \"\" {\n    azureSearchEndpoint = \"&lt;insert your search endpoint here&gt;\"\n}\n\nazureSearchIndexName := os.Getenv(\"AZURE_AI_SEARCH_INDEX_NAME\")\nif azureSearchIndexName == \"\" {\n    azureSearchIndexName = \"&lt;insert your search index name here&gt;\"\n}\n\nif openAIEndpoint == \"\" || openAIAPIKey == \"\" || openAIChatDeploymentName == \"\" || openAISystemPrompt == \"\" {\n    fmt.Println(\"Please set the environment variables.\")\n    os.Exit(1)\n}\n\nchat, err := NewOpenAIChatCompletionsWithDataStreamingExample(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt, azureSearchEndpoint, azureSearchApiKey, azureSearchIndexName, openAIEmbeddingsDeploymentName)\nif err != nil {\n    log.Fatalf(\"ERROR: %s\", err)\n}\n\nfor {\n    fmt.Print(\"User: \")\n    input, _ := getUserInput()\n    if input == \"exit\" || input == \"\" {\n        break\n    }\n\n    fmt.Printf(\"\\nAssistant: \")\n    _, err := chat.GetChatCompletionsStream(input, func(content string) {\n        fmt.Printf(\"%s\", content)\n    })\n    if err != nil {\n        log.Fatalf(\"ERROR: %s\", err)\n    }\n    fmt.Printf(\"\\n\\n\")\n}\n</code></pre> <p>STEP 2: Validate the environment variables and exit if any required variable is missing.</p> main.go<pre><code>if openAIEndpoint == \"\" || openAIAPIKey == \"\" || openAIChatDeploymentName == \"\" || openAISystemPrompt == \"\" {\n    fmt.Println(\"Please set the environment variables.\")\n    os.Exit(1)\n}\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings.</p> main.go<pre><code>chat, err := NewOpenAIChatCompletionsWithDataStreamingExample(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt, azureSearchEndpoint, azureSearchApiKey, azureSearchIndexName, openAIEmbeddingsDeploymentName)\nif err != nil {\n    log.Fatalf(\"ERROR: %s\", err)\n}\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> main.go<pre><code>for {\n    fmt.Print(\"User: \")\n    input, _ := getUserInput()\n    if input == \"exit\" || input == \"\" {\n        break\n    }\n\n    fmt.Printf(\"\\nAssistant: \")\n    _, err := chat.GetChatCompletionsStream(input, func(content string) {\n        fmt.Printf(\"%s\", content)\n    })\n    if err != nil {\n        log.Fatalf(\"ERROR: %s\", err)\n    }\n    fmt.Printf(\"\\n\\n\")\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-go/sample-overview/#openai_chat_completions_streaming_with_data_hello_worldgo","title":"openai_chat_completions_streaming_with_data_hello_world.go","text":"<p>STEP 1: Create the client and initialize chat message history with a system message and data sources.</p> openai_chat_completions_streaming_with_data_hello_world.go<pre><code>type OpenAIChatCompletionsWithDataStreamingExample struct {\n    client   *azopenai.Client\n    options  *azopenai.ChatCompletionsOptions\n}\n\nfunc NewOpenAIChatCompletionsWithDataStreamingExample(\n    openAIEndpoint string,\n    openAIAPIKey string,\n    openAIChatDeploymentName string,\n    openAISystemPrompt string,\n    azureSearchEndpoint string,\n    azureSearchApiKey string,\n    azureSearchIndexName string,\n    openAIEmbeddingsDeploymentName string,\n    ) (*OpenAIChatCompletionsWithDataStreamingExample, error) {\n        keyCredential := azcore.NewKeyCredential(openAIAPIKey)\n\n        client, err := azopenai.NewClientWithKeyCredential(openAIEndpoint, keyCredential, nil)\n        if err != nil {\n            return nil, err\n        }\n\n        messages := []azopenai.ChatRequestMessageClassification{\n            &amp;azopenai.ChatRequestSystemMessage{\n                Content: &amp;openAISystemPrompt,\n            },\n        }\n\n        options := &amp;azopenai.ChatCompletionsOptions{\n            DeploymentName: &amp;openAIChatDeploymentName,\n            Messages:       messages,\n            AzureExtensionsOptions: []azopenai.AzureChatExtensionConfigurationClassification{\n                &amp;azopenai.AzureCognitiveSearchChatExtensionConfiguration{\n                    Parameters: &amp;azopenai.AzureCognitiveSearchChatExtensionParameters{\n                        Endpoint:  &amp;azureSearchEndpoint,\n                        IndexName: &amp;azureSearchIndexName,\n                        Authentication: &amp;azopenai.OnYourDataAPIKeyAuthenticationOptions{\n                            Key: &amp;azureSearchApiKey,\n                        },\n                        QueryType: to.Ptr(azopenai.AzureCognitiveSearchQueryTypeVectorSimpleHybrid),\n                        EmbeddingDependency: &amp;azopenai.OnYourDataDeploymentNameVectorizationSource{\n                            DeploymentName: &amp;openAIEmbeddingsDeploymentName,\n                            Type:           to.Ptr(azopenai.OnYourDataVectorizationSourceTypeDeploymentName),\n                        },\n                    },\n                },\n            },\n        }\n\n        return &amp;OpenAIChatCompletionsWithDataStreamingExample{\n            client:  client,\n            options: options,\n        }, nil\n    }\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> openai_chat_completions_streaming_with_data_hello_world.go<pre><code>func (chat *OpenAIChatCompletionsWithDataStreamingExample) ClearConversation() {\n    chat.options.Messages = chat.options.Messages[:1]\n}\n\nfunc (chat *OpenAIChatCompletionsWithDataStreamingExample) GetChatCompletionsStream(userPrompt string, callback func(content string)) (string, error) {\n    chat.options.Messages = append(chat.options.Messages, &amp;azopenai.ChatRequestUserMessage{Content: azopenai.NewChatRequestUserMessageContent(userPrompt)})\n\n    resp, err := chat.client.GetChatCompletionsStream(context.TODO(), *chat.options, nil)\n    if err != nil {\n        return \"\", err\n    }\n    defer resp.ChatCompletionsStream.Close()\n\n    responseContent := \"\"\n    for {\n        chatCompletions, err := resp.ChatCompletionsStream.Read()\n        if errors.Is(err, io.EOF) {\n            break\n        }\n        if err != nil {\n            return \"\", err\n        }\n\n        for _, choice := range chatCompletions.Choices {\n\n            content := \"\"\n            if choice.Delta.Content != nil {\n                content = *choice.Delta.Content\n            }\n\n            if choice.FinishReason != nil {\n                finishReason := *choice.FinishReason\n                if finishReason == azopenai.CompletionsFinishReasonTokenLimitReached {\n                    content = content + \"\\nWARNING: Exceeded token limit!\"\n                }\n            }\n\n            if content == \"\" {\n                continue\n            }\n\n            if callback != nil {\n                callback(content)\n            }\n            responseContent += content\n        }\n    }\n\n    chat.options.Messages = append(chat.options.Messages, &amp;azopenai.ChatRequestAssistantMessage{Content: to.Ptr(responseContent)})\n    return responseContent, nil\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-java/sample-overview/","title":"Sample overview","text":""},{"location":"openai-chat/openai-chat-streaming-with-data-java/sample-overview/#openai-chat-streaming-with-data-in-java","title":"OpenAI Chat Streaming with Data in Java","text":"<p>This sample demonstrates how to use the OpenAI Chat API with streaming and data integration in a Java console application.</p>"},{"location":"openai-chat/openai-chat-streaming-with-data-java/sample-overview/#mainjava","title":"Main.java","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Main.java<pre><code>String openAIAPIKey = (System.getenv(\"AZURE_OPENAI_API_KEY\") != null) ? System.getenv(\"AZURE_OPENAI_API_KEY\") : \"&lt;insert your OpenAI API key here&gt;\";\nString openAIEndpoint = (System.getenv(\"AZURE_OPENAI_ENDPOINT\") != null) ? System.getenv(\"AZURE_OPENAI_ENDPOINT\") : \"&lt;insert your OpenAI endpoint here&gt;\";\nString openAIChatDeployment = (System.getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") != null) ? System.getenv(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") : \"&lt;insert your OpenAI chat deployment name here&gt;\";\nString openAISystemPrompt = (System.getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\") != null) ? System.getenv(\"AZURE_OPENAI_SYSTEM_PROMPT\") : \"You are a helpful AI assistant.\";\n\nString azureSearchEmbeddingsDeploymentName = System.getenv(\"AZURE_OPENAI_EMBEDDING_DEPLOYMENT\") != null ? System.getenv(\"AZURE_OPENAI_EMBEDDING_DEPLOYMENT\") : \"&lt;insert your OpenAI embeddings deployment name here&gt;\";\nString azureSearchEndpoint = System.getenv(\"AZURE_AI_SEARCH_ENDPOINT\") != null ? System.getenv(\"AZURE_AI_SEARCH_ENDPOINT\") : \"&lt;insert your search endpoint here&gt;\";\nString azureSearchAPIKey = System.getenv(\"AZURE_AI_SEARCH_KEY\") != null ? System.getenv(\"AZURE_AI_SEARCH_KEY\") : \"&lt;insert your search api key here&gt;\";\nString azureSearchIndexName = System.getenv(\"AZURE_AI_SEARCH_INDEX_NAME\") != null ? System.getenv(\"AZURE_AI_SEARCH_INDEX_NAME\") : \"&lt;insert your search index name here&gt;\";\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> Main.java<pre><code>OpenAIChatCompletionsWithDataStreamingClass chat = new OpenAIChatCompletionsWithDataStreamingClass(openAIAPIKey, openAIEndpoint, openAIChatDeployment, openAISystemPrompt, azureSearchEndpoint, azureSearchIndexName, azureSearchAPIKey, azureSearchEmbeddingsDeploymentName);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Main.java<pre><code>Scanner scanner = new Scanner(System.in);\nwhile (true) {\n    System.out.print(\"User: \");\n    String userPrompt = scanner.nextLine();\n    if (userPrompt.isEmpty() || \"exit\".equals(userPrompt))\n        break;\n\n    System.out.print(\"\\nAssistant: \");\n    Flux&lt;ChatCompletions&gt; responseFlux = chat.getChatCompletionsStreamingAsync(userPrompt, update -&gt; {\n        System.out.print(update.getContent());\n    });\n    responseFlux.blockLast();\n    System.out.println(\"\\n\");\n}\nscanner.close();\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-java/sample-overview/#openaichatcompletionswithdatastreamingclassjava","title":"OpenAIChatCompletionsWithDataStreamingClass.java","text":"<p>STEP 1: Create the client and initialize chat message history with a system message and set up data sources.</p> OpenAIChatCompletionsWithDataStreamingClass.java<pre><code>public OpenAIChatCompletionsWithDataStreamingClass (\n    String openAIAPIKey,\n    String openAIEndpoint,\n    String openAIChatDeployment,\n    String openAISystemPrompt,\n    String azureSearchEndpoint,\n    String azureSearchIndexName,\n    String azureSearchAPIKey,\n    String azureSearchEmbeddingsDeploymentName) {\n\n    this.openAIChatDeployment = openAIChatDeployment;\n    this.openAISystemPrompt = openAISystemPrompt;\n    client = new OpenAIClientBuilder()\n        .endpoint(openAIEndpoint)\n        .credential(new AzureKeyCredential(openAIAPIKey))\n        .buildAsyncClient();\n\n    AzureCognitiveSearchChatExtensionConfiguration searchConfiguration =\n            new AzureCognitiveSearchChatExtensionConfiguration(\n                    new AzureCognitiveSearchChatExtensionParameters(azureSearchEndpoint, azureSearchIndexName)\n                            .setAuthentication(new OnYourDataApiKeyAuthenticationOptions(azureSearchAPIKey))\n                            .setQueryType(AzureCognitiveSearchQueryType.VECTOR_SIMPLE_HYBRID)\n                            .setEmbeddingDependency(new OnYourDataDeploymentNameVectorizationSource(azureSearchEmbeddingsDeploymentName))\n            );\n\n    List&lt;ChatRequestMessage&gt; chatMessages = new ArrayList&lt;&gt;();\n    options = new ChatCompletionsOptions(chatMessages)\n    .setDataSources(Arrays.asList(searchConfiguration));\n    ClearConversation();\n    options.setStream(true);\n}\n\npublic void ClearConversation(){\n    List&lt;ChatRequestMessage&gt; chatMessages = options.getMessages();\n    chatMessages.clear();\n    chatMessages.add(new ChatRequestSystemMessage(this.openAISystemPrompt));\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsWithDataStreamingClass.java<pre><code>public Flux&lt;ChatCompletions&gt; getChatCompletionsStreamingAsync(String userPrompt,\n        Consumer&lt;ChatResponseMessage&gt; callback) {\n    options.getMessages().add(new ChatRequestUserMessage(userPrompt));\n</code></pre> <p>STEP 3: Send the chat message history to the streaming OpenAI Chat API and process each update.</p> OpenAIChatCompletionsWithDataStreamingClass.java<pre><code>    StringBuilder responseContent = new StringBuilder();\n    Flux&lt;ChatCompletions&gt; response = client.getChatCompletionsStream(this.openAIChatDeployment, options);\n\n    response.subscribe(chatResponse -&gt; {\n        if (chatResponse.getChoices() != null) {\n            for (ChatChoice update : chatResponse.getChoices()) {\n                if (update.getDelta() == null || update.getDelta().getContent() == null)\n                    continue;\n                String content = update.getDelta().getContent();\n\n                if (update.getFinishReason() == CompletionsFinishReason.CONTENT_FILTERED) {\n                    content = content + \"\\nWARNING: Content filtered!\";\n                } else if (update.getFinishReason() == CompletionsFinishReason.TOKEN_LIMIT_REACHED) {\n                    content = content + \"\\nERROR: Exceeded token limit!\";\n                }\n\n                if (content.isEmpty())\n                    continue;\n\n                if(callback != null) {\n                    callback.accept(update.getDelta());\n                }\n                responseContent.append(content);\n            }\n\n            options.getMessages().add(new ChatRequestAssistantMessage(responseContent.toString()));\n        }\n    });\n\n    return response;\n}\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> OpenAIChatCompletionsWithDataStreamingClass.java<pre><code>        if (string.IsNullOrEmpty(content)) continue;\n\n        responseContent += content;\n        if (callback != null) callback(update);\n    }\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return response.</p> OpenAIChatCompletionsWithDataStreamingClass.java<pre><code>    _messages.Add(ChatMessage.CreateAssistantMessage(responseContent));\n    return responseContent;\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-js/sample-overview/","title":"OpenAI Chat Streaming with RAG + AI Search in JavaScript","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API with RAG (Retrieval-Augmented Generation) and AI Search in a JavaScript console application.</p> <p> Main.js  OpenAIChatCompletionsStreamingWithDataClass.js </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming-with-data --javascript\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming-with-data' in 'openai-chat-streaming-with-data-js' (3 files)...\n\nOpenAIChatCompletionsStreamingWithDataClass.js\nReadLineWrapper.js\nMain.js\n\nGenerating 'openai-chat-streaming-with-data' in 'openai-chat-streaming-with-data-js' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-js/sample-overview/#mainjs","title":"Main.js","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Main.js<pre><code>const openAIAPIKey = process.env[\"AZURE_OPENAI_API_KEY\"] || \"&lt;insert your OpenAI API key here&gt;\";\nconst openAIAPIVersion = process.env[\"AZURE_OPENAI_API_VERSION\"] || \"&lt;insert your OpenAI API version here&gt;\" ;\nconst openAIEndpoint = process.env[\"AZURE_OPENAI_ENDPOINT\"] || \"&lt;insert your OpenAI endpoint here&gt;\";\nconst openAIChatDeploymentName = process.env[\"AZURE_OPENAI_CHAT_DEPLOYMENT\"] || \"&lt;insert your OpenAI chat deployment name here&gt;\" ;\nconst openAIEmbeddingsDeploymentName = process.env[\"AZURE_OPENAI_EMBEDDING_DEPLOYMENT\"] || \"&lt;insert your OpenAI embeddings deployment here&gt;\" ;\nconst openAIEmbeddingsEndpoint = `${openAIEndpoint.replace(/\\/+$, '')}/openai/deployments/${openAIEmbeddingsDeploymentName}/embeddings?api-version=${openAIAPIVersion}`;\nconst openAISystemPrompt = process.env[\"AZURE_OPENAI_SYSTEM_PROMPT\"] || \"You are a helpful AI assistant.\" ;\nconst searchEndpoint = process.env[\"AZURE_AI_SEARCH_ENDPOINT\"] || \"&lt;insert your search endpoint here&gt;\" ;\nconst searchAPIKey = process.env[\"AZURE_AI_SEARCH_KEY\"] || \"&lt;insert your search api key here&gt;\" ;\nconst searchIndexName = process.env[\"AZURE_AI_SEARCH_INDEX_NAME\"] || \"&lt;insert your search index name here&gt;\" ;\n</code></pre> <p>STEP 2: Initialize the helper class with the configuration settings.</p> Main.js<pre><code>const chat = new OpenAIChatCompletionsStreamingWithDataClass(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt, searchEndpoint, searchAPIKey, searchIndexName, openAIEmbeddingsEndpoint);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Main.js<pre><code>while (true) {\n\n  const input = await readline.question('User: ');\n  if (input === 'exit' || input === '') break;\n\n  let response = await chat.getChatCompletions(input, (content) =&gt; {\n    console.log(`assistant-streaming: ${content}`);\n  });\n\n  console.log(`\\nAssistant: ${response}\\n`);\n}\n\nconsole.log('Bye!');\nprocess.exit();\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-js/sample-overview/#openaichatcompletionsstreamingwithdataclassjs","title":"OpenAIChatCompletionsStreamingWithDataClass.js","text":"<p>STEP 1: Create the client and initialize chat message history with a system message and set up data sources.</p> OpenAIChatCompletionsStreamingWithDataClass.js<pre><code>constructor(openAIEndpoint, openAIAPIKey, openAIChatDeploymentName, openAISystemPrompt, searchEndpoint, searchAPIKey, searchIndexName, openAIEmbeddingsEndpoint) {\n  this.openAISystemPrompt = openAISystemPrompt;\n  this.openAIChatDeploymentName = openAIChatDeploymentName;\n  this.client = new OpenAIClient(openAIEndpoint, new AzureKeyCredential(openAIAPIKey));\n\n  this.azureExtensionOptions = {\n    azureExtensionOptions: {\n      extensions: [\n        {\n          type: \"AzureCognitiveSearch\",\n          endpoint: searchEndpoint,\n          key: searchAPIKey,\n          indexName: searchIndexName,\n          embeddingEndpoint: openAIEmbeddingsEndpoint,\n          embeddingKey: openAIAPIKey,\n          queryType: \"vectorSimpleHybrid\"\n        },\n      ],\n    }\n  }\n\n  this.clearConversation();\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> OpenAIChatCompletionsStreamingWithDataClass.js<pre><code>clearConversation() {\n  this.messages = [\n    { role: 'system', content: this.openAISystemPrompt }\n  ];\n}\n</code></pre> <p>STEP 3: Send the chat message history to the streaming OpenAI Chat API and process each update.</p> OpenAIChatCompletionsStreamingWithDataClass.js<pre><code>async getChatCompletions(userInput, callback) {\n  this.messages.push({ role: 'user', content: userInput });\n\n  let contentComplete = '';\n  const events = await this.client.streamChatCompletions(this.openAIChatDeploymentName, this.messages, this.azureExtensionOptions);\n\n  for await (const event of events) {\n    for (const choice of event.choices) {\n\n      let content = choice.delta?.content;\n      if (choice.finishReason === 'length') {\n        content = `${content}\\nERROR: Exceeded token limit!`;\n      }\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the response, and invoke the callback for the update.</p> OpenAIChatCompletionsStreamingWithDataClass.js<pre><code>      if (content != null) {\n        if(callback != null) {\n          callback(content);\n        }\n        await new Promise(r =&gt; setTimeout(r, 50)); // delay to simulate real-time output, word by word\n        contentComplete += content;\n      }\n    }\n  }\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return response.</p> OpenAIChatCompletionsStreamingWithDataClass.js<pre><code>  this.messages.push({ role: 'assistant', content: contentComplete });\n  return contentComplete;\n}\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-py/sample-overview/","title":"OpenAI Chat with Data Streaming in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the OpenAI Chat API with data streaming in a Python console application.</p> <p> main.py  openai_chat_completions_with_data_streaming.py  requirements.txt </p> How to generate this sample Command<pre><code>ai dev new openai-chat-streaming-with-data --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'openai-chat-streaming-with-data' in 'openai-chat-streaming-with-data-py' (3 files)...\n\nmain.py\nopenai_chat_completions_with_data_streaming.py\nrequirements.txt\n\nGenerating 'openai-chat-streaming-with-data' in 'openai-chat-streaming-with-data-py' (3 files)... DONE!\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables:</p> main.py<pre><code>openai_api_key = os.getenv('AZURE_OPENAI_API_KEY', '&lt;insert your OpenAI API key here&gt;')\nopenai_api_version = os.getenv('AZURE_OPENAI_API_VERSION', '&lt;insert your OpenAI API version here&gt;')\nopenai_endpoint = os.getenv('AZURE_OPENAI_ENDPOINT', '&lt;insert your OpenAI endpoint here&gt;')\nopenai_chat_deployment_name = os.getenv('AZURE_OPENAI_CHAT_DEPLOYMENT', '&lt;insert your OpenAI chat deployment name here&gt;')\nopenai_embeddings_deployment_name = os.getenv('AZURE_OPENAI_EMBEDDING_DEPLOYMENT', '&lt;insert your OpenAI embeddings deployment here&gt;')\nopenai_embeddings_endpoint = f\"{openai_endpoint.rstrip('/')}/openai/deployments/{openai_embeddings_deployment_name}/embeddings?api-version={openai_api_version}\"\nopenai_system_prompt = os.getenv('AZURE_OPENAI_SYSTEM_PROMPT', 'You are a helpful AI assistant.')\nsearch_api_key = os.getenv('AZURE_AI_SEARCH_KEY', '&lt;insert your search api key here&gt;')\nsearch_endpoint =os.getenv('AZURE_AI_SEARCH_ENDPOINT', '&lt;insert your search endpoint here&gt;')\nsearch_index_name = os.getenv('AZURE_AI_SEARCH_INDEX_NAME', '&lt;insert your search index name here&gt;')\n</code></pre> <p>STEP 2: Validate the environment variables:</p> main.py<pre><code>if not all([openai_api_key, openai_api_version, openai_endpoint, openai_chat_deployment_name, openai_embeddings_deployment_name, search_api_key, search_endpoint, search_index_name]):\n    raise ValueError(\"One or more environment variables are not set.\")\n</code></pre> <p>STEP 3: Initialize the helper class with the configuration settings:</p> main.py<pre><code>chat = OpenAIChatCompletionsStreamingWithData(openai_api_version, openai_endpoint, openai_api_key, openai_chat_deployment_name, openai_system_prompt, search_endpoint, search_api_key, search_index_name, openai_embeddings_endpoint)\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received:</p> main.py<pre><code>while True:\n    user_input = input('User: ')\n    if user_input == 'exit' or user_input == '':\n        break\n\n    print(\"\\nAssistant: \", end=\"\")\n    response = chat.get_chat_completions(user_input, lambda content: print(content, end=\"\"))\n    print(\"\\n\")\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-py/sample-overview/#openai_chat_completions_with_data_streamingpy","title":"openai_chat_completions_with_data_streaming.py","text":"<p>STEP 1: Create the client and initialize chat message history with a system message and set up data sources:</p> openai_chat_completions_with_data_streaming.py<pre><code>class OpenAIChatCompletionsStreamingWithData:\n    def __init__(self, openai_api_version, openai_endpoint, openai_key, openai_chat_deployment_name, openai_system_prompt, search_endpoint, search_api_key, search_index_name, openai_embeddings_endpoint):\n        self.openai_system_prompt = openai_system_prompt\n        self.openai_chat_deployment_name = openai_chat_deployment_name\n        self.client = AzureOpenAI(\n            api_key=openai_key,\n            api_version=openai_api_version,\n            base_url = f\"{openai_endpoint.rstrip('/')}/openai/deployments/{openai_chat_deployment_name}/extensions\"\n            )\n        self.extra_body={\n            \"dataSources\": [\n                {\n                    \"type\": \"AzureCognitiveSearch\",\n                    \"parameters\": {\n                        \"endpoint\": search_endpoint,\n                        \"key\": search_api_key,\n                        \"indexName\": search_index_name,\n                        \"embeddingEndpoint\": openai_embeddings_endpoint,\n                        \"embeddingKey\": openai_key,\n                        \"queryType\": \"vectorSimpleHybrid\"\n                    }\n                }\n            ]\n        }\n\n        self.clear_conversation()\n\n    def clear_conversation(self):\n        self.messages = [\n            {'role': 'system', 'content': self.openai_system_prompt}\n        ]\n</code></pre> <p>STEP 2: Clear conversation history:</p> openai_chat_completions_with_data_streaming.py<pre><code>def clear_conversation(self):\n    self.messages = [\n        {'role': 'system', 'content': self.openai_system_prompt}\n    ]\n</code></pre> <p>STEP 3: Append user input to the messages list:</p> openai_chat_completions_with_data_streaming.py<pre><code>def get_chat_completions(self, user_input, callback):\n    self.messages.append({'role': 'user', 'content': user_input})\n</code></pre> <p>STEP 4: Create chat completions with streaming and callback function:</p> openai_chat_completions_with_data_streaming.py<pre><code>    complete_content = ''\n    response = self.client.chat.completions.create(\n        model=self.openai_chat_deployment_name,\n        messages=self.messages,\n        extra_body=self.extra_body,\n        stream=True)\n\n    for chunk in response:\n\n        choice0 = chunk.choices[0] if hasattr(chunk, 'choices') and chunk.choices else None\n        delta = choice0.delta if choice0 and hasattr(choice0, 'delta') else None\n        content = delta.content if delta and hasattr(delta, 'content') else ''\n\n        finish_reason = choice0.finish_reason if choice0 and hasattr(choice0, 'finish_reason') else None\n        if finish_reason == 'length':\n            content += f\"{content}\\nERROR: Exceeded max token length!\"\n\n        if content is None: continue\n\n        complete_content += content\n        callback(content)\n</code></pre> <p>STEP 5: Append assistant's response to the messages list:</p> openai_chat_completions_with_data_streaming.py<pre><code>    self.messages.append({'role': 'assistant', 'content': complete_content})\n    return complete_content\n</code></pre>"},{"location":"openai-chat/openai-chat-streaming-with-data-py/sample-overview/#requirementstxt","title":"requirements.txt","text":"<p>This file contains the dependencies required to run the sample:</p> requirements.txt<pre><code>openai&gt;1.0\n</code></pre>"},{"location":"reference/cli/","title":"<code>ai</code> CLI","text":"<p>The Azure AI Command-Line Interface (the <code>ai</code> CLI) is a cross-platform command-line tool to connect and immediately use Azure AI services with or without writing code.</p>"},{"location":"reference/cli/#usage","title":"Usage","text":"<pre><code>ai &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/#commands","title":"Commands","text":"Command Description ai init Allows interactive and non-interactive selection or creation of Azure AI Services resources. ai config Creates, queries, or deletes AI configuration data. ai chat Initiates interactive or non-interactive conversations with an AI language model. ai chat assistant Manages OpenAI Assistants and related resources. ai dev Enables quick development of GenAI applications. ai search Creates or updates Azure AI Search indexes. ai speech Allows speech recognition and synthesis and related tasks. ai test Enables GenAI based testing of console applications. Where can I use the <code>ai</code> CLI? <p>The CLI allows the execution of commands through a terminal using interactive command-line prompts or via script.</p> <p>The <code>ai</code> CLI is available on Windows, macOS, and Linux. You can also use it in a Visual Studio Code Dev Container or GitHub Codespaces.</p> <p>Install the <code>ai</code> CLI to get started.</p> Do I have to write code to use the <code>ai</code> CLI? <p>No, you don't have to write code to use the <code>ai</code> CLI.</p> <p>You can easily use the <code>ai</code> CLI to experiment with key Azure AI service features and see how they work with your use cases. Within minutes, you can setup the required Azure resources, and build a customized GenAI experiences. You can try it out interactively, or script larger processes to automate your own workflows as part of your CI/CD system.</p> Can I use it to integrate GenAI with my own applications? <p>Yes, you can use the <code>ai</code> CLI to create and manage Azure AI resources, and to develop and test GenAI applications.</p> <p>Use the <code>ai dev</code> command to quickly develop GenAI applications in C#, Go, Java, JavaScript, Python, or TypeScript. Use the <code>ai test</code> command to easily test console applications using GenAI based testing.  </p>"},{"location":"reference/cli/config/","title":"<code>ai config</code>","text":"<p>The <code>ai config</code> command creates, queries, or deletes AI configuration data stored in AI configuration datastore files.</p>"},{"location":"reference/cli/config/#usage","title":"Usage","text":"<pre><code>ai config [HIVE] [COMMAND] [@FILE] [...]\n</code></pre>"},{"location":"reference/cli/config/#options","title":"Options","text":"Option Description <code>--set [NAME=]VALUE</code> Sets the value for a configuration option. <code>--clear NAME</code> Removes the value of a configuration option. <code>--add [NAME=]VALUE</code> Adds a configuration option with the specified value. <code>--find NAME</code> Finds a configuration option with the specified name. <code>--hive HIVE</code> Specifies the configuration hive to use."},{"location":"reference/cli/config/#hives","title":"Hives","text":"<p>The HIVE parameter specifies the configuration data scope of use. <code>HIVE</code> can be one of the following values:</p> Hive Scope Description . Current directory local User's local configuration user User-wide configuration global Global configuration (requires permissions)"},{"location":"reference/cli/config/#examples","title":"Examples","text":"Set a configuration key<pre><code>ai config --set key 436172626F6E20697320636F6F6C2121\n</code></pre> Set a region<pre><code>ai config --set region westus2\n</code></pre> Query a configuration key<pre><code>ai config @key\n</code></pre>"},{"location":"reference/cli/init/","title":"<code>ai init</code>","text":"<p>The <code>ai init</code> command allows interactive and non-interactive selection or creation of Azure AI resources. When an AI resource is selected or created using this command, the associated resource keys and region are retrieved and automatically stored in the local AI configuration datastore.</p>"},{"location":"reference/cli/init/#usage","title":"Usage","text":"<pre><code>ai init &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/init/#options","title":"Options","text":"Option Description <code>--subscription</code> Specify the subscription ID to use. <code>--interactive</code> Enable or disable interactive mode (true/false). <code>--region</code> Specify the region for the resource. <code>--group</code> Specify the resource group name. <code>--name</code> Specify the name for the resource."},{"location":"reference/cli/init/#sub-commands","title":"Sub-commands","text":"Command Description <code>ai init openai</code> Creates or selects an Azure OpenAI resource. <code>ai init inference</code> Initializes the connection to the Azure AI Inference endpoint. <code>ai init github</code> Initializes the connection to the GitHub Model Marketplace. <code>ai init speech</code> Creates or selects an Azure Speech resource. <code>ai init search</code> Creates or selects an Azure Search resource."},{"location":"reference/cli/init/#examples","title":"Examples","text":"Interactively select or create an Azure AI resource<pre><code>ai init\n</code></pre> Interactively select a resource matching a set of criteria<pre><code>ai init --name \"ai-westus2\" --region westus2\n</code></pre>"},{"location":"reference/cli/chat/","title":"<code>ai chat</code>","text":"<p>The <code>ai chat</code> command initiates interactive or non-interactive conversations with an AI language model (e.g. OpenAI's GPT4).</p>"},{"location":"reference/cli/chat/#usage","title":"Usage","text":"<pre><code>ai chat [...]\nai chat &lt;sub-command&gt; [...]\n</code></pre>"},{"location":"reference/cli/chat/#options","title":"Options","text":"Option Description <code>--deployment DEPLOYMENT</code> Specifies the deployment to use. <code>--endpoint ENDPOINT</code> Specifies the endpoint to use. <code>--key KEY</code> Specifies the key to use. <code>--interactive</code> Specifies whether the chat is interactive. <code>--system PROMPT</code> Specifies the system prompt to use. <code>--user MESSAGE</code> Specifies the user message to use. <code>--chat-history FILE</code> Specifies the chat history file to use. <code>--assistant-id ID</code> Specifies the assistant ID to use. <code>--thread-id ID</code> Specifies the thread ID to use. <code>--index-name INDEX</code> Specifies the index name to use. <code>--search-endpoint ENDPOINT</code> Specifies the search endpoint to use. <code>--search-api-key KEY</code> Specifies the search API key to use. <code>--built-in-functions TRUE</code> Specifies whether to use built-in functions. <code>--custom-functions PATTERN</code> Specifies the custom functions pattern to use. <code>--temperature TEMPERATURE</code> Specifies the temperature to use. <code>--max-tokens MAX_TOKENS</code> Specifies the maximum tokens to use. <code>--top-p TOP_P</code> Specifies the top-p to use. <code>--n N</code> Specifies the n to use. <code>--output-answer</code> Specifies the output answer file to use. <code>--output-chat-history</code> Specifies the output chat history file to use. <code>--input-chat-history</code> Specifies the input chat history file to use. <code>--model</code> Specifies the GitHub model to use."},{"location":"reference/cli/chat/#sub-commands","title":"Sub-Commands","text":"Sub-Command Description ai chat assistant Initiates an assistant with specific configurations (e.g., vector store-based solutions)."},{"location":"reference/cli/chat/#examples","title":"Examples","text":"Initialize OpenAI and start an interactive session<pre><code>ai init openai\nai chat --interactive\n</code></pre> Send a user message to the AI<pre><code>ai chat --user \"What can you do?\"\n</code></pre> _Send a user message with a specific temperature_<pre><code>ai chat --user \"Tell me a joke.\" --temperature 0.7\n</code></pre>"},{"location":"reference/cli/chat/assistant/","title":"<code>ai chat assistant</code>","text":"<p>The <code>ai chat assistant</code> commands manage OpenAI Assistants and related resources.</p>"},{"location":"reference/cli/chat/assistant/#usage","title":"Usage","text":"<pre><code>ai chat assistant &lt;command&gt;\n</code></pre>"},{"location":"reference/cli/chat/assistant/#sub-commands","title":"Sub-Commands","text":"Sub-Command Description ai chat assistant create Create a new OpenAI Assistant ai chat assistant delete Delete an existing OpenAI Assistant ai chat assistant get Get details of a specific OpenAI Assistant ai chat assistant list List all OpenAI Assistants ai chat assistant update Update an existing OpenAI Assistant ai chat assistant file Manage OpenAI Assistant files ai chat assistant vector-store Manage OpenAI Assistant Vector Stores"},{"location":"reference/cli/chat/assistant/create/","title":"<code>ai chat assistant create</code>","text":""},{"location":"reference/cli/chat/assistant/create/#usage","title":"Usage","text":"<pre><code>ai chat assistant create [...]\n</code></pre>"},{"location":"reference/cli/chat/assistant/create/#options","title":"Options","text":"Option Description <code>--endpoint ENDPOINT</code> The endpoint to connect to. <code>--key KEY</code> The key to use for authentication. <code>--name NAME</code> The name of the assistant. <code>--deployment DEPLOYMENT</code> The deployment to use. <code>--instructions INSTRUCTIONS</code> Instructions for the assistant. <code>--file FILE</code> File to include in the assistant. <code>--files FILE1 [...]</code> Multiple files to include in the assistant. <code>--file-id ID</code> File ID to include in the assistant. <code>--file-ids ID1 [...]</code> Multiple file IDs to include in the assistant. <code>--file-search TRUE/FALSE</code> Enable or disable file search. <code>--code-interpreter TRUE/FALSE</code> Enable or disable code interpreter. <code>--output-id @@FILE</code> Output ID specified in the file. <code>--output-name @@FILE</code> Output name specified in the file. <code>--output-add-id @@FILE</code> Add output ID from the file. <code>--output-add-name @@FILE</code> Add output name from the file."},{"location":"reference/cli/chat/assistant/create/#examples","title":"Examples","text":"Create an assistant with a name and instructions<pre><code>ai chat assistant create --name \"My Assistant\" --instructions \"You are a helpful Assistant.\"\n</code></pre> Create an assistant with files<pre><code>ai chat assistant create --name \"My Assistant 2\" --instructions \"You are a helpful Assistant.\" --files \"**/*.md\"\n</code></pre>"},{"location":"reference/cli/chat/assistant/delete/","title":"<code>ai chat assistant delete</code>","text":"<p>The <code>ai chat assistant delete</code> command deletes an existing OpenAI Assistant.</p>"},{"location":"reference/cli/chat/assistant/delete/#usage","title":"Usage","text":"<pre><code>ai chat assistant delete [...]\n</code></pre>"},{"location":"reference/cli/chat/assistant/delete/#options","title":"Options","text":"Option Description <code>--endpoint</code> Specify the endpoint <code>--key</code> Specify the key <code>--id</code> Specify the ID of the assistant to delete"},{"location":"reference/cli/chat/assistant/delete/#example","title":"Example","text":"Deleting an existing OpenAI Assistant<pre><code>ai chat assistant delete --id asst_UM1L8Z0yZzGCJoD5mgQYByeZ\n</code></pre>"},{"location":"reference/cli/chat/assistant/get/","title":"<code>ai chat assistant get</code>","text":"<p>The <code>ai chat assistant get</code> command deletes an existing OpenAI Assistant.</p>"},{"location":"reference/cli/chat/assistant/get/#usage","title":"Usage","text":"<pre><code>ai chat assistant get [...]\n</code></pre>"},{"location":"reference/cli/chat/assistant/get/#connection","title":"Connection","text":"Option Description <code>--endpoint</code> Specify the endpoint for the AI service. <code>--key</code> Specify the key for accessing the AI service."},{"location":"reference/cli/chat/assistant/get/#get","title":"Get","text":"Option Description <code>--id</code> Specify the ID of the assistant to retrieve."},{"location":"reference/cli/chat/assistant/get/#example","title":"Example","text":"Example: Get an OpenAI Assistant by ID<pre><code>ai chat assistant get --id asst_UM1L8Z0yZzGCJoD5mgQYByeZ\n</code></pre>"},{"location":"reference/cli/chat/assistant/list/","title":"<code>ai chat assistant list</code>","text":"<p>The <code>ai chat assistant list</code> command lists OpenAI Assistants.</p>"},{"location":"reference/cli/chat/assistant/list/#usage","title":"Usage","text":"<pre><code>ai chat assistant list [...]\n</code></pre>"},{"location":"reference/cli/chat/assistant/list/#options","title":"Options","text":"Option Description <code>--endpoint ENDPOINT</code> Specify the endpoint to connect to OpenAI. <code>--key KEY</code> Provide the API key for authentication. <code>--output-ids @@FILE</code> Output the assistant IDs to the specified file. <code>--output-names @@FILE</code> Output the assistant names to the specified file. <code>--output-add-id @@FILE</code> Append the assistant ID to the specified file. <code>--output-add-name @@FILE</code> Append the assistant name to the specified file."},{"location":"reference/cli/chat/assistant/list/#examples","title":"Examples","text":"List all OpenAI Assistants<pre><code>ai chat assistant list\n</code></pre>"},{"location":"reference/cli/chat/assistant/update/","title":"<code>ai chat assistant update</code>","text":"<p>The <code>ai chat assistant update</code> command updates an existing OpenAI Assistant.</p>"},{"location":"reference/cli/chat/assistant/update/#usage","title":"Usage","text":"<pre><code>ai chat assistant update [...]\n</code></pre>"},{"location":"reference/cli/chat/assistant/update/#options","title":"Options","text":"Option Description <code>--endpoint</code> The endpoint of the Azure OpenAI resource. <code>--key</code> The key for the Azure OpenAI resource. <code>--name</code> The name of the assistant. <code>--deployment</code> The deployment identifier for the assistant. <code>--instructions</code> Instructions to be updated for the assistant. <code>--file</code> The file to update. <code>--files</code> Multiple files to update. <code>--file-id</code> The ID of the file to update. <code>--file-ids</code> The IDs of multiple files to update. <code>--file-search</code> Enable or disable file searching (TRUE/FALSE). <code>--code-interpreter</code> Enable or disable the code interpreter tool (TRUE/FALSE)."},{"location":"reference/cli/chat/assistant/update/#examples","title":"Examples","text":"Update assistant instructions<pre><code>ai chat assistant update --instructions \"You answer questions about C# code\"\n</code></pre> Update assistant with multiple C# files<pre><code>ai chat assistant update --files \"**/*.cs\"\n</code></pre>"},{"location":"reference/cli/chat/assistant/file/","title":"<code>ai chat assistant file</code>","text":"<p>The <code>ai chat assistant file</code> commands manage OpenAI Assistant files. These commands provide functionality to upload, delete, and list the assistant files.</p>"},{"location":"reference/cli/chat/assistant/file/#usage","title":"Usage","text":"<pre><code>ai chat assistant file [command] [options]\n</code></pre>"},{"location":"reference/cli/chat/assistant/file/#commands","title":"Commands","text":"Command Description ai chat assistant file delete Deletes an OpenAI Assistant file. ai chat assistant file list Lists OpenAI Assistant files. ai chat assistant file upload Uploads a new OpenAI Assistant file."},{"location":"reference/cli/chat/assistant/file/#examples","title":"Examples","text":"Upload an assistant file<pre><code>ai chat assistant file upload --file README.md\n</code></pre> Upload multiple assistant files<pre><code>ai chat assistant file upload --files **/*.md\n</code></pre> List all assistant files<pre><code>ai chat assistant file list\n</code></pre> Delete an assistant file<pre><code>ai chat assistant file delete --id assistant-rWdFtg0oCGtlZFZzZGC3rGhQ\n</code></pre>"},{"location":"reference/cli/chat/assistant/file/delete/","title":"<code>ai chat assistant file delete</code>","text":"<p>The <code>ai chat assistant file delete</code> command deletes an OpenAI Assistant file.</p>"},{"location":"reference/cli/chat/assistant/file/delete/#usage","title":"Usage","text":"<pre><code>ai chat assistant file delete [...]\n</code></pre>"},{"location":"reference/cli/chat/assistant/file/delete/#options","title":"Options","text":"Option Description <code>--endpoint ENDPOINT</code> Specifies the endpoint to use. <code>--key KEY</code> Specifies the key to use. <code>--id ID</code> Specifies the id of the file to delete."},{"location":"reference/cli/chat/assistant/file/delete/#example","title":"Example","text":"Deleting a file using its ID<pre><code>ai chat assistant file delete --id assistant-rWdFtg0oCGtlZFZzZGC3rGhQ\n</code></pre>"},{"location":"reference/cli/chat/assistant/file/list/","title":"<code>ai chat assistant file list</code>","text":"<p>The <code>ai chat assistant file list</code> command lists OpenAI Assistant files.</p>"},{"location":"reference/cli/chat/assistant/file/list/#usage","title":"Usage","text":"<pre><code>ai chat assistant file list [OPTIONS]\n</code></pre>"},{"location":"reference/cli/chat/assistant/file/list/#options","title":"Options","text":"Option Description <code>--endpoint ENDPOINT</code> Specifies the endpoint <code>--key KEY</code> Specifies the key <code>--output-ids FILE</code> Output file for file IDs <code>--output-names FILE</code> Output file for file names <code>--output-add-id FILE</code> Output file for additional file IDs <code>--output-add-name FILE</code> Output file for additional file names"},{"location":"reference/cli/chat/assistant/file/list/#example","title":"Example","text":"List OpenAI Assistant files<pre><code>ai chat assistant file list\n</code></pre>"},{"location":"reference/cli/chat/assistant/file/upload/","title":"<code>ai chat assistant file upload</code>","text":"<p>The <code>ai chat assistant file upload</code> command uploads a new OpenAI Assistant file.</p>"},{"location":"reference/cli/chat/assistant/file/upload/#usage","title":"Usage","text":"<pre><code>ai chat assistant file upload [...]\n</code></pre>"},{"location":"reference/cli/chat/assistant/file/upload/#options","title":"Options","text":"Option Description <code>--endpoint</code> Specifies the endpoint to use. <code>--key</code> Specifies the key to use. <code>--file</code> Specifies a file to upload. <code>--files</code> Specifies multiple files to upload. <code>--output-id</code> Outputs the ID of the uploaded file. <code>--output-name</code> Outputs the name of the uploaded file. <code>--output-add-id</code> Adds the ID of the uploaded file to a specified file. <code>--output-add-name</code> Adds the name of the uploaded file to a specified file."},{"location":"reference/cli/chat/assistant/file/upload/#examples","title":"Examples","text":"Upload a single file<pre><code>ai chat assistant file upload --file README.md\n</code></pre> Upload multiple files<pre><code>ai chat assistant file upload --files **/*.md\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/","title":"<code>ai chat assistant vector-store</code>","text":"<p>The <code>ai chat assistant vector-store</code> commands manage OpenAI Assistant Vector Stores.</p>"},{"location":"reference/cli/chat/assistant/vector-store/#usage","title":"Usage","text":"<pre><code>ai chat assistant vector-store [command]\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/#sub-commands","title":"Sub-commands","text":"Sub-command Description ai chat assistant vector-store create Creates a new OpenAI Assistant Vector Store ai chat assistant vector-store delete Deletes an existing OpenAI Assistant Vector Store ai chat assistant vector-store get Gets an existing OpenAI Assistant Vector Store ai chat assistant vector-store list Lists OpenAI Assistant Vector Stores ai chat assistant vector-store update Updates an OpenAI Assistant Vector Store"},{"location":"reference/cli/chat/assistant/vector-store/#examples","title":"Examples","text":"Create a new Vector Store<pre><code>ai chat assistant vector-store create --name \"My Vector Store\" --files \"**/*.md\"\n</code></pre> Update an existing Vector Store<pre><code>ai chat assistant vector-store update --name \"My Vector Store\" --files \"**/*.md\"\n</code></pre> Delete an existing Vector Store<pre><code>ai chat assistant vector-store delete --id vs_xdAyb8HQsXRKnqCFPCTvwCYa\n</code></pre> List all Vector Stores<pre><code>ai chat assistant vector-store list\n</code></pre> Get a specific Vector Store<pre><code>ai chat assistant vector-store get --id vs_xdAyb8HQsXRKnqCFPCTvwCYa\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/create/","title":"<code>ai chat assistant vector-store create</code>","text":"<p>The <code>ai chat assistant vector-store create</code> command creates a new OpenAI Assistant Vector Store.</p>"},{"location":"reference/cli/chat/assistant/vector-store/create/#usage","title":"Usage","text":"<pre><code>ai chat assistant vector-store create [OPTIONS]\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/create/#options","title":"Options","text":"Option Description <code>--endpoint</code> ENDPOINT URL of the endpoint to connect to. <code>--key</code> KEY API key for authentication. <code>--file</code> FILE Path to a single file to include in the vector store. <code>--files</code> FILE1 [...] Paths to multiple files to include in the vector store. <code>--file-id</code> ID ID of a single file to include in the vector store. <code>--file-ids</code> ID1 [...] IDs of multiple files to include in the vector store. <code>--name</code> NAME Name of the vector store to be created. <code>--output-id</code> @@FILE Output ID information to the specified file. <code>--output-name</code> @@FILE Output name information to the specified file. <code>--output-add-id</code> @@FILE Append ID information to the specified file. <code>--output-add-name</code> @@FILE Append name information to the specified file."},{"location":"reference/cli/chat/assistant/vector-store/create/#example","title":"Example","text":"Create a Vector Store with multiple files<pre><code>ai chat assistant vector-store create --name \"My Vector Store\" --files \"**/*.md\"\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/delete/","title":"<code>ai chat assistant vector-store delete</code>","text":"<p>The <code>ai chat assistant vector-store delete</code> command deletes an existing OpenAI Assistant Vector Store.</p>"},{"location":"reference/cli/chat/assistant/vector-store/delete/#usage","title":"Usage","text":"<pre><code>ai chat assistant vector-store delete [...]\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/delete/#options","title":"Options","text":"Option Description <code>--endpoint</code> The endpoint to use for the request <code>--key</code> The key to use for the request <code>--id</code> The ID of the vector store to delete"},{"location":"reference/cli/chat/assistant/vector-store/delete/#examples","title":"Examples","text":"Delete a vector store with a specific ID<pre><code>ai chat assistant vector-store delete --id vs_xdAyb8HQsXRKnqCFPCTvwCYa\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/get/","title":"<code>ai chat assistant vector-store get</code>","text":"<p>The <code>ai chat assistant vector-store get</code> command retrieves an existing OpenAI Assistant Vector Store.</p>"},{"location":"reference/cli/chat/assistant/vector-store/get/#usage","title":"Usage","text":"<pre><code>ai chat assistant vector-store get --id &lt;vector-store-id&gt;\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/get/#options","title":"Options","text":"Option Description <code>--endpoint ENDPOINT</code> Specifies the endpoint to use. <code>--key KEY</code> Specifies the key to use. <code>--id ID</code> Specifies the ID of the vector store you wish to retrieve."},{"location":"reference/cli/chat/assistant/vector-store/get/#example","title":"Example","text":"Retrieving a Vector Store by ID<pre><code>ai chat assistant vector-store get --id vs_xdAyb8HQsXRKnqCFPCTvwCYa\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/list/","title":"<code>ai chat assistant vector store list</code>","text":"<p>The <code>ai chat assistant vector store list</code> command is used to list the vector stores available for the AI chat assistant.</p>"},{"location":"reference/cli/chat/assistant/vector-store/list/#usage","title":"Usage","text":"<pre><code>ai chat assistant vector store list\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/list/#options","title":"Options","text":"<p>This command does not take any options or arguments.</p>"},{"location":"reference/cli/chat/assistant/vector-store/list/#examples","title":"Examples","text":"List available vector stores<pre><code>ai chat assistant vector store list\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/update/","title":"<code>ai chat assistant vector store update</code>","text":"<p>The <code>ai chat assistant vector store update</code> command updates the vector store used by the chat assistant.</p>"},{"location":"reference/cli/chat/assistant/vector-store/update/#usage","title":"Usage","text":"<pre><code>ai chat assistant vector store update [OPTIONS]\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/update/#options","title":"Options","text":"Option Description <code>--store NAME</code> Specifies the name of the vector store to update. <code>--file PATH</code> Specifies the file containing vectors to update the store with."},{"location":"reference/cli/chat/assistant/vector-store/update/#examples","title":"Examples","text":"Update the vector store with a file<pre><code>ai chat assistant vector store update --store myVectorStore --file /path/to/vectors.json\n</code></pre> Update the vector store with another file<pre><code>ai chat assistant vector store update --store anotherVectorStore --file /path/to/another_vectors.json\n</code></pre>"},{"location":"reference/cli/chat/assistant/vector-store/update/#remarks","title":"Remarks","text":"<p>This command is used to keep the vector store up to date with new vectors for the chat assistant to use.</p>"},{"location":"reference/cli/dev/","title":"<code>ai dev</code>","text":"<p>The <code>ai dev</code> command in the Azure AI CLI provides a set of sub-commands to get started with templates and configuration settings.</p>"},{"location":"reference/cli/dev/#usage","title":"Usage","text":"<pre><code>ai dev &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/dev/#commands","title":"Commands","text":"Command Description ai dev new Creates or lists available templates. The available templates include quickstart sample code and helper functions. ai dev shell Creates a fast path to providing configuration data (such as keys and endpoints) to a new shell (such as <code>cmd.exe</code> or <code>/bin/bash</code>) or to a specified command to run via environment variables."},{"location":"reference/cli/dev/#examples","title":"Examples","text":"Create a new template<pre><code>ai dev new openai-chat --language Python\n</code></pre> Open a new shell populated with environment variables<pre><code>ai dev shell\n</code></pre> Run a specific program with its environment populated<pre><code>ai dev shell --run \"python myApp.py\"\n</code></pre>"},{"location":"reference/cli/dev/shell/","title":"<code>ai dev shell</code>","text":"<p>The <code>ai dev shell</code> command provides a fast way to create configuration data (keys, endpoints, etc.) and supply them to a new shell (e.g., <code>cmd.exe</code> or <code>/bin/bash</code>), or to a specific command, via environment variables.</p>"},{"location":"reference/cli/dev/shell/#usage","title":"Usage","text":"<pre><code>ai dev shell [OPTIONS] --run COMMAND\n</code></pre>"},{"location":"reference/cli/dev/shell/#options","title":"Options","text":"Option Description <code>--run COMMAND</code> Runs a specific program with its environment populated."},{"location":"reference/cli/dev/shell/#examples","title":"Examples","text":"Opens a new shell populated with environment variables<pre><code>ai dev shell\n</code></pre> Runs a specific program with its environment populated<pre><code>ai dev shell --run \"dotnet run\"\n</code></pre>"},{"location":"reference/cli/dev/new/","title":"<code>ai dev new</code>","text":"<p>The <code>ai dev new</code> command creates or lists available templates.</p>"},{"location":"reference/cli/dev/new/#usage","title":"Usage","text":"<pre><code>ai dev new TEMPLATE_NAME [...]\n</code></pre>"},{"location":"reference/cli/dev/new/#options","title":"Options","text":"Option Description <code>--language LANGUAGE</code> Specifies the language for the new template. <code>--csharp</code> Alias for <code>--language csharp</code>. <code>--go</code> Alias for <code>--language go</code>. <code>--java</code> Alias for <code>--language java</code>. <code>--javascript</code> Alias for <code>--language javascript</code>. <code>--python</code> Alias for <code>--language python</code>. <code>--instructions \"INSTRUCTIONS\"</code> Specifies the instructions for the template. Not all templates support this option."},{"location":"reference/cli/dev/new/#sub-commands","title":"Sub-commands","text":"Sub-command Description list Lists available templates."},{"location":"reference/cli/dev/new/#examples","title":"Examples","text":"Create an .env file containing Azure AI service settings<pre><code>ai dev new .env\n</code></pre> Why create an <code>.env</code> file? <p>To connect your code to the Azure resources, you need environment variables that the Azure AI SDK can use. You might be used to creating environment variables manually, which is much tedious work. The Azure AI CLI saves you time.</p> <p>You can create a new <code>.env</code> file by running the <code>ai dev new</code> command with the <code>.env</code> template name. The <code>.env</code> file contains environment variables for resources and services that you set up with the ai init or ai config commands.</p> <p>[!WARNING] If you already have an <code>.env</code> file in your working directory, running this command will overwrite the existing file with settings from the local AI CLI configuration datastore.</p> Output <pre><code>.env (saved at 'C:\\dev\\ai-gen-sdk')\n</code></pre> <p>The <code>.env</code> file is created with the following content:</p> <pre><code>AZURE_AI_PROJECT_NAME = contoso-outdoor-proj\nAZURE_AI_SEARCH_ENDPOINT = https://contoso-outdoor-proj-search.search.windows.net\nAZURE_AI_SEARCH_INDEX_NAME = product-info\nAZURE_AI_SEARCH_KEY = YourAzureAISearchKey\nAZURE_AI_SPEECH_ENDPOINT = https://ai-contosoaihub-aiservices-1891736009.cognitiveservices.azure.com/\nAZURE_AI_SPEECH_KEY = 8c0a****************************\nAZURE_AI_SPEECH_REGION = eastus2\nAZURE_COGNITIVE_SEARCH_KEY = YourAzureAISearchKey\nAZURE_COGNITIVE_SEARCH_TARGET = https://contoso-outdoor-proj-search.search.windows.net\nAZURE_OPENAI_API_KEY = 8c0a****************************\nAZURE_OPENAI_API_VERSION = 2023-12-01-preview\nAZURE_OPENAI_CHAT_DEPLOYMENT = gpt-35-turbo-16k-0613\nAZURE_OPENAI_CHAT_MODEL = gpt-35-turbo-16k\nAZURE_OPENAI_EMBEDDING_DEPLOYMENT = text-embedding-ada-002-2\nAZURE_OPENAI_EMBEDDING_MODEL = text-embedding-ada-002\nAZURE_OPENAI_ENDPOINT = https://ai-contosoaihub-aiservices-1891736009.cognitiveservices.azure.com/\nAZURE_OPENAI_EVALUATION_DEPLOYMENT = gpt-35-turbo-16k-0613\nAZURE_OPENAI_EVALUATION_MODEL = gpt-35-turbo-16k\nAZURE_OPENAI_KEY = 8c0a****************************\nAZURE_RESOURCE_GROUP = rg-contosoaihub\nAZURE_SUBSCRIPTION_ID = YourAzureSubscriptionID\nOPENAI_API_BASE = https://ai-contosoaihub-aiservices-1891736009.cognitiveservices.azure.com/\nOPENAI_API_KEY = 8c0a****************************\nOPENAI_API_TYPE = azure\nOPENAI_API_VERSION = 2023-12-01-preview\n</code></pre> Create a new helper-functions template with instructions<pre><code>ai dev new helper-functions --instructions \"Add helper functions that can retrieve text from a HTTP GET request with a supplied URL.\"\n</code></pre> Create a new openai-chat-streaming template in JavaScript<pre><code>ai dev new openai-chat-streaming --javascript\n</code></pre>"},{"location":"reference/cli/dev/new/list/","title":"<code>ai dev new list</code>","text":"<p>The <code>ai dev new list</code> command lists available templates that can be used with the <code>ai dev new</code> command. These templates include quickstart sample code and helper functions.</p>"},{"location":"reference/cli/dev/new/list/#usage","title":"Usage","text":"<pre><code>ai dev new list [PARTIAL_TEMPLATE_NAME] [...]\n</code></pre>"},{"location":"reference/cli/dev/new/list/#options","title":"Options","text":"Option Description <code>--language LANGUAGE</code> Specifies the language for the new template. <code>--csharp</code> Alias for <code>--language csharp</code>. <code>--go</code> Alias for <code>--language go</code>. <code>--java</code> Alias for <code>--language java</code>. <code>--javascript</code> Alias for <code>--language javascript</code>. <code>--python</code> Alias for <code>--language python</code>."},{"location":"reference/cli/dev/new/list/#examples","title":"Examples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# templates<pre><code>ai dev new list --csharp\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                 Language\n------------------------------------------------------    ---------------------------------------    --------\nEnvironment Variables                                     .env                                               \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                C#      \nHelper Function Class Library                             helper-functions                           C#      \nOpenAI Assistants                                         openai-asst                                C#      \nOpenAI Assistants (Streaming)                             openai-asst-streaming                      C#      \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code            C#      \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search     C#      \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions       C#      \nOpenAI Chat Completions                                   openai-chat                                C#      \nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                      C#      \nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data            C#      \nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions       C#      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                   C#      \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions    C#      \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                          C#      \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                C#      \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions           C#      \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                        C#      \nSpeech-to-text                                            speech-to-text                             C#      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco             C#      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                   C#      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                C#      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation            C#      \nText-to-speech                                            text-to-speech                             C#      \nText-to-speech (w/ File output)                           text-to-speech-with-file                   C#      \n</code></pre> Filter templates by name<pre><code>ai dev new list openai\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nName                                             Short Name                                       Language                        \n---------------------------------------------    ---------------------------------------------    --------------------------------\nOpenAI Assistants                                openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                    openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)          openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)               openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                 openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                        openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)         openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                          openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)              openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)    openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)           openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                              openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)               openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)     openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)      openai-chat-webpage-with-speech-and-functions    TypeScript                      \n</code></pre> Filter templates by name and language<pre><code>ai dev new list openai --javascript\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                             Short Name                                Language  \n---------------------------------------------    --------------------------------------    ----------\nOpenAI Assistants                                openai-asst                               JavaScript\nOpenAI Assistants (Streaming)                    openai-asst-streaming                     JavaScript\nOpenAI Assistants (w/ Code Interpreter)          openai-asst-streaming-with-code           JavaScript\nOpenAI Assistants (w/ File Search)               openai-asst-streaming-with-file-search    JavaScript\nOpenAI Assistants (w/ Functions)                 openai-asst-streaming-with-functions      JavaScript\nOpenAI Assistants Webpage                        openai-asst-webpage                       JavaScript\nOpenAI Assistants Webpage (w/ Functions)         openai-asst-webpage-with-functions        JavaScript\nOpenAI Chat Completions                          openai-chat                               JavaScript\nOpenAI Chat Completions (Streaming)              openai-chat-streaming                     JavaScript\nOpenAI Chat Completions (w/ Data + AI Search)    openai-chat-streaming-with-data           JavaScript\nOpenAI Chat Completions (w/ Functions)           openai-chat-streaming-with-functions      JavaScript\nOpenAI Chat Webpage                              openai-chat-webpage                       JavaScript\nOpenAI Chat Webpage (w/ Functions)               openai-chat-webpage-with-functions        JavaScript\n</code></pre>"},{"location":"reference/cli/search/","title":"<code>ai search command</code>","text":""},{"location":"reference/cli/search/#usage","title":"Usage","text":"<pre><code>ai search &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/search/#sub-commands","title":"Sub-commands","text":"Sub-command Description ai search index create Create a search index. ai search index update Update a search index."},{"location":"reference/cli/search/query/","title":"<code>ai search query</code>","text":"<p>The <code>ai search query</code> command searches an Azure AI Search index for documents that match the specified query.</p> <p>... \ud83d\udea7 UNDER CONSTRUCTION \ud83d\udea7 ...  </p>"},{"location":"reference/cli/search/index/","title":"<code>ai search index</code>","text":"<p>The <code>ai search index</code> commands manage vector indexes used in Retrieval Augmented Generation solutions (aka \"Chat w/ my data\").</p>"},{"location":"reference/cli/search/index/#usage","title":"Usage","text":"<pre><code>ai search index &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/search/index/#sub-commands","title":"Sub-commands","text":"Sub-command Description ai search index create Create a search index. ai search index update Update a search index."},{"location":"reference/cli/search/index/#examples","title":"Examples","text":"Create a search index<pre><code>ai search index create --index-name YourIndexName --files YourFiles --search-api-key YourSearchApiKey --search-endpoint YourSearchEndpoint --group rg-contosoaihub --project contoso-outdoor-proj --subscription YourSubscriptionId\n</code></pre> Update a search index<pre><code>ai search index update --index-name YourIndexName --files YourFiles --search-api-key YourSearchApiKey --search-endpoint YourSearchEndpoint --group rg-contosoaihub --project contoso-outdoor-proj --subscription YourSubscriptionId\n</code></pre>"},{"location":"reference/cli/search/index/create/","title":"<code>ai search index create</code>","text":"<p>The <code>ai search index create</code> command creates a vector index.</p>"},{"location":"reference/cli/search/index/create/#usage","title":"Usage","text":"<pre><code>ai search index create [...]\n</code></pre>"},{"location":"reference/cli/search/index/create/#options","title":"Options","text":"Option Description <code>--subscription SUBSCRIPTION</code> Specifies the Azure subscription. <code>--index-name NAME</code> Specifies the name of the search index. <code>--search-api-key KEY</code> Specifies the search API key. <code>--search-endpoint ENDPOINT</code> Specifies the search endpoint. <code>--data-source-connection NAME</code> Specifies the data source connection. <code>--blob-container ENDPOINT/NAME</code> Specifies the blob container. <code>--indexer-name NAME</code> Specifies the indexer name. <code>--skillset-name NAME</code> Specifies the skillset name. <code>--id-field NAME</code> Specifies the ID field name. <code>--content-field NAME</code> Specifies the content field name. <code>--vector-field NAME</code> Specifies the vector field name. <code>--embedding-deployment DEPLOYMENT</code> Specifies the embedding deployment. <code>--embedding-model MODEL</code> Specifies the embedding model. <code>--file FILE</code> Specifies the file. <code>--files FILES</code> Specifies the files. <code>--external-source</code> Specifies the external source."},{"location":"reference/cli/search/index/create/#examples","title":"Examples","text":"Creates a search index with files from a blob container<pre><code>ai search index create --index-name product-info --files \"*.md\" --blob-container https://crbn.blob.core.windows.net/product-info\n</code></pre>"},{"location":"reference/cli/search/index/update/","title":"<code>ai search index update</code>","text":"<p>The <code>ai search index update</code> command updates a vector index.</p>"},{"location":"reference/cli/search/index/update/#usage","title":"Usage","text":"<pre><code>ai search index update [...]\n</code></pre>"},{"location":"reference/cli/search/index/update/#options","title":"Options","text":"Option Description <code>--subscription SUBSCRIPTION</code> Specifies the Azure subscription. <code>--index-name NAME</code> Specifies the name of the search index. <code>--search-api-key KEY</code> Specifies the search API key. <code>--search-endpoint ENDPOINT</code> Specifies the search endpoint. <code>--data-source-connection NAME</code> Specifies the data source connection. <code>--blob-container ENDPOINT/NAME</code> Specifies the blob container. <code>--indexer-name NAME</code> Specifies the indexer name. <code>--skillset-name NAME</code> Specifies the skillset name. <code>--id-field NAME</code> Specifies the ID field name. <code>--content-field NAME</code> Specifies the content field name. <code>--vector-field NAME</code> Specifies the vector field name. <code>--embedding-deployment DEPLOYMENT</code> Specifies the embedding deployment. <code>--embedding-model MODEL</code> Specifies the embedding model. <code>--file FILE</code> Specifies the file. <code>--files FILES</code> Specifies the files. <code>--external-source</code> Specifies the external source."},{"location":"reference/cli/search/index/update/#examples","title":"Examples","text":"Update a search index with files from a blob container<pre><code>ai search index update --index-name product-info --files \"*.md\" --blob-container https://crbn.blob.core.windows.net/product-info\n</code></pre>"},{"location":"reference/cli/speech/","title":"<code>ai speech</code>","text":""},{"location":"reference/cli/speech/#usage","title":"Usage","text":"<pre><code>ai speech &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/speech/#sub-commands","title":"Sub-Commands","text":"Sub-Command Description ai speech intent Recognize intent from speech. ai speech recognize Recognize speech from an input source. ai speech synthesize Synthesize speech from text. ai speech transcribe Transcribe speech from an input source. ai speech translate Translate speech from one language to another. ai speech batch Manage Azure Speech Service batch operations. ai speech csr Manage Custom Speech Recognition endpoints and datasets. ai speech profile Manage speech profiles for speaker recognition. ai speech speaker Manage speaker identification and verification."},{"location":"reference/cli/speech/#examples","title":"Examples","text":"Recognize speech from an audio file<pre><code>ai speech recognize --file audio.wav\n</code></pre> Synthesize speech from text<pre><code>ai speech synthesize --text \"Hello, world!\" --output audio.wav\n</code></pre> Translate speech from one language to another<pre><code>ai speech translate --input-language en-US --output-language es-ES --file audio.wav\n</code></pre>"},{"location":"reference/cli/speech/intent/","title":"<code>ai speech intent</code>","text":"<p>The <code>ai speech intent</code> command recognizes streaming audio captured from a device microphone or stored in local or remote audio files and returns intent information from that recognition using PATTERNS.</p>"},{"location":"reference/cli/speech/intent/#usage","title":"Usage","text":"<pre><code>ai speech intent [...]\n</code></pre>"},{"location":"reference/cli/speech/intent/#options","title":"Options","text":"Option Description <code>--key KEY</code> Subscription key for the Azure Speech Service. <code>--region REGION</code> Region for the Azure Speech Service. <code>--pattern PATTERN</code> Simple pattern to use for recognizing intents. <code>--pattern INTENTID=PATTERN</code> Associate a pattern with a specific intent ID. <code>--patterns PATTERN1;PATTERN2</code> Use multiple patterns for recognizing intents. <code>--patterns @PATTERNS.txt</code> Use patterns listed in a text file. <code>--microphone</code> Use the device microphone as the input source. <code>--file FILE</code> Use a local audio file as the input source. <code>--files PATTERN</code> Use multiple local audio files as input sources. <code>--files @FILELIST.txt</code> Use audio files listed in a text file as input sources. <code>--format FORMAT</code> Specify the audio format (e.g., wav, mp3). <code>--once[+]</code> Perform a single recognition for the input source (with optional repetition). <code>--continuous</code> Perform continuous recognition for the input source. <code>--keyword FILENAME</code> Perform recognition based on a keyword detected in the audio. <code>--language LANGUAGE</code> Specify the language of the input audio (e.g., en-US). <code>--log FILENAME</code> Save the recognition log to a file. <code>--proxy HOSTNAME</code> Use a proxy server for the recognition. <code>--foreach in @ITEMS.txt</code> Iterate the recognition over multiple items listed in a text file. <code>--threads NUMBER</code> Specify the number of threads to use for parallel processing."},{"location":"reference/cli/speech/intent/#examples","title":"Examples","text":"Recognize intent from a local audio file using a simple pattern<pre><code>ai speech intent --file audio.wav --pattern \"What's the weather like?\"\n</code></pre> Recognize intents from multiple audio files using patterns<pre><code>ai speech intent --files *.wav --patterns \"turn on the light\";\"turn off the light\"\n</code></pre> Recognize intents from audio files listed in a file using patterns from another file<pre><code>ai speech intent --files @audiofiles.txt --patterns @patterns.txt\n</code></pre> Perform continuous intent recognition from the microphone input<pre><code>ai speech intent --microphone --continuous\n</code></pre>"},{"location":"reference/cli/speech/recognize/","title":"<code>ai speech recognize</code>","text":"<p>The <code>ai speech recognize</code> command recognizes streaming audio captured from a device microphone or stored in local or remote audio files.</p>"},{"location":"reference/cli/speech/recognize/#usage","title":"Usage","text":"<pre><code>ai speech recognize [...]\n</code></pre>"},{"location":"reference/cli/speech/recognize/#options","title":"Options","text":"Option Description <code>--key KEY</code> API key for the Azure Speech service resource. <code>--region REGION</code> Azure region where the service resource is deployed. <code>--language LANGUAGE</code> The language to use for speech recognition. <code>--languages LANG1;LANG2...</code> Semicolon-separated list of languages for recognition. <code>--microphone</code> Use device microphone for audio input. <code>--file FILE</code> Recognize speech from a local audio file. <code>--files PATTERN</code> Recognize speech from multiple local audio files matching pattern. <code>--files @FILELIST.txt</code> Recognize speech from a list of local audio files. <code>--format FORMAT</code> Specify audio format. <code>--once[+]</code> Perform single-turn speech recognition (set flag with <code>+</code>). <code>--continuous</code> Perform continuous speech recognition. <code>--keyword FILENAME</code> Specify a file containing a keyword for recognition. <code>--log FILENAME</code> Save recognition log to a file. <code>--proxy HOSTNAME</code> Use a proxy server for the recognition service. <code>--phrases @PHRASELIST.txt</code> Use a list of custom phrases to improve recognition accuracy. <code>--foreach in @ITEMS.txt</code> Recognize speech for each audio input listed in the provided file. <code>--threads NUMBER</code> Specify the number of threads to use for processing. <code>--output-srt FILE</code> Save recognition captions to a file in SRT format. <code>--output-vtt FILE</code> Save recognition captions to a file in VTT format."},{"location":"reference/cli/speech/recognize/#examples","title":"Examples","text":"Recognize speech from a local audio file<pre><code>ai speech recognize --file myaudio.wav --key myapikey --region westus\n</code></pre> Perform continuous speech recognition using a microphone<pre><code>ai speech recognize --microphone --continuous --key myapikey --region westus\n</code></pre> Recognize speech from multiple local audio files<pre><code>ai speech recognize --files \"*.wav\" --key myapikey --region westus\n</code></pre> Recognize speech with custom phrases to improve accuracy<pre><code>ai speech recognize --file myaudio.wav --key myapikey --region westus --phrases @phrases.txt\n</code></pre>"},{"location":"reference/cli/speech/synthesize/","title":"<code>ai speech synthesize</code>","text":"<p>The <code>ai speech synthesize</code> command synthesizes audio from text or SSML and renders it to the local device's speakers or writes it into local audio files.</p>"},{"location":"reference/cli/speech/synthesize/#usage","title":"Usage","text":"<pre><code>ai speech synthesize [...]\n</code></pre>"},{"location":"reference/cli/speech/synthesize/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specifies the API key for authentication. <code>--region REGION</code> Specifies the region of the service. <code>--voice NAME</code> Specifies the name of the voice to use. <code>--voices</code> Lists available voices. <code>--interactive</code> Enables interactive mode for input. <code>--text TEXT</code> Specifies the text to synthesize. <code>--ssml SSML</code> Specifies the SSML content to synthesize. <code>--file FILE</code> Specifies a file containing text or SSML to synthesize. <code>--files PATTERN</code> Specifies a pattern to match multiple files to synthesize. <code>--files @FILELIST.txt</code> Specifies a file containing a list of files to synthesize. <code>--format FORMAT</code> Specifies the audio format for the output. <code>--speakers</code> Renders the synthesized audio to the local speakers. <code>--audio-output FILENAME</code> Specifies the file to write the audio output to. <code>--log FILENAME</code> Specifies a file to log the synthesis process. <code>--proxy HOSTNAME</code> Specifies a proxy to use for the request. <code>--foreach in @ITEMS.txt</code> Executes the command for each item listed in a file. <code>--threads NUMBER</code> Specifies the number of threads to use for synthesis."},{"location":"reference/cli/speech/synthesize/#examples","title":"Examples","text":"Synthesize text to speakers<pre><code>ai speech synthesize --text \"Hello world\" --speakers\n</code></pre> Synthesize text to an audio file<pre><code>ai speech synthesize --text \"Hello world\" --audio-output output hello_world.wav\n</code></pre>"},{"location":"reference/cli/speech/transcribe/","title":"<code>ai speech transcribe</code>","text":"<p>Transcribe audio files using Azure speech services.</p>"},{"location":"reference/cli/speech/transcribe/#usage","title":"Usage","text":"<pre><code>ai speech transcribe [options]\n</code></pre>"},{"location":"reference/cli/speech/transcribe/#options","title":"Options","text":"Option Description <code>--input</code> Path to the input audio file. <code>--locale</code> Locale of the input audio (e.g., en-US). <code>--output</code> Path to save the transcription result."},{"location":"reference/cli/speech/transcribe/#examples","title":"Examples","text":"Transcribe an audio file<pre><code>ai speech transcribe --input audiofile.wav --locale en-US --output transcription.txt\n</code></pre>"},{"location":"reference/cli/speech/translate/","title":"<code>ai speech translate</code>","text":"<p>The <code>ai speech translate</code> command translates streaming audio captured from a device microphone or stored in local or remote audio files into one or more languages.</p>"},{"location":"reference/cli/speech/translate/#usage","title":"Usage","text":"<pre><code>ai speech translate [...]\n</code></pre>"},{"location":"reference/cli/speech/translate/#options","title":"Options","text":"Option Description <code>--key</code> The subscription key for the Azure Speech service. <code>--region</code> The region where your Azure Speech service is deployed. <code>--source</code> The source language of the audio. <code>--target</code> The target language for translation. <code>--microphone</code> Capture audio from the device microphone. <code>--file</code> Translate audio from a local file. <code>--files</code> Translate audio from multiple local files matching a pattern or listed in a file. <code>--format</code> The format of the input audio files. <code>--once</code> Perform a single translation. <code>--continuous</code> Perform continuous translation. <code>--keyword</code> Specify a keyword to start the translation. <code>--log</code> Specify a filename to log the translation. <code>--proxy</code> Specify a proxy hostname. <code>--phrases</code> Specify a file containing phrases to improve translation accuracy. <code>--foreach</code> Perform translation for each item in a specified file. <code>--threads</code> Number of threads to use for the translation."},{"location":"reference/cli/speech/translate/#examples","title":"Examples","text":"Translate audio from the microphone<pre><code>ai speech translate --microphone --source en-US --target es-ES\n</code></pre> Translate audio from a file<pre><code>ai speech translate --file audio.wav --source en-US --target fr-FR\n</code></pre> Continuous translation from the microphone<pre><code>ai speech translate --microphone --source en-US --target de-DE --continuous\n</code></pre>"},{"location":"reference/cli/speech/batch/","title":"<code>ai speech batch</code>","text":"<p>The <code>ai speech batch</code> command manages Azure Speech Service batch operations.</p>"},{"location":"reference/cli/speech/batch/#usage","title":"Usage","text":"<pre><code>ai speech batch &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/#sub-commands","title":"Sub-commands","text":"Sub-command Description ai speech batch transcription create Creates new requests to transcribe remote audio streams ai speech batch transcription delete Deletes an existing batch transcription that has already completed ai speech batch transcription download Downloads files from batch transcriptions that have already completed ai speech batch transcription list Lists details about existing batch transcriptions ai speech batch transcription status Checks the status of existing batch transcriptions, providing additional details"},{"location":"reference/cli/speech/batch/#examples","title":"Examples","text":"Create a batch transcription<pre><code>ai speech batch transcription create --name \"transcription1\" --model \"&lt;model_url&gt;\" --content \"&lt;content_url&gt;\" --language \"en-US\"\n</code></pre> Delete a batch transcription<pre><code>ai speech batch transcription delete --transcription \"&lt;transcription_url&gt;\"\n</code></pre> Download transcription file<pre><code>ai speech batch transcription download --file \"&lt;file_url&gt;\" --output \"&lt;output_filename&gt;\"\n</code></pre> List batch transcriptions<pre><code>ai speech batch transcription list --transcriptions\n</code></pre> Check transcription status<pre><code>ai speech batch transcription status --transcription \"&lt;transcription_url&gt;\"\n</code></pre>"},{"location":"reference/cli/speech/batch/download/","title":"<code>ai speech batch download</code>","text":"<p>The <code>ai speech batch download</code> command downloads files from Azure Speech Service batch operations.</p>"},{"location":"reference/cli/speech/batch/download/#usage","title":"Usage","text":"<pre><code>ai speech batch download [options]\n</code></pre>"},{"location":"reference/cli/speech/batch/download/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key for the Azure region. <code>--region REGION</code> The Azure region for the service. <code>--file URL</code> The URL of the file to download. <code>--output file FILENAME</code> The name of the output file."},{"location":"reference/cli/speech/batch/download/#examples","title":"Examples","text":"Download a file from Azure Speech Service batch operations<pre><code>ai speech batch download --key YOUR_API_KEY --region YOUR_REGION --file FILE_URL --output file OUTPUT_FILENAME\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/","title":"<code>ai speech batch transcription</code>","text":""},{"location":"reference/cli/speech/batch/transcription/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription [command]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/#sub-commands","title":"Sub-commands","text":"Sub-command Description ai speech batch transcription create Creates new requests to transcribe remote audio streams ai speech batch transcription delete Deletes an existing batch transcription that has already completed ai speech batch transcription download Downloads files from batch transcriptions that have already completed ai speech batch transcription list Lists details about existing batch transcriptions ai speech batch transcription status Checks the status of existing batch transcriptions, providing additional details"},{"location":"reference/cli/speech/batch/transcription/#examples","title":"Examples","text":"Create a batch transcription<pre><code>ai speech batch transcription create --name \"transcription1\" --model \"&lt;model_url&gt;\" --content \"&lt;content_url&gt;\" --language \"en-US\"\n</code></pre> Delete a batch transcription<pre><code>ai speech batch transcription delete --transcription \"&lt;transcription_url&gt;\"\n</code></pre> Download transcription file<pre><code>ai speech batch transcription download --file \"&lt;file_url&gt;\" --output \"&lt;output_filename&gt;\"\n</code></pre> List batch transcriptions<pre><code>ai speech batch transcription list --transcriptions\n</code></pre> Check transcription status<pre><code>ai speech batch transcription status --transcription \"&lt;transcription_url&gt;\"\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/create/","title":"<code>ai speech batch transcription create</code>","text":"<p>The <code>ai speech batch transcription create</code> command creates new requests to transcribe remote audio streams.</p>"},{"location":"reference/cli/speech/batch/transcription/create/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription create [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/create/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specifies the subscription key to use for authentication. <code>--region REGION</code> Specifies the region for the speech resource. <code>--name NAME</code> Specifies the display name of the transcription. <code>--model URL</code> Specifies the custom speech model to use to transcribe the content. <code>--content URL</code> Specifies the content to be transcribed, referring to audio data stored remotely at URLs. <code>--content @URLs.txt</code> Specifies the content using a text file containing one or more URLs. <code>--language LANGUAGE</code> Specifies a single spoken language in BCP-47 format. Defaults to <code>en-US</code> if not specified. <code>--threads NUMBER</code> Specifies the maximum number of threads to use when parallelizing tasks. <code>--processes NUMBER</code> Specifies the maximum number of sub-processes to use when parallelizing tasks. <code>--project URL</code> Specifies the URL of the project. <code>--wait [TIMEOUT]</code> Waits for the operation to complete, optionally specifying a timeout."},{"location":"reference/cli/speech/batch/transcription/create/#examples","title":"Examples","text":"Create a batch transcription for an audio file<pre><code>ai speech batch transcription create --name \"Example 1\" --content https://crbn.us/hello.wav\n</code></pre> Create a batch transcription for two remote audio files<pre><code>ai config @audio.urls.txt --clear\nai config @audio.urls.txt --add http://crbn.us/hello.wav\nai config @audio.urls.txt --add http://crbn.us/whatstheweatherlike.wav\nai speech batch transcription create --name \"Example 2\" --content @audio.urls.txt\n</code></pre> Create and save a batch transcription job<pre><code>ai config @audio.urls.txt --clear\nai config @audio.urls.txt --add http://crbn.us/hello.wav\nai config @audio.urls.txt --add http://crbn.us/whatstheweatherlike.wav\nai speech batch transcription create --name \"Example 3\" --content @audio.urls.txt --save transcription.job\n</code></pre> Execute a saved transcription job and wait for completion<pre><code>ai speech batch transcription create @transcription.job --wait\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/delete/","title":"<code>ai speech batch transcription delete</code>","text":"<p>The <code>ai speech batch transcription delete</code> command deletes an existing batch transcription that has already completed.</p>"},{"location":"reference/cli/speech/batch/transcription/delete/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription delete [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/delete/#options","title":"Options","text":"Option Description <code>--key KEY</code> The key to use for the command <code>--region REGION</code> The region to use for the command <code>--transcription URL</code> The URL of the transcription to delete"},{"location":"reference/cli/speech/batch/transcription/delete/#examples","title":"Examples","text":"Deleting a batch transcription<pre><code>ai speech batch transcription delete --key your_key --region your_region --transcription your_transcription_url\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/download/","title":"<code>ai speech batch transcription download</code>","text":"<p>The <code>ai speech batch transcription download</code> command downloads files from batch transcriptions that have already completed.</p>"},{"location":"reference/cli/speech/batch/transcription/download/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription download [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/download/#options","title":"Options","text":"Option Description <code>--key KEY</code> API key for the speech service <code>--region REGION</code> Region where the speech service is located <code>--file URL</code> URL of the transcription file to download <code>--output file FILENAME</code> Name of the output file where the transcription will be saved"},{"location":"reference/cli/speech/batch/transcription/download/#example","title":"Example","text":"Download a transcription file and save it to a specific output file<pre><code>ai speech batch transcription download --key YOUR_API_KEY --region YOUR_REGION --file TRANSCRIPTION_FILE_URL --output file YOUR_OUTPUT_FILE.txt\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/list/","title":"<code>ai speech batch transcription list</code>","text":"<p>The <code>ai speech batch transcription list</code> command lists details about existing batch transcriptions.</p>"},{"location":"reference/cli/speech/batch/transcription/list/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription list [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/list/#options","title":"Options","text":"Option Description <code>--key KEY</code> The Azure Speech key to use for the connection. <code>--region REGION</code> The Azure Speech region to use for the connection. <code>--transcriptions</code> Lists the transcriptions. <code>--languages</code> Lists the languages available for transcription. <code>--transcription URL</code> URL of the transcription resource. <code>--files</code> Lists the files associated with a transcription."},{"location":"reference/cli/speech/batch/transcription/list/#examples","title":"Examples","text":"List all batch transcriptions<pre><code>ai speech batch transcription list --key YOUR_KEY --region YOUR_REGION --transcriptions\n</code></pre> List all languages available for transcription<pre><code>ai speech batch transcription list --key YOUR_KEY --region YOUR_REGION --languages\n</code></pre> List all files associated with a transcription<pre><code>ai speech batch transcription list --key YOUR_KEY --region YOUR_REGION --files --transcription URL YOUR_TRANSCRIPTION_URL\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/status/","title":"<code>ai speech batch transcription status</code>","text":"<p>The <code>ai speech batch transcription status</code> command checks the status of existing batch transcriptions, providing additional details.</p>"},{"location":"reference/cli/speech/batch/transcription/status/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription status [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/status/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key for authenticating requests. <code>--region REGION</code> The region where your speech service is deployed. <code>--transcription URL</code> The URL of the transcription you want to check the status of."},{"location":"reference/cli/speech/batch/transcription/status/#examples","title":"Examples","text":"Check the status of a specific batch transcription<pre><code>ai speech batch transcription status --key YOUR_KEY --region YOUR_REGION --transcription YOUR_TRANSCRIPTION_URL\n</code></pre> <p>This will return the status and additional details of the specified batch transcription.</p>"},{"location":"reference/cli/speech/batch/transcription/update/","title":"<code>ai speech batch transcription update</code>","text":"<p>The <code>ai speech batch transcription update</code> command updates an existing transcription request with a new name, description, or project association.</p>"},{"location":"reference/cli/speech/batch/transcription/update/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription update [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/update/#options","title":"Options","text":"Option Description <code>--key KEY</code> The key for the Azure Speech service. <code>--region REGION</code> The region for the Azure Speech service. <code>--project URL</code> The URL of the project to associate with the request. <code>--name NAME</code> The new name for the transcription request. <code>--description DESCRIPTION</code> The new description for the transcription request. <code>--transcription URL</code> The URL of the transcription request."},{"location":"reference/cli/speech/batch/transcription/update/#examples","title":"Examples","text":"Update a transcription request with a new name<pre><code>ai speech batch transcription update --key YOUR_KEY --region YOUR_REGION --transcription URL --name \"NewName\"\n</code></pre> Update a transcription request with a new description<pre><code>ai speech batch transcription update --key YOUR_KEY --region YOUR_REGION --transcription URL --description \"NewDescription\"\n</code></pre> Update a transcription request with a new project association<pre><code>ai speech batch transcription update --key YOUR_KEY --region YOUR_REGION --transcription URL --project \"ProjectURL\"\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/create/","title":"<code>ai speech batch transcription onprem create</code>","text":""},{"location":"reference/cli/speech/batch/transcription/onprem/create/#batch-transcription-onprem-create","title":"Batch Transcription OnPrem Create","text":"<p>The <code>ai speech batch transcription onprem create</code> command submits a new batch of audio files to be transcribed using the user-supplied on-premise speech container endpoints.</p> <p>Endpoints should already have been configured using <code>ai speech batch transcription onprem endpoints</code>.</p>"},{"location":"reference/cli/speech/batch/transcription/onprem/create/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription onprem create [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/create/#options","title":"Options","text":"Option Description <code>--files /file/path1;file/path2;...</code> OR <code>--files @FILES.txt</code> Specify the list of audio files to be transcribed. <code>--language LANGUAGE</code> Specify the language of the audio files (e.g. en-US). <code>--nbest NBEST</code> How many transcript alternatives to return. <code>--diarization DIARIZATION</code> Specify diarization options: <code>None</code>, <code>Identity</code>, <code>Anonymous</code>. <code>--resume RESUME</code> Specify whether to permit resume from previous failure: <code>true</code>, <code>false</code>. <code>--combine COMBINE</code> Specify whether to combine output JSON files into a single output JSON: <code>true</code>, <code>false</code>."},{"location":"reference/cli/speech/batch/transcription/onprem/create/#examples","title":"Examples","text":""},{"location":"reference/cli/speech/batch/transcription/onprem/create/#submit-a-new-batch-of-audio-files-for-transcription","title":"Submit a new batch of audio files for transcription","text":"Submit a new batch of audio files for transcription<pre><code>ai speech batch transcription onprem create --files /path/to/file1.wav;/path/to/file2.wav --language en-US --nbest 5 --diarization Identity --resume true --combine true\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/create/#submit-a-batch-of-audio-files-listed-in-a-file","title":"Submit a batch of audio files listed in a file","text":"Submit a batch of audio files listed in a file<pre><code>ai speech batch transcription onprem create --files @audio_files_list.txt --language en-US --nbest 3 --diarization Anonymous --resume false --combine false\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/create/#related-content","title":"Related Content","text":"<ul> <li>Azure Cognitive Services Speech Service</li> <li>Running On-Premise Speech Containers</li> </ul>"},{"location":"reference/cli/speech/batch/transcription/onprem/delete/","title":"<code>ai speech batch transcription onprem delete</code>","text":"<p>The <code>ai speech batch transcription onprem delete</code> command deletes a previously submitted batch. This will cancel the batch if it is currently running.</p>"},{"location":"reference/cli/speech/batch/transcription/onprem/delete/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription onprem delete --id ID\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/delete/#options","title":"Options","text":"Option/Argument Description <code>--id ID</code> Id of previously submitted batch."},{"location":"reference/cli/speech/batch/transcription/onprem/delete/#examples","title":"Examples","text":"Delete a previously submitted batch by ID<pre><code>ai speech batch transcription onprem delete --id &lt;BATCH_ID&gt;\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/endpoints/","title":"<code>ai speech batch transcription onprem endpoints</code>","text":""},{"location":"reference/cli/speech/batch/transcription/onprem/endpoints/#batch-transcription-onprem-endpoints","title":"BATCH TRANSCRIPTION ONPREM ENDPOINTS","text":"<p>The <code>ai speech batch transcription onprem endpoints</code> command is used to set the target Azure Speech Container endpoints to use for processing all batches. This can be set dynamically even while a batch is in progress. This should be set before any batches are submitted, otherwise forward progress is paused.</p>"},{"location":"reference/cli/speech/batch/transcription/onprem/endpoints/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription onprem endpoints [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/endpoints/#create","title":"CREATE","text":"Option Description <code>--config CONFIG</code> Path to on-prem endpoints config file."},{"location":"reference/cli/speech/batch/transcription/onprem/endpoints/#examples","title":"Examples","text":"Set the target Azure Speech Container endpoints<pre><code>ai speech batch transcription onprem endpoints --config /path/to/endpoints-config-file.json\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/status/","title":"<code>ai speech batch transcription onprem status</code>","text":"<p>The <code>ai speech batch transcription onprem status</code> command queries for the status of a previously submitted batch.</p>"},{"location":"reference/cli/speech/batch/transcription/onprem/status/#usage","title":"Usage","text":"<pre><code>ai speech batch transcription onprem status [...]\n</code></pre>"},{"location":"reference/cli/speech/batch/transcription/onprem/status/#options","title":"Options","text":"Option Description <code>--id ID</code> Id of previously submitted batch. <code>--waitms WAITMS</code> Milliseconds to wait if batch is not finished or failed. Omit or provide 0 for no wait."},{"location":"reference/cli/speech/batch/transcription/onprem/status/#examples","title":"Examples","text":"Check the status of a previously submitted batch with ID 12345<pre><code>ai speech batch transcription onprem status --id 12345\n</code></pre> Check the status of a previously submitted batch with ID 12345 and wait 5000ms if not finished<pre><code>ai speech batch transcription onprem status --id 12345 --waitms 5000\n</code></pre>"},{"location":"reference/cli/speech/csr/","title":"<code>ai speech csr</code>","text":"<p>The ai speech csr commands manage custom speech recognition models and related resources.</p>"},{"location":"reference/cli/speech/csr/#usage","title":"Usage","text":"<pre><code>ai speech csr [command]\n</code></pre>"},{"location":"reference/cli/speech/csr/#sub-commands","title":"Sub-Commands","text":"Sub-command Description ai speech csr dataset Manage CSR datasets ai speech csr endpoint Manage CSR endpoints ai speech csr evaluation Manage CSR evaluations ai speech csr model Manage CSR models ai speech csr project Manage CSR projects"},{"location":"reference/cli/speech/csr/#examples","title":"Examples","text":"Create a new CSR project<pre><code>ai speech csr project create --name \"MyProject\" --description \"This is a test project\"\n</code></pre> List all CSR models<pre><code>ai speech csr model list\n</code></pre> Upload a dataset to a CSR project<pre><code>ai speech csr dataset upload --project-id 1234 --file-path /path/to/dataset.zip\n</code></pre> Delete a CSR endpoint<pre><code>ai speech csr endpoint delete --endpoint-id 5678\n</code></pre>"},{"location":"reference/cli/speech/csr/download/","title":"<code>ai speech csr download</code>","text":""},{"location":"reference/cli/speech/csr/download/#usage","title":"Usage","text":"<pre><code>ai speech csr download [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/download/#options","title":"Options","text":"Option Description <code>--key</code> Specify the Azure AI key <code>--region</code> Specify the Azure AI region <code>--url</code> URL to download from <code>--file</code> File to download from <code>--dataset file URL</code> URL of the dataset file to download <code>--evaluation file URL</code> URL of the evaluation file to download <code>--endpoint log URL</code> URL of the endpoint log to download <code>--output file FILENAME</code> Specify the output file name <code>--output json FILENAME</code> Specify the output JSON file name <code>--output url @@FILE</code> Specify the output URL file <code>--input path PATH</code> Input path for the files <code>--output path PATH</code> Output path for the files <code>--foreach in @FILENAME</code> Apply changes to each entry in the specified file <code>--save FILENAME</code> Save the result into the specified file <code>--zip ZIPFILE</code> Zip the downloaded file"},{"location":"reference/cli/speech/csr/download/#examples","title":"Examples","text":"Download a dataset file<pre><code>ai speech csr download --dataset file URL https://example.com/dataset --output file dataset.zip\n</code></pre> Download an endpoint log<pre><code>ai speech csr download --endpoint log URL https://example.com/endpointlog --output file log.zip\n</code></pre>"},{"location":"reference/cli/speech/csr/list/","title":"<code>ai speech csr list</code>","text":"<p>The <code>ai speech csr list</code> command shows details about speech recognition models.</p>"},{"location":"reference/cli/speech/csr/list/#usage","title":"Usage","text":"<pre><code>ai speech csr list [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/list/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specify the key to use for the connection. <code>--region REGION</code> Specify the region of the resource. <code>--projects</code> List projects. <code>--project-languages</code> List supported locales for projects. <code>--datasets</code> List datasets. <code>--dataset-languages</code> List supported locales for datasets. <code>--dataset URL</code> Specify the dataset URL. <code>--models</code> List models. <code>--model-languages</code> List supported locales for models. <code>--evaluations</code> List evaluations. <code>--evaluation-languages</code> List supported locales for evaluations. <code>--evaluation URL</code> Specify the evaluation URL. <code>--endpoints</code> List endpoints. <code>--endpoint-languages</code> List supported locales for endpoints. <code>--endpoint URL</code> Specify the endpoint URL. <code>--project URL</code> Specify the project URL. <code>--input path PATH</code> Specify the input path. <code>--output path PATH</code> Specify the output path. <code>--output json FILENAME</code> Specify the output JSON filename. <code>--foreach in @FILENAME</code> Specify the foreach filename. <code>--save FILENAME</code> Specify the save filename. <code>--zip ZIPFILE</code> Specify the zip file."},{"location":"reference/cli/speech/csr/list/#examples","title":"Examples","text":"List all models<pre><code>ai speech csr list --models\n</code></pre> List all datasets<pre><code>ai speech csr list --datasets\n</code></pre> List all projects<pre><code>ai speech csr list --projects\n</code></pre> List supported locales for models<pre><code>ai speech csr list --model languages\n</code></pre> Specify the dataset URL<pre><code>ai speech csr list --dataset URL\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/","title":"<code>ai speech csr dataset</code>","text":"<p>The <code>ai speech csr dataset</code> command is used to manage custom speech recognition datasets in Azure AI services. This command is part of the Azure AI CLI.</p>"},{"location":"reference/cli/speech/csr/dataset/#usage","title":"Usage","text":"Create a new custom speech recognition dataset<pre><code>ai speech csr dataset &lt;command&gt; [options]\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/#sub-commands","title":"Sub-Commands","text":"Sub-Command Description ai speech csr dataset create Create a new custom speech recognition dataset ai speech csr dataset delete Delete an existing custom speech recognition dataset ai speech csr dataset download Download a custom speech recognition dataset ai speech csr dataset list List all custom speech recognition datasets ai speech csr dataset status Check the status of a custom speech recognition dataset ai speech csr dataset update Update an existing custom speech recognition dataset ai speech csr dataset upload Upload data to a custom speech recognition dataset"},{"location":"reference/cli/speech/csr/dataset/#examples","title":"Examples","text":"Create a new custom speech recognition dataset<pre><code>ai speech csr dataset create --project &lt;URL&gt; --name &lt;NAME&gt; --kind &lt;KIND&gt; --content &lt;URL&gt; --language &lt;LANGUAGE&gt; --description &lt;DESCRIPTION&gt;\n</code></pre> Delete an existing custom speech recognition dataset<pre><code>ai speech csr dataset delete --dataset-id &lt;ID&gt;\n</code></pre> Download a custom speech recognition dataset<pre><code>ai speech csr dataset download --dataset-id &lt;ID&gt;\n</code></pre> List all custom speech recognition datasets<pre><code>ai speech csr dataset list\n</code></pre> Check the status of a custom speech recognition dataset<pre><code>ai speech csr dataset status --dataset-id &lt;ID&gt;\n</code></pre> Update an existing custom speech recognition dataset<pre><code>ai speech csr dataset update --dataset-id &lt;ID&gt; --name &lt;NEW_NAME&gt;\n</code></pre> Upload data to a custom speech recognition dataset<pre><code>ai speech csr dataset upload --dataset-id &lt;ID&gt; --content &lt;FILE_PATH&gt;\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/create/","title":"<code>ai speech csr dataset create</code>","text":"<p>The <code>ai speech csr dataset create</code> command creates a new dataset by getting the data from a specified URL.</p>"},{"location":"reference/cli/speech/csr/dataset/create/#usage","title":"Usage","text":"<pre><code>ai speech csr dataset create [options]\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/create/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key to use for the connection. <code>--region REGION</code> The region of your Azure resource. <code>--project URL</code> The URL of the project to associate the dataset with. <code>--name NAME</code> The name of the dataset. <code>--kind KIND</code> The kind of dataset being created (e.g., text, audio). <code>--content URL</code> The URL where the content for the dataset is located. <code>--language LANGUAGE</code> The language of the dataset content. <code>--description DESCRIPTION</code> A description of the dataset. <code>--output json FILENAME</code> Save the output as a JSON file. <code>--output url @@FILE</code> Save the output URL in the specified file. <code>--output id @@FILE</code> Save the output ID in the specified file. <code>--wait [TIMEOUT]</code> Wait for the operation to complete. Optionally specify a timeout. <code>--input path PATH</code> Read input from the specified path. <code>--output path PATH</code> Write output to the specified path. <code>--foreach in @FILENAME</code> Iterate over multiple inputs specified in a file. <code>--save FILENAME</code> Save the state to a file. <code>--zip ZIPFILE</code> Zip the content specified."},{"location":"reference/cli/speech/csr/dataset/create/#examples","title":"Examples","text":"Create a new dataset with specified project and content URL<pre><code>ai speech csr dataset create --key your_api_key --region your_region --project https://example.com/project --name your_dataset_name --kind text --content https://example.com/content --language en-US --description \"Sample dataset\"\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/delete/","title":"<code>ai speech csr dataset delete</code>","text":"<p>The <code>ai speech csr dataset delete</code> command deletes an existing custom speech recognition dataset.</p>"},{"location":"reference/cli/speech/csr/dataset/delete/#usage","title":"Usage","text":"Delete a Custom Speech Recognition Dataset<pre><code>ai speech csr dataset delete --dataset &lt;URL&gt; --key &lt;API_KEY&gt; --region &lt;REGION&gt;\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/delete/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specify the API key for authentication. <code>--region REGION</code> Specify the Azure region. <code>--dataset URL</code> The dataset URL to be deleted. <code>--input path PATH</code> Optional input file path. <code>--output path PATH</code> Optional output file path. <code>--output json FILENAME</code> Optional output file name for JSON format. <code>--foreach in @FILENAME</code> Execute the command for each entry in the specified file. <code>--save FILENAME</code> Save the command output to the specified file. <code>--zip ZIPFILE</code> Zip the specified output file."},{"location":"reference/cli/speech/csr/dataset/download/","title":"<code>ai speech csr dataset download</code>","text":"<p>The <code>ai speech csr dataset download</code> command downloads one or more files associated with a custom speech recognition dataset.</p>"},{"location":"reference/cli/speech/csr/dataset/download/#usage","title":"Usage","text":"<pre><code>ai speech csr dataset download [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/download/#options","title":"Options","text":"Option Description <code>--key</code> API key for the Custom Speech Service <code>--region</code> Azure region where the Custom Speech Service is deployed <code>--file</code> URL of the file(s) to download <code>--output-file</code> Specify the output filename for the downloaded file <code>--output-json</code> Specify JSON format for the output <code>--output-url</code> Specify URL format for the output <code>--url</code> URL of the dataset <code>--input-path</code> Input path for the dataset <code>--output-path</code> Output path for the downloaded file(s) <code>--foreach in</code> Iterate over a list of URLs in a file <code>--save</code> Save the command's results in the specified file <code>--zip</code> Download and save as a ZIP file"},{"location":"reference/cli/speech/csr/dataset/download/#examples","title":"Examples","text":"Download a dataset file<pre><code>ai speech csr dataset download --key YOUR_API_KEY --region YOUR_REGION --file YOUR_FILE_URL --output file FILENAME\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/list/","title":"<code>ai speech csr dataset list</code>","text":"<p>The <code>ai speech csr dataset list</code> command lists details about existing custom speech recognition datasets and/or its associated files.</p>"},{"location":"reference/cli/speech/csr/dataset/list/#usage","title":"Usage","text":"<pre><code>ai speech csr dataset list [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/list/#options","title":"Options","text":"Option Description <code>--key KEY</code> The subscription key for accessing the Azure Speech service. <code>--region REGION</code> The region of the Azure Speech service. <code>--datasets</code> List the custom speech recognition datasets. <code>--languages</code> List the languages available in the custom speech recognition datasets. <code>--dataset ID/URL</code> Specify the dataset ID or URL. <code>--files</code> List the files associated with a specific dataset. <code>--project URL</code> Specify the project URL. <code>--input path PATH</code> Specify the input path. <code>--output path PATH</code> Specify the output path. <code>--output json FILENAME</code> Specify the filename for the output in JSON format. <code>--foreach in @FILENAME</code> Specify a file containing a list of items to process with the command. <code>--save FILENAME</code> Save the command output to a file. <code>--zip ZIPFILE</code> Specify the zip file for the dataset."},{"location":"reference/cli/speech/csr/dataset/list/#examples","title":"Examples","text":"List custom speech recognition datasets<pre><code>ai speech csr dataset list --datasets\n</code></pre> List languages available in custom speech recognition datasets<pre><code>ai speech csr dataset list --languages\n</code></pre> List files associated with a specific dataset<pre><code>ai speech csr dataset list --dataset &lt;ID/URL&gt; --files\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/status/","title":"<code>ai speech csr dataset status</code>","text":"<p>The <code>ai speech csr dataset status</code> command checks the asynchronous creation status of a custom speech recognition dataset.</p>"},{"location":"reference/cli/speech/csr/dataset/status/#usage","title":"Usage","text":"<pre><code>ai speech csr dataset status [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/status/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key to authenticate the request. <code>--region REGION</code> The region where the speech service instance is located. <code>--dataset URL</code> The URL of the dataset whose status needs to be checked. <code>--output json FILE</code> The file to save the output in JSON format. <code>--wait [TIMEOUT]</code> Wait for the operation to complete and specify an optional timeout period. <code>--input path PATH</code> Specify the input path. <code>--output path PATH</code> Specify the output path. <code>--foreach in @FILE</code> Iterate over a list of items defined in a file. <code>--save FILENAME</code> Save the command payload to a file. <code>--zip ZIPFILE</code> Save the output as a zip file."},{"location":"reference/cli/speech/csr/dataset/status/#examples","title":"Examples","text":"Check the status of a custom speech recognition dataset<pre><code>ai speech csr dataset status --key &lt;YOUR_KEY&gt; --region &lt;YOUR_REGION&gt; --dataset &lt;DATASET_URL&gt;\n</code></pre> Check the status and save the output to a file in JSON format<pre><code>ai speech csr dataset status --key &lt;YOUR_KEY&gt; --region &lt;YOUR_REGION&gt; --dataset &lt;DATASET_URL&gt; --output json status_output.json\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/update/","title":"<code>ai speech csr dataset update</code>","text":"<p>The <code>ai speech csr dataset update</code> command updates an existing custom speech recognition dataset with an updated name, description, and/or project reference.</p>"},{"location":"reference/cli/speech/csr/dataset/update/#usage","title":"Usage","text":"<pre><code>ai speech csr dataset update [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/update/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specify the subscription key to use <code>--region REGION</code> Specify the region for the speech resource <code>--dataset URL</code> Specify the dataset URL <code>--project URL</code> Specify the project URL <code>--name NAME</code> Specify the name for the dataset <code>--description DESCRIPTION</code> Specify the description for the dataset <code>--input path PATH</code> Specify the input path <code>--output path PATH</code> Specify the output path <code>--output json FILENAME</code> Specify the output file for JSON response <code>--foreach in @FILENAME</code> Repeat a command multiple times leveraging options in a file <code>--save FILENAME</code> Package command line and related configuration into a file <code>--zip ZIPFILE</code> Specify a ZIP file"},{"location":"reference/cli/speech/csr/dataset/update/#examples","title":"Examples","text":"Update dataset name and description<pre><code>ai speech csr dataset update --key YOUR_KEY --region westus2 --dataset DATASET_URL --name \"New Dataset Name\" --description \"Updated description.\"\n</code></pre> Update dataset project reference<pre><code>ai speech csr dataset update --key YOUR_KEY --region westus2 --dataset DATASET_URL --project PROJECT_URL\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/upload/","title":"<code>ai speech csr dataset upload</code>","text":"<p>The <code>ai speech csr dataset upload</code> command uploads a new dataset by getting the data from a specified local data file.</p>"},{"location":"reference/cli/speech/csr/dataset/upload/#usage","title":"Usage","text":"<pre><code>ai speech csr dataset upload [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/dataset/upload/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key to use for the request. <code>--region REGION</code> The region where the dataset will be uploaded. <code>--name NAME</code> The name of the dataset. <code>--description DESCRIPTION</code> A description for the dataset. <code>--language LANGUAGE</code> The language of the dataset. <code>--data FILENAME</code> The path to the local data file to be uploaded. <code>--kind KIND</code> The kind of dataset, e.g., 'audio', 'text'. <code>--output json FILENAME</code> The path to the JSON output file. <code>--wait [TIMEOUT]</code> Wait for the operation to complete, optionally specifying a timeout. <code>--input path PATH</code> The input path for advanced operations. <code>--output path PATH</code> The output path for advanced operations. <code>--foreach in @FILENAME</code> Apply the command to all items listed in the given file. <code>--save FILENAME</code> Save the operation results to the specified file. <code>--zip ZIPFILE</code> The path to a zip file containing data to be uploaded."},{"location":"reference/cli/speech/csr/dataset/upload/#examples","title":"Examples","text":"Upload a new dataset<pre><code>ai speech csr dataset upload --key your_api_key --region your_region --name \"MyDataset\" --description \"This is a test dataset\" --language en-us --data /path/to/data/file --kind audio\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/","title":"<code>ai speech csr endpoint</code>","text":""},{"location":"reference/cli/speech/csr/endpoint/#usage","title":"Usage","text":"<pre><code>ai speech csr endpoint COMMAND [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/#sub-commands","title":"Sub-commands","text":"Sub-command Description ai speech csr endpoint create Create a new speech endpoint ai speech csr endpoint delete Delete an existing speech endpoint ai speech csr endpoint download Download the details of a specific speech endpoint ai speech csr endpoint list List all available speech endpoints ai speech csr endpoint status Check the status of a specific speech endpoint ai speech csr endpoint update Update the details of a specific speech endpoint"},{"location":"reference/cli/speech/csr/endpoint/#examples","title":"Examples","text":"<p>Create a new speech endpoint<pre><code>ai speech csr endpoint create --name \"NewEndpoint\" --region \"westus\"\n</code></pre> Delete a speech endpoint<pre><code>ai speech csr endpoint delete --name \"OldEndpoint\"\n</code></pre> Download details of an endpoint<pre><code>ai speech csr endpoint download --name \"ExampleEndpoint\"\n</code></pre> List all speech endpoints<pre><code>ai speech csr endpoint list\n</code></pre> Check status of a speech endpoint<pre><code>ai speech csr endpoint status --name \"CheckEndpoint\"\n</code></pre> Update a speech endpoint<pre><code>ai speech csr endpoint update --name \"UpdateEndpoint\" --region \"eastus\"\n</code></pre></p>"},{"location":"reference/cli/speech/csr/endpoint/create/","title":"<code>ai speech csr endpoint create</code>","text":""},{"location":"reference/cli/speech/csr/endpoint/create/#usage","title":"Usage","text":"<pre><code>ai speech csr endpoint create [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/create/#options","title":"Options","text":"Option Description <code>--key KEY</code> Subscription key to authenticate with the Azure service <code>--region REGION</code> Azure region where the endpoint will be created <code>--project URL</code> URL of the project to use for creating the endpoint <code>--name NAME</code> Unique name for the new endpoint <code>--text TEXT</code> Custom text to use for the speech recognition model <code>--model URL</code> URL of the specific custom model to use <code>--language LANGUAGE</code> Language of the speech recognition model <code>--description DESCRIPTION</code> A brief description of the endpoint <code>--output json FILENAME</code> Output results in JSON format and save to specified filename <code>--output url @@FILE</code> Output the URL of the newly created endpoint and save it to the specified file <code>--output id @@FILE</code> Output the ID of the newly created endpoint and save it to the specified file <code>--wait [TIMEOUT]</code> Wait for the command to complete, with an optional timeout <code>--input path PATH</code> Specify the input file path <code>--output path PATH</code> Specify the output file path <code>--foreach in @FILENAME</code> Specify multiple entries in a file to iterate over <code>--save FILENAME</code> Save the command result in a specified filename <code>--zip ZIPFILE</code> Save the command result in a specified zip file"},{"location":"reference/cli/speech/csr/endpoint/create/#examples","title":"Examples","text":"Create a new custom speech recognition endpoint with a specific model<pre><code>ai speech csr endpoint create --name \"MyCustomEndpoint\" --region \"westus\" --model \"https://example.com/customModel\" --language \"en-US\"\n</code></pre> Create a new endpoint with custom text<pre><code>ai speech csr endpoint create --name \"TextBasedEndpoint\" --region \"eastus\" --text \"Custom speech text\"\n</code></pre> Create and wait for completion<pre><code>ai speech csr endpoint create --name \"WaitForCompletionEndpoint\" --region \"centralus\" --model \"https://example.com/model\" --wait 300\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/delete/","title":"<code>ai speech csr endpoint delete</code>","text":"<p>The <code>ai speech csr endpoint delete</code> command deletes an existing custom speech recognition endpoint.</p>"},{"location":"reference/cli/speech/csr/endpoint/delete/#usage","title":"Usage","text":"<pre><code>ai speech csr endpoint delete [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/delete/#options","title":"Options","text":"Option Description <code>--key KEY</code> The subscription key to use <code>--region REGION</code> The region to use <code>--endpoint URL</code> The URL of the endpoint to delete <code>--endpoint log URL</code> The URL of the endpoint log to delete <code>--input path PATH</code> Additional paths to search for input files <code>--output path PATH</code> Directory where all output files should be written <code>--output json FILENAME</code> Save the service JSON response into the specified file <code>--foreach in @FILENAME</code> Repeats a specific command multiple times using a TSV file <code>--save FILENAME</code> Save the command line and related configuration data into a file <code>--zip ZIPFILE</code> Specify a ZIP archive file"},{"location":"reference/cli/speech/csr/endpoint/delete/#examples","title":"Examples","text":"Delete a custom speech recognition endpoint using the region and key directly on the command line<pre><code>ai speech csr endpoint delete --region westus2 --key 436172626F6E20697320636F6F6C2121 --endpoint https://example.com/endpoint\n</code></pre> Delete a custom speech recognition endpoint using the region and key from AI configuration<pre><code>ai config speech @region --set westus2\nai config speech @key --set 436172626F6E20697320636F6F6C2121\nai speech csr endpoint delete --region @region --key @key --endpoint https://example.com/endpoint\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/download/","title":"<code>ai speech csr endpoint download</code>","text":"<p>The <code>ai speech csr endpoint download</code> command downloads one or more files associated with a custom speech recognition endpoint.</p>"},{"location":"reference/cli/speech/csr/endpoint/download/#usage","title":"Usage","text":"<pre><code>ai speech csr endpoint download [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/download/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specifies the key for the connection. <code>--region REGION</code> Specifies the region for the connection. <code>--endpoint log URL</code> Specifies the endpoint log URL for downloading files. <code>--output file FILENAME</code> Specifies the output file name for the downloaded file(s). <code>--output json FILENAME</code> Specifies the output JSON file name for the downloaded file(s). <code>--output URL @@FILE</code> Specifies the output URL for the downloaded file(s). <code>--url URL</code> Specifies the download URL. <code>--file URL</code> Specifies the file URL. <code>--input path PATH</code> Specifies the input path for the operation. <code>--output path PATH</code> Specifies the output path for the operation. <code>--foreach in @FILENAME</code> Specifies a file containing a list of items to process. <code>--save FILENAME</code> Specifies the file name for saving the configuration. <code>--zip ZIPFILE</code> Specifies the zip file name for the downloaded content."},{"location":"reference/cli/speech/csr/endpoint/download/#examples","title":"Examples","text":"Download files associated with a custom speech recognition endpoint<pre><code>ai speech csr endpoint download --key \"your-key\" --region \"your-region\" --endpoint log \"your-endpoint-log-url\" --output file \"output-filename\"\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/list/","title":"<code>ai speech csr endpoint list</code>","text":"<p>The <code>ai speech csr endpoint list</code> command lists details about existing custom speech recognition endpoints.</p>"},{"location":"reference/cli/speech/csr/endpoint/list/#usage","title":"Usage","text":"<pre><code>ai speech csr endpoint list [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/list/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key for authenticating the request. <code>--region REGION</code> The region associated with the API key. <code>--endpoints</code> Lists the available custom speech recognition endpoints. <code>--languages</code> Lists the languages supported by the endpoints. <code>--endpoint URL</code> Specifies the URL of the specific endpoint to retrieve logs for. <code>--logs</code> Retrieves logs for the specified endpoint. <code>--project URL</code> The URL of the project associated with the endpoints. <code>--input path PATH</code> The input path for files related to the endpoint. <code>--output path PATH</code> The output path for files related to the endpoint. <code>--output json FILENAME</code> The filename for the output in JSON format. <code>--foreach in @FILENAME</code> Specifies a file containing multiple endpoints to iterate over. <code>--save FILENAME</code> Saves the configuration to the specified filename. <code>--zip ZIPFILE</code> Specifies the Zip file to use for the operations."},{"location":"reference/cli/speech/csr/endpoint/list/#examples","title":"Examples","text":"List all available custom speech recognition endpoints<pre><code>ai speech csr endpoint list --endpoints\n</code></pre> List the languages supported by the endpoints<pre><code>ai speech csr endpoint list --languages\n</code></pre> Retrieve logs for a specific endpoint<pre><code>ai speech csr endpoint list --endpoint {YourEndpointURL} --logs\n</code></pre> Save the configuration to a file<pre><code>ai speech csr endpoint list --save {YourFilename}\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/status/","title":"<code>ai speech csr endpoint status</code>","text":"<p>The <code>ai speech csr endpoint status</code> command checks the asynchronous creation status of a custom speech recognition endpoint.</p>"},{"location":"reference/cli/speech/csr/endpoint/status/#usage","title":"Usage","text":"<pre><code>ai speech csr endpoint status [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/status/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key to authenticate with. <code>--region REGION</code> The Azure region where your resource is located. <code>--endpoint URL</code> The endpoint URL of the custom speech recognition service. <code>--output json FILENAME</code> Outputs the result in JSON format to the specified file. <code>--wait [TIMEOUT]</code> Waits for the operation to complete, with an optional timeout. <code>--input path PATH</code> Path to the input data. <code>--output path PATH</code> Path to save the output data. <code>--foreach in @FILENAME</code> Perform the operation for each item in the specified file. <code>--save FILENAME</code> Saves the current configuration to a file. <code>--zip ZIPFILE</code> Specifies the ZIP file to use."},{"location":"reference/cli/speech/csr/endpoint/status/#examples","title":"Examples","text":"Check the status of a custom speech recognition endpoint<pre><code>ai speech csr endpoint status --key your_key --region your_region --endpoint your_endpoint\n</code></pre> Check the status and output the result to a JSON file<pre><code>ai speech csr endpoint status --key your_key --region your_region --endpoint your_endpoint --output json result.json\n</code></pre> Check the status and wait for the operation to complete<pre><code>ai speech csr endpoint status --key your_key --region your_region --endpoint your_endpoint --wait\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/update/","title":"<code>ai speech csr endpoint update</code>","text":"<p>The <code>ai speech csr endpoint update</code> command updates an existing custom speech recognition endpoint with an updated name, description, and/or project reference.</p>"},{"location":"reference/cli/speech/csr/endpoint/update/#usage","title":"Usage","text":"<pre><code>ai speech csr endpoint update [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/endpoint/update/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key to use for the target connection. <code>--region REGION</code> The region for the targeted Azure resource. <code>--endpoint URL</code> The URL of the custom speech recognition endpoint to update. <code>--project URL</code> The URL of the custom speech recognition project. <code>--name NAME</code> The new name for the custom speech recognition endpoint. <code>--description DESCRIPTION</code> The new description for the custom speech recognition endpoint. <code>--input path PATH</code> Specifies a path to an input file containing parameters. <code>--output path PATH</code> Specifies a path to write the command output. <code>--output json FILENAME</code> Specifies a JSON file to write the command output. <code>--foreach in @FILENAME</code> Executes the command for each entry in the specified file. <code>--save FILENAME</code> Saves the command state to the specified file. <code>--zip ZIPFILE</code> Compresses the command output into the specified ZIP file."},{"location":"reference/cli/speech/csr/endpoint/update/#examples","title":"Examples","text":"Update the name of a custom speech recognition endpoint<pre><code>ai speech csr endpoint update --key &lt;YOUR_KEY&gt; --region &lt;YOUR_REGION&gt; --endpoint &lt;ENDPOINT_URL&gt; --name \"New Endpoint Name\"\n</code></pre> Update the description of a custom speech recognition endpoint<pre><code>ai speech csr endpoint update --key &lt;YOUR_KEY&gt; --region &lt;YOUR_REGION&gt; --endpoint &lt;ENDPOINT_URL&gt; --description \"New Description\"\n</code></pre> Update the endpoint with a new project reference<pre><code>ai speech csr endpoint update --key &lt;YOUR_KEY&gt; --region &lt;YOUR_REGION&gt; --endpoint &lt;ENDPOINT_URL&gt; --project &lt;PROJECT_URL&gt;\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/","title":"<code>ai speech csr evaluation</code>","text":"<p>The <code>ai speech csr evaluation</code> command is used to manage custom speech recognition evaluations in Azure AI services.</p>"},{"location":"reference/cli/speech/csr/evaluation/#usage","title":"Usage","text":"<pre><code>ai speech csr evaluation [command]\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/#sub-commands","title":"Sub-commands","text":"Command Description ai speech csr evaluation create Creates a new custom speech recognition evaluation using previously created custom speech recognition models and dataset. ai speech csr evaluation delete Deletes an existing custom speech recognition evaluation. ai speech csr evaluation list Lists details about existing custom speech recognition evaluations and/or its associated files. ai speech csr evaluation status Checks the asynchronous creation and execution status of a custom speech recognition evaluation. ai speech csr evaluation update Updates an existing custom speech recognition evaluation."},{"location":"reference/cli/speech/csr/evaluation/#examples","title":"Examples","text":"Create a new evaluation using specific models and dataset<pre><code>ai speech csr evaluation create --project [Project URL] --name MyEvaluation --model1 [Model1 URL] --model2 [Model2 URL] --dataset [Dataset URL] --language en-US --description \"Test evaluation\"\n</code></pre> Delete an existing evaluation<pre><code>ai speech csr evaluation delete --evaluation [Evaluation URL]\n</code></pre> List all evaluations and their associated files<pre><code>ai speech csr evaluation list --evaluations\n</code></pre> Check the status of a specific evaluation<pre><code>ai speech csr evaluation status --evaluation [Evaluation URL]\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/create/","title":"<code>ai speech csr evaluation create</code>","text":"<p>The <code>ai speech csr evaluation create</code> command creates a new custom speech recognition evaluation using previously created custom speech recognition models and dataset.</p>"},{"location":"reference/cli/speech/csr/evaluation/create/#usage","title":"Usage","text":"<pre><code>ai speech csr evaluation create [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/create/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key for the Azure AI service. <code>--region REGION</code> The region of the Azure AI service. <code>--project URL</code> The URL of the project to use for evaluation. <code>--name NAME</code> The name of the evaluation. <code>--model1 URL</code> The URL of the first custom speech recognition model. <code>--model2 URL</code> The URL of the second custom speech recognition model. <code>--dataset URL</code> The URL of the dataset to use for evaluation. <code>--language LANGUAGE</code> The language of the dataset. <code>--description DESCRIPTION</code> The description of the evaluation. <code>--output json FILENAME</code> Output the result as JSON to the specified file. <code>--output url @@FILE</code> Save the evaluation result URL to the specified file. <code>--output id @@FILE</code> Save the evaluation ID to the specified file. <code>--wait [TIMEOUT]</code> Wait for the evaluation to complete. Optionally specify a timeout. <code>--input path PATH</code> Specify an input path for the evaluation. <code>--output path PATH</code> Specify an output path for the evaluation results. <code>--foreach in @FILENAME</code> Run the evaluation for each item in the specified file. <code>--save FILENAME</code> Save the evaluation configuration to the specified file. <code>--zip ZIPFILE</code> Create a ZIP file with the evaluation results."},{"location":"reference/cli/speech/csr/evaluation/create/#examples","title":"Examples","text":"Create a new custom speech recognition evaluation<pre><code>ai speech csr evaluation create --key YOUR_API_KEY --region YOUR_REGION --project PROJECT_URL --name \"Test Evaluation\" --model1 MODEL1_URL --model2 MODEL2_URL --dataset DATASET_URL --language en-US --description \"Evaluation Description\" --output json results.json --wait\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/delete/","title":"<code>ai speech csr evaluation delete</code>","text":"<p>The <code>ai speech csr evaluation delete</code> command deletes an existing custom speech recognition evaluation.</p>"},{"location":"reference/cli/speech/csr/evaluation/delete/#usage","title":"Usage","text":"Delete a Custom Speech Recognition Evaluation<pre><code>ai speech csr evaluation delete [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/delete/#options","title":"Options","text":"Option Description --key KEY API Key for authentication --region REGION Azure region --evaluation URL URL of the evaluation to delete --input path PATH Path to the input file --output path PATH Path to the output file --output json FILENAME Path to the output JSON file --foreach in @FILENAME Process each item in the specified file --save FILENAME Path to save the command output --zip ZIPFILE Path to the ZIP file"},{"location":"reference/cli/speech/csr/evaluation/delete/#example","title":"Example","text":"Delete an Evaluation by URL<pre><code>ai speech csr evaluation delete --evaluation https://example.com/evaluation123 --key your_api_key --region your_region\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/list/","title":"<code>ai speech csr evaluation list</code>","text":"<p>The <code>ai speech csr evaluation list</code> command lists details about existing custom speech recognition evaluations and/or its associated files.</p>"},{"location":"reference/cli/speech/csr/evaluation/list/#usage","title":"Usage","text":"<pre><code>ai speech csr evaluation list [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/list/#options","title":"Options","text":"Option Description <code>--key KEY</code> Subscription key <code>--region REGION</code> Azure region <code>--evaluations</code> List existing evaluations <code>--languages</code> List languages of evaluations <code>--evaluation ID/URL</code> Specify the evaluation by ID or URL <code>--files</code> List associated files <code>--project URL</code> Specify the project URL <code>--input path PATH</code> Specify the input path <code>--output path PATH</code> Specify the output path <code>--output json FILFE</code> Specify the output file in JSON format <code>--foreach in @FILE</code> Loop through each evaluation in specified file <code>--save FILE</code> Save the list to a specific file <code>--zip ZIPFILE</code> Create a zip file with the listed evaluations or their details"},{"location":"reference/cli/speech/csr/evaluation/list/#examples","title":"Examples","text":"List all existing evaluations in a specific region<pre><code>ai speech csr evaluation list --region westus2 --key &lt;your_subscription_key&gt; --evaluations\n</code></pre> List evaluation languages for specific evaluation ID<pre><code>ai speech csr evaluation list --region westus2 --key &lt;your_subscription_key&gt; --evaluation 01234567-89ab-cdef-fedc-ba9876543210 --languages\n</code></pre> List all associated files for specific evaluation URL<pre><code>ai speech csr evaluation list --region westus2 --key &lt;your_subscription_key&gt; --evaluation https://example.com/eval/01234567-89ab-cdef-fedc-ba9876543210 --files\n</code></pre> Save evaluations list to a JSON file<pre><code>ai speech csr evaluation list --region westus2 --key &lt;your_subscription_key&gt; --evaluations --output json evaluations_list.json\n</code></pre> Loop through evaluations listed in a file<pre><code>ai speech csr evaluation list --region westus2 --key &lt;your_subscription_key&gt; --foreach in @evaluations.txt --output path ./evaluations\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/status/","title":"<code>ai speech csr evaluation status</code>","text":"<p>The <code>ai speech csr evaluation status</code> command checks the asynchronous creation and execution status of a custom speech recognition evaluation.</p>"},{"location":"reference/cli/speech/csr/evaluation/status/#usage","title":"Usage","text":"<pre><code>ai speech csr evaluation status [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/status/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specifies the API key to authenticate the request <code>--region REGION</code> Specifies the Azure region where the service is hosted <code>--evaluation URL</code> Specifies the URL of the evaluation to check the status for <code>--output json FILENAME</code> Outputs the result in JSON format to the specified file <code>--wait [TIMEOUT]</code> Wait for the evaluation to complete; optionally specify a timeout value <code>--input path PATH</code> Specifies the path for the input file <code>--output path PATH</code> Specifies the path for the output file <code>--foreach in @FILENAME</code> Specifies a file that contains a list of items to process <code>--save FILENAME</code> Saves the result to the specified file <code>--zip ZIPFILE</code> Specifies a zip file to process"},{"location":"reference/cli/speech/csr/evaluation/status/#examples","title":"Examples","text":"Check the status of a custom speech recognition evaluation<pre><code>ai speech csr evaluation status --key YOUR_API_KEY --region YOUR_REGION --evaluation YOUR_EVALUATION_URL --output json status_output.json\n</code></pre> Wait for the evaluation to complete with a timeout of 300 seconds<pre><code>ai speech csr evaluation status --key YOUR_API_KEY --region YOUR_REGION --evaluation YOUR_EVALUATION_URL --wait 300\n</code></pre> Save the result to a specified file<pre><code>ai speech csr evaluation status --key YOUR_API_KEY --region YOUR_REGION --evaluation YOUR_EVALUATION_URL --save result.json\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/update/","title":"<code>ai speech csr evaluation update</code>","text":"<p>Update a specific evaluation of a custom speech recognition model.</p>"},{"location":"reference/cli/speech/csr/evaluation/update/#usage","title":"Usage","text":"<pre><code>ai speech csr evaluation update --evaluation-id &lt;evaluation_id&gt; --name &lt;new_name&gt; --description &lt;new_description&gt;\n</code></pre>"},{"location":"reference/cli/speech/csr/evaluation/update/#options","title":"Options","text":"Option Description <code>--evaluation-id</code> The ID of the evaluation to update. <code>--name</code> The new name for the evaluation. <code>--description</code> The new description for the evaluation."},{"location":"reference/cli/speech/csr/evaluation/update/#examples","title":"Examples","text":"Update the name and description of an evaluation<pre><code>ai speech csr evaluation update --evaluation-id abc123 --name \"New Evaluation Name\" --description \"Updated evaluation description\"\n</code></pre>"},{"location":"reference/cli/speech/csr/model/","title":"<code>ai speech csr model</code>","text":""},{"location":"reference/cli/speech/csr/model/#usage","title":"Usage","text":"<pre><code>ai speech csr model &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/model/#sub-commands","title":"Sub-Commands","text":"Sub-Command Description ai speech csr model create Creates a new custom speech recognition model using previously uploaded datasets and/or text supplied to the create command. ai speech csr model status Checks the status of a custom speech recognition model. ai speech csr model list Lists details about existing custom speech recognition models. ai speech csr model update Updates an existing custom speech recognition model. ai speech csr model delete Deletes an existing custom speech recognition model. ai speech csr model copy Copies an existing custom speech recognition model."},{"location":"reference/cli/speech/csr/model/#examples","title":"Examples","text":"Create custom speech recognition model<pre><code>ai speech csr model create --key YOUR_KEY --region YOUR_REGION --project PROJECT_URL --name MODEL_NAME --base BASE_URL --dataset DATASET_URL --language LANGUAGE_CODE --description \"Model Description\"\n</code></pre> List all custom speech recognition models<pre><code>ai speech csr model list --key YOUR_KEY --region YOUR_REGION --models\n</code></pre> Delete a custom speech recognition model<pre><code>ai speech csr model delete --key YOUR_KEY --region YOUR_REGION --model MODEL_URL\n</code></pre>"},{"location":"reference/cli/speech/csr/model/copy/","title":"<code>ai speech csr model copy</code>","text":"<p>The <code>ai speech csr model copy</code> command copies an existing custom speech recognition model from one region to another region.</p> <p>Note</p> <p>Only adapted models are allowed to copy to another subscription.</p>"},{"location":"reference/cli/speech/csr/model/copy/#usage","title":"Usage","text":"<pre><code>ai speech csr model copy [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/model/copy/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key for the speech service. <code>--region REGION</code> The region where your speech service is located. <code>--model URL</code> The URL of the model to be copied. <code>--target SUBSCRIPTION</code> The target subscription where the model will be copied to. <code>--output json FILENAME</code> Outputs the result in JSON format to a specified file. <code>--output url @@FILE</code> Outputs the result URL to a specified file. <code>--output id @@FILE</code> Outputs the result ID to a specified file. <code>--wait [TIMEOUT]</code> Waits for the operation to complete, with an optional timeout. <code>--input path PATH</code> Specifies the path for input files. <code>--foreach in @FILENAME</code> Executes the command for each line in the specified file. <code>--output path PATH</code> Specifies the path for output files. <code>--foreach in @FILENAME</code> Executes the command for each line in the specified file. <code>--save FILENAME</code> Saves the command options to a specified file. <code>--zip ZIPFILE</code> Specifies a ZIP file for the command."},{"location":"reference/cli/speech/csr/model/copy/#examples","title":"Examples","text":"Copy a custom speech recognition model to another region<pre><code>ai speech csr model copy --key my-key --region westus --model https://example.com/model --target my-target-subscription --output json result.json\n</code></pre>"},{"location":"reference/cli/speech/csr/model/create/","title":"<code>ai speech csr model create</code>","text":""},{"location":"reference/cli/speech/csr/model/create/#usage","title":"Usage","text":"<pre><code>ai speech csr model create [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/model/create/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specifies the key for the custom speech service connection. <code>--region REGION</code> Specifies the region of the custom speech service connection. <code>--project URL</code> URL of the project to which the custom model should be added. <code>--name NAME</code> Name of the custom speech recognition model. <code>--text @FILE</code> Path to the text file containing training data. <code>--base URL</code> URL of the base model to use for creating the custom model. <code>--dataset URL</code> URL of the dataset to be used for training. <code>--datasets URL1;URL2</code> Semicolon-separated URLs of multiple datasets to use for training. <code>--language LANGUAGE</code> Language code for the custom speech recognition model. <code>--description DESCRIPTION</code> Description of the custom model being created. <code>--output json FILENAME</code> Save the output in JSON format to the specified file. <code>--output url @@FILE</code> Save the output URL to the specified file. <code>--output id @@FILE</code> Save the output ID to the specified file. <code>--wait [TIMEOUT]</code> Wait for the operation to complete with an optional timeout. <code>--input path PATH</code> Path to the input data for creating the model. <code>--output path PATH</code> Specifies the output path for the resultant model. <code>--foreach in @FILENAME</code> Apply the command to each item in the specified file. <code>--save FILENAME</code> Save the command output to the specified file. <code>--zip ZIPFILE</code> Create a ZIP file of the output data."},{"location":"reference/cli/speech/csr/model/create/#examples","title":"Examples","text":"Create a custom speech recognition model with a specified project and name<pre><code>ai speech csr model create --project https://myprojecturl --name \"MyCustomModel\" --key myapikey --region westus --text @/path/to/textfile --base https://basemodelurl --dataset https://dataseturl --language en-US --description \"Custom model for specific domain\"\n</code></pre> Create a custom speech recognition model with multiple datasets<pre><code>ai speech csr model create --project https://myprojecturl --name \"MyCustomModelMultiDataset\" --key myapikey --region westus --text @/path/to/textfile --base https://basemodelurl --datasets https://dataseturl1;https://dataseturl2 --language en-US --description \"Custom model using multiple datasets\"\n</code></pre>"},{"location":"reference/cli/speech/csr/model/delete/","title":"<code>ai speech csr model delete</code>","text":"<p>The <code>ai speech csr model delete</code> command deletes an existing custom speech recognition model.</p>"},{"location":"reference/cli/speech/csr/model/delete/#usage","title":"Usage","text":"<pre><code>ai speech csr model delete [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/model/delete/#options","title":"Options","text":"Option/Argument Description <code>--key KEY</code> The key for the Azure AI services connection. <code>--region REGION</code> The region for the Azure AI services connection. <code>--model URL</code> The URL of the model to be deleted. <code>--input path PATH</code> Input path to a custom configuration for the command. <code>--output path PATH</code> Output path to save the results of the command. <code>--output json FILENAME</code> Output file path to save the results in JSON format. <code>--foreach in @FILENAME</code> Iterate over multiple inputs specified in the provided file, executing the command for each. <code>--save FILENAME</code> The file path where the results should be saved. <code>--zip ZIPFILE</code> The path to a ZIP file to store the command results."},{"location":"reference/cli/speech/csr/model/delete/#examples","title":"Examples","text":"Delete a custom speech recognition model<pre><code>ai speech csr model delete --key YOUR_KEY --region YOUR_REGION --model URL_OF_THE_MODEL\n</code></pre> Delete a custom speech recognition model and save the output to a specific path<pre><code>ai speech csr model delete --key YOUR_KEY --region YOUR_REGION --model URL_OF_THE_MODEL --output path OUTPUT_PATH\n</code></pre>"},{"location":"reference/cli/speech/csr/model/list/","title":"<code>ai speech csr model list</code>","text":""},{"location":"reference/cli/speech/csr/model/list/#usage","title":"Usage","text":"List all custom speech recognition models<pre><code>ai speech csr model list --key YOUR_KEY --region YOUR_REGION --models\n</code></pre>"},{"location":"reference/cli/speech/csr/model/list/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specifies the key to access the Azure AI service. <code>--region REGION</code> Specifies the region to access the Azure AI service. <code>--models</code> Lists all custom speech recognition models. <code>--languages</code> Lists all languages supported by models. <code>--base-models</code> Lists all base models available. <code>--project URL</code> URL of the project associated with the models. <code>--input path PATH</code> Provides the input path for the command. <code>--output path PATH</code> Provides the output path for the command. <code>--output json FILENAME</code> Writes the output in JSON format to a file. <code>--foreach in @FILENAME</code> Iterates over the list specified in the file. <code>--save FILENAME</code> Saves the current configuration to a file. <code>--zip ZIPFILE</code> Zips the output files into a ZIP file."},{"location":"reference/cli/speech/csr/model/list/#examples","title":"Examples","text":"<p>List all custom speech recognition models<pre><code>ai speech csr model list --key YOUR_KEY --region YOUR_REGION --models\n</code></pre> List all languages supported by models<pre><code>ai speech csr model list --key YOUR_KEY --region YOUR_REGION --languages\n</code></pre> List all base models available<pre><code>ai speech csr model list --key YOUR_KEY --region YOUR_REGION --base models\n</code></pre></p>"},{"location":"reference/cli/speech/csr/model/status/","title":"<code>ai speech csr model status</code>","text":"<p>The <code>ai speech csr model status</code> command checks the asynchronous creation status of a custom speech recognition model.</p>"},{"location":"reference/cli/speech/csr/model/status/#usage","title":"Usage","text":"<pre><code>ai speech csr model status [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/model/status/#options","title":"Options","text":"Option Description <code>--key KEY</code> The key used to authenticate with the Azure AI service. <code>--region REGION</code> The region where the Azure AI service is hosted. <code>--model URL</code> The URL of the custom speech recognition model. <code>--output json FILENAME</code> The filename to save the output in JSON format. <code>--wait [TIMEOUT]</code> Wait for the operation to complete with an optional timeout. <code>--input path PATH</code> Path to input file. <code>--output path PATH</code> Path to output file. <code>--foreach in @FILENAME</code> Iterate over each input in the provided file. <code>--save FILENAME</code> Save the results to the specified filename. <code>--zip ZIPFILE</code> Specify the zip file for the operation."},{"location":"reference/cli/speech/csr/model/status/#examples","title":"Examples","text":"Check the status of a custom speech recognition model<pre><code>ai speech csr model status --key YOUR_KEY --region YOUR_REGION --model YOUR_MODEL_URL --output json status.json\n</code></pre>"},{"location":"reference/cli/speech/csr/model/update/","title":"<code>ai speech csr model update</code>","text":"<p>The <code>ai speech csr model update</code> command updates an existing custom speech recognition model with an updated name, description, and/or project reference.</p>"},{"location":"reference/cli/speech/csr/model/update/#usage","title":"Usage","text":"<pre><code>ai speech csr model update [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/model/update/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key for accessing the Azure AI service. <code>--region REGION</code> The region where the Azure AI service is deployed. <code>--model URL</code> The URL of the model to update. <code>--project URL</code> The URL of the project to associate with the model. <code>--name NAME</code> A new name for the model. <code>--description DESCRIPTION</code> A new description for the model. <code>--input path PATH</code> Path to the input file. <code>--output path PATH</code> Path to the output file. <code>--output json FILENAME</code> Filename for the output in JSON format. <code>--foreach in @FILENAME</code> Iterate over each line in the specified file. <code>--save FILENAME</code> Save the command output to the specified file. <code>--zip ZIPFILE</code> Path to the zip file."},{"location":"reference/cli/speech/csr/model/update/#examples","title":"Examples","text":"Update a custom speech recognition model with a new name and description<pre><code>ai speech csr model update --key YOUR_KEY --region YOUR_REGION --model MODEL_URL --name \"New Model Name\" --description \"New Description\"\n</code></pre>"},{"location":"reference/cli/speech/csr/project/","title":"<code>ai speech csr project</code>","text":"<p>The <code>ai speech csr project</code> command group is used to manage custom speech recognition projects in Azure AI services.</p>"},{"location":"reference/cli/speech/csr/project/#usage","title":"Usage","text":"<pre><code>ai speech csr project [subcommand] [options]\n</code></pre>"},{"location":"reference/cli/speech/csr/project/#sub-commands","title":"Sub-commands","text":"Sub-command Description ai speech csr project create Creates a new custom speech recognition project ai speech csr project delete Deletes an existing custom speech recognition project ai speech csr project list Lists details about existing custom speech recognition projects ai speech csr project status Checks the asynchronous creation status of a custom speech recognition project ai speech csr project update Updates an existing custom speech recognition project with new name/description"},{"location":"reference/cli/speech/csr/project/#examples","title":"Examples","text":"Create a new custom speech recognition project<pre><code>ai speech csr project create --key &lt;your-key&gt; --region &lt;your-region&gt; --name &lt;project-name&gt; --language &lt;language-code&gt; --description &lt;project-description&gt;\n</code></pre> Delete an existing custom speech recognition project<pre><code>ai speech csr project delete --key &lt;your-key&gt; --region &lt;your-region&gt; --project &lt;project-url&gt;\n</code></pre> List all custom speech recognition projects<pre><code>ai speech csr project list --key &lt;your-key&gt; --region &lt;your-region&gt;\n</code></pre> Check the status of a custom speech recognition project<pre><code>ai speech csr project status --key &lt;your-key&gt; --region &lt;your-region&gt; --project &lt;project-url&gt;\n</code></pre> Update a custom speech recognition project<pre><code>ai speech csr project update --key &lt;your-key&gt; --region &lt;your-region&gt; --project &lt;project-url&gt; --name &lt;new-name&gt; --description &lt;new-description&gt;\n</code></pre>"},{"location":"reference/cli/speech/csr/project/create/","title":"<code>ai speech csr project create</code>","text":"<p>The <code>ai speech csr project create</code> command creates a new custom speech recognition project.</p>"},{"location":"reference/cli/speech/csr/project/create/#usage","title":"Usage","text":"<pre><code>ai speech csr project create [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/project/create/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key for the speech service. <code>--region REGION</code> The region of the speech service. <code>--name NAME</code> The name of the custom speech recognition project. <code>--language LANGUAGE</code> The language of the custom speech recognition project. <code>--description DESCRIPTION</code> The description of the custom speech recognition project. <code>--output json FILENAME</code> Output the result in JSON format to a file. <code>--output url @@FILE</code> Output the result URL to a file. <code>--output id @@FILE</code> Output the project ID to a file. <code>--input path PATH</code> The input path for the project files. <code>--output path PATH</code> The output path for the project files. <code>--foreach in @FILENAME</code> Apply the command to each line in the file. <code>--save FILENAME</code> Save the command output to a file. <code>--zip ZIPFILE</code> Create a zip file of the project."},{"location":"reference/cli/speech/csr/project/create/#examples","title":"Examples","text":"Creating a new custom speech recognition project<pre><code>ai speech csr project create --key YOUR_API_KEY --region YOUR_REGION --name \"MyProject\" --language \"en-US\" --description \"My custom speech recognition project\"\n</code></pre>"},{"location":"reference/cli/speech/csr/project/delete/","title":"<code>ai speech csr project delete</code>","text":"<p>The <code>ai speech csr project delete</code> command deletes an existing custom speech recognition project.</p>"},{"location":"reference/cli/speech/csr/project/delete/#usage","title":"Usage","text":"<pre><code>ai speech csr project delete [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/project/delete/#options","title":"Options","text":"Option Description <code>--key KEY</code> The API key to authenticate the request <code>--region REGION</code> The region where your Azure AI services are deployed <code>--project URL</code> The URL of the project to delete <code>--input path PATH</code> Specify the input file path <code>--output path PATH</code> Specify the output file path <code>--output json FILENAME</code> Specify a JSON file to output <code>--foreach in @FILENAME</code> Execute the command for each item in the specified file <code>--save FILENAME</code> Specify a file to save the command output <code>--zip ZIPFILE</code> Specify a ZIP file to compress the output"},{"location":"reference/cli/speech/csr/project/delete/#examples","title":"Examples","text":"Delete a custom speech recognition project<pre><code>ai speech csr project delete --key your_api_key --region your_region --project your_project_url\n</code></pre> <p>This command deletes the custom speech recognition project specified by the <code>--project</code> URL.</p>"},{"location":"reference/cli/speech/csr/project/list/","title":"<code>ai speech csr project list</code>","text":""},{"location":"reference/cli/speech/csr/project/list/#ai-speech-csr-project-list_1","title":"<code>ai speech csr project list</code>","text":"<p>The <code>ai speech csr project list</code> command lists details about existing custom speech recognition projects.</p>"},{"location":"reference/cli/speech/csr/project/list/#usage","title":"Usage","text":"<pre><code>ai speech csr project list [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/project/list/#options","title":"Options","text":"Option Description <code>--key KEY</code> Subscription key to use. <code>--region REGION</code> Region of the Azure AI service. <code>--projects</code> List of projects. <code>--languages</code> List of project languages. <code>--input path PATH</code> Input file path. <code>--output path PATH</code> Output file path. <code>--output json FILENAME</code> Output results in JSON format. <code>--foreach in @FILENAME</code> Execute command for each item in the input file. <code>--save FILENAME</code> Save command output to a file. <code>--zip ZIPFILE</code> ZIP the output files."},{"location":"reference/cli/speech/csr/project/list/#examples","title":"Examples","text":"List all custom speech recognition projects<pre><code>ai speech csr project list --key YOUR_KEY --region YOUR_REGION --projects\n</code></pre> List languages of a specific project<pre><code>ai speech csr project list --key YOUR_KEY --region YOUR_REGION --languages\n</code></pre>"},{"location":"reference/cli/speech/csr/project/status/","title":"<code>ai speech csr project status</code>","text":"<p>The <code>ai speech csr project status</code> command checks the asynchronous creation status of a custom speech recognition project.</p>"},{"location":"reference/cli/speech/csr/project/status/#usage","title":"Usage","text":"<pre><code>ai speech csr project status [...]\n</code></pre>"},{"location":"reference/cli/speech/csr/project/status/#options","title":"Options","text":"Option Description <code>--key KEY</code> Azure Cognitive Services API key <code>--region REGION</code> Azure region <code>--project URL</code> URL of the custom speech recognition project <code>--input path PATH</code> Path to the input file <code>--output path PATH</code> Path to the output file <code>--output json FILENAME</code> Filename to output JSON <code>--foreach in @FILENAME</code> Apply command to each item in the specified file <code>--save FILENAME</code> Save the command output to a file <code>--zip ZIPFILE</code> Create a zip file from the output"},{"location":"reference/cli/speech/csr/project/status/#examples","title":"Examples","text":"Check the status of a custom speech recognition project<pre><code>ai speech csr project status --key YOUR_API_KEY --region YOUR_REGION --project YOUR_PROJECT_URL\n</code></pre>"},{"location":"reference/cli/speech/csr/project/update/","title":"<code>ai speech csr project update</code>","text":"<p>The <code>ai speech csr project update</code> command updates an existing custom speech recognition project with an updated name and/or description.</p>"},{"location":"reference/cli/speech/csr/project/update/#usage","title":"Usage","text":"<pre><code>ai speech csr project update [OPTIONS]\n</code></pre>"},{"location":"reference/cli/speech/csr/project/update/#options","title":"Options","text":"Option Description <code>--key KEY</code> Azure Cognitive Services subscription key. <code>--region REGION</code> Azure region. <code>--project URL</code> URL of the project to update. <code>--name NAME</code> New name for the project. <code>--description DESCRIPTION</code> New description for the project. <code>--input path PATH</code> Input path for additional parameters. <code>--output path PATH</code> Output path for the results. <code>--output json FILENAME</code> Output results in JSON format to the specified file. <code>--foreach in @FILENAME</code> Execute command for each item in the specified file, replacing placeholders. <code>--save FILENAME</code> Save command output to the specified file. <code>--zip ZIPFILE</code> Compress the output into a ZIP file."},{"location":"reference/cli/speech/csr/project/update/#examples","title":"Examples","text":"Update a project name and description<pre><code>ai speech csr project update --key YOUR_KEY --region YOUR_REGION --project YOUR_PROJECT_URL --name \"New Project Name\" --description \"New Project Description\"\n</code></pre>"},{"location":"reference/cli/speech/profile/","title":"<code>ai speech profile</code>","text":"<p>The <code>ai speech profile</code> command manages voice profiles, which are used in speaker recognition and transcription scenarios.</p>"},{"location":"reference/cli/speech/profile/#usage","title":"Usage","text":"<pre><code>ai speech profile [command] [options]\n</code></pre>"},{"location":"reference/cli/speech/profile/#sub-commands","title":"Sub-commands","text":"Sub-command Description ai speech profile create Create a new voice profile. ai speech profile delete Delete a given voice profile. ai speech profile enroll Enroll a given voice profile using an audio sample. ai speech profile list List all voice profiles for the current key/region. ai speech profile status Output information concerning the selected voice profile."},{"location":"reference/cli/speech/profile/#examples","title":"Examples","text":"Create a new voice profile<pre><code>ai speech profile create --key YOUR_KEY --region YOUR_REGION\n</code></pre> Delete a voice profile<pre><code>ai speech profile delete --id PROFILE_ID --key YOUR_KEY --region YOUR_REGION\n</code></pre> Enroll a voice profile using an audio sample<pre><code>ai speech profile enroll --id PROFILE_ID --file AUDIO_SAMPLE_FILE --kind KIND --key YOUR_KEY --region YOUR_REGION\n</code></pre> List all voice profiles<pre><code>ai speech profile list --key YOUR_KEY --region YOUR_REGION\n</code></pre> Get the status of a voice profile<pre><code>ai speech profile status --id PROFILE_ID --key YOUR_KEY --region YOUR_REGION\n</code></pre>"},{"location":"reference/cli/speech/profile/create/","title":"<code>ai speech profile create</code>","text":"<p>The <code>ai speech profile create</code> command manages voice profiles used in speaker recognition and transcription scenarios. This command creates a new voice profile.</p>"},{"location":"reference/cli/speech/profile/create/#usage","title":"Usage","text":"<pre><code>ai speech profile create [...]\n</code></pre>"},{"location":"reference/cli/speech/profile/create/#options","title":"Options","text":"Option Description <code>--key</code> The API key to authenticate the request. <code>--region</code> The region of the Azure service. <code>--kind</code> The kind of voice profile to create. <code>--output id PATH</code> The path to save the profile ID output."},{"location":"reference/cli/speech/profile/create/#examples","title":"Examples","text":"<p>Create a new voice profile<pre><code>ai speech profile create --key YOUR_API_KEY --region YOUR_REGION --kind YOUR_KIND\n</code></pre> Create a new voice profile and save the ID output<pre><code>ai speech profile create --key YOUR_API_KEY --region YOUR REGION --kind YOUR_KIND --output id myProfile.id\n</code></pre></p>"},{"location":"reference/cli/speech/profile/delete/","title":"<code>ai speech profile delete</code>","text":"<p>The <code>ai speech profile delete</code> command delete a voice profiles.</p>"},{"location":"reference/cli/speech/profile/delete/#usage","title":"Usage","text":"<pre><code>ai speech profile delete [...]\n</code></pre>"},{"location":"reference/cli/speech/profile/delete/#options","title":"Options","text":"Option Description <code>--id</code> ID of the voice profile to delete <code>--file</code> Path to a file containing a list of profile IDs to delete"},{"location":"reference/cli/speech/profile/delete/#examples","title":"Examples","text":"Delete a voice profile by ID<pre><code>ai speech profile delete --id 12345\n</code></pre> Delete multiple voice profiles listed in a file<pre><code>ai speech profile delete --file @profiles.txt\n</code></pre>"},{"location":"reference/cli/speech/profile/enroll/","title":"<code>ai speech profile enroll</code>","text":"<p>The <code>ai speech profile enroll</code> command enrolls a given voice profile using an audio sample.</p>"},{"location":"reference/cli/speech/profile/enroll/#usage","title":"Usage","text":"<pre><code>ai speech profile enroll [...]\n</code></pre> Audio sample length requirements <p>For TextIndependentIdentification, the enrollment audio sample must contain 30 seconds or more of speech to be successful. For TextIndependentVerification, three or more samples with a combined 15 seconds or more of speech are required.</p>"},{"location":"reference/cli/speech/profile/enroll/#options","title":"Options","text":"Option Description <code>--key KEY</code> The subscription key to use. <code>--region REGION</code> The region for the speech resource. <code>--id ID</code> The ID of the voice profile to enroll. <code>--file FILE</code> The path to the audio sample file used for enrollment. <code>--kind KIND</code> The kind of profile enrollment (<code>TextIndependentIdentification</code> or <code>TextIndependentVerification</code>). <code>--output file PATH</code> The output file path to save the resulting data. <code>--output json PATH</code> The output JSON file path to save the resulting data."},{"location":"reference/cli/speech/profile/enroll/#examples","title":"Examples","text":"Enroll a voice profile with a specific ID, audio sample file, and kind<pre><code>ai speech profile enroll --id \"1234abcd\" --file \"sample.wav\" --kind \"TextIndependentIdentification\"\n</code></pre>"},{"location":"reference/cli/speech/profile/list/","title":"<code>ai speech profile list</code>","text":"<p>The <code>ai speech profile list</code> command is used to list all voice profiles for the current key/region. Voice profiles are essential in speaker recognition and transcription scenarios.</p>"},{"location":"reference/cli/speech/profile/list/#usage","title":"Usage","text":"<pre><code>ai speech profile list [...]\n</code></pre>"},{"location":"reference/cli/speech/profile/list/#options","title":"Options","text":"Option Description <code>--key KEY</code> Specifies the subscription key to use. <code>--region REGION</code> Specifies the region for the speech service. <code>--kind KIND</code> Specifies the kind of profile to list. <code>--output file PATH</code> Specifies the output file path for the results in file format. <code>--output json PATH</code> Specifies the output file path for the results in JSON format."},{"location":"reference/cli/speech/profile/list/#examples","title":"Examples","text":"List all voice profiles for the specified key and region<pre><code>ai speech profile list --key YOUR_KEY_HERE --region YOUR_REGION_HERE\n</code></pre> List all voice profiles and save the output to a file<pre><code>ai speech profile list --key YOUR_KEY_HERE --region YOUR_REGION_HERE --output file profiles.txt\n</code></pre> List all voice profiles and save the output in JSON format<pre><code>ai speech profile list --key YOUR_KEY_HERE --region YOUR_REGION_HERE --output json profiles.json\n</code></pre>"},{"location":"reference/cli/speech/profile/status/","title":"<code>ai speech profile status</code>","text":"<p>The <code>ai speech profile status</code> command manages voice profiles, which are used in speaker recognition and transcription scenarios.</p>"},{"location":"reference/cli/speech/profile/status/#usage","title":"Usage","text":"<pre><code>ai speech profile status [...]\n</code></pre>"},{"location":"reference/cli/speech/profile/status/#options","title":"Options","text":"Option Description <code>--id</code> The ID of the voice profile. <code>--kind</code> The kind of the voice profile. <code>--key</code> The key for the voice profile. <code>--region</code> The region for the voice profile. <code>--output file PATH</code> Output the status to a file at the specified path. <code>--output json PATH</code> Output the status to a JSON file at the specified path."},{"location":"reference/cli/speech/profile/status/#examples","title":"Examples","text":"Get status of a voice profile<pre><code>ai speech profile status --id &lt;profile-id&gt;\n</code></pre>"},{"location":"reference/cli/speech/speaker/","title":"<code>ai speech speaker</code>","text":"<p>The <code>ai speech speaker</code> command manages identification/verification profiles, which are used in speaker recognition scenarios.</p>"},{"location":"reference/cli/speech/speaker/#usage","title":"Usage","text":"<pre><code>ai speech speaker [command]\n</code></pre>"},{"location":"reference/cli/speech/speaker/#sub-commands","title":"Sub-Commands","text":"Sub-Command Description identify Identify a speaker using the specified audio. verify Verify a speaker using the specified audio."},{"location":"reference/cli/speech/speaker/#examples","title":"Examples","text":"Identify a speaker using specified audio<pre><code>ai speech speaker identify --audio-file /path/to/audio/file.wav\n</code></pre> Verify a speaker using specified audio<pre><code>ai speech speaker verify --audio-file /path/to/audio/file.wav --profile-id your-profile-id\n</code></pre>"},{"location":"reference/cli/speech/speaker/identify/","title":"<code>ai speech speaker identify</code>","text":"<p>The <code>ai speaker identify</code> command identifies speakers in a given audio sample against one or more voice profiles.</p>"},{"location":"reference/cli/speech/speaker/identify/#usage","title":"Usage","text":"<pre><code>ai speech speaker identify [...]\n</code></pre> Audio sample length requirements <p>The identification audio sample must contain 30 seconds or more of speech to be successful.</p>"},{"location":"reference/cli/speech/speaker/identify/#options","title":"Options","text":"Option/Argument Description <code>--key KEY</code> API Key for authentication <code>--region REGION</code> Azure region for the resource <code>--id ID</code> ID of the voice profile <code>--file FILE</code> Path to the audio sample file <code>--log FILENAME</code> Path to the log file <code>--foreach in @ITEMS.txt</code> Batch process multiple items <code>--threads NUMBER</code> Number of threads to use for the command"},{"location":"reference/cli/speech/speaker/identify/#examples","title":"Examples","text":"Identify speaker in an audio sample against a single voice profile<pre><code>ai speech speaker identify --id &lt;VOICE_PROFILE_ID&gt; --file &lt;AUDIO_SAMPLE_FILE&gt;\n</code></pre> Identify speaker in an audio sample against multiple voice profiles<pre><code>ai speech speaker identify --ids [&lt;VOICE_PROFILE_ID1&gt;, &lt;VOICE_PROFILE_ID2&gt;, ...] --file &lt;AUDIO_SAMPLE_FILE&gt;\n</code></pre>"},{"location":"reference/cli/speech/speaker/verify/","title":"<code>ai speech speaker verify</code>","text":"<p>The <code>ai speech speaker verify</code> command verifies a speaker in a given audio sample against a voice profile. The returned JSON will have a \"result\" field with an \"Accept\" or \"Reject\" value.</p>"},{"location":"reference/cli/speech/speaker/verify/#usage","title":"Usage","text":"<pre><code>ai speech speaker verify [...]\n</code></pre> Audio sample length requirements <p>The verification audio sample must contain between 1 to 15 seconds of speech to be successful.</p>"},{"location":"reference/cli/speech/speaker/verify/#options","title":"Options","text":"Option Description <code>--id ID</code> Unique ID of the voice profile. <code>--file FILE</code> Path to the audio sample file. <code>--kind KIND</code> Type of speaker verification. <code>--key KEY</code> Subscription key for the service. <code>--region REGION</code> Region associated with the service. <code>--log FILENAME</code> Path to the log file. <code>--foreach in @ITEMS.txt</code> Process each item in the specified file. <code>--threads NUMBER</code> Number of concurrent threads."},{"location":"reference/cli/speech/speaker/verify/#examples","title":"Examples","text":"Verify a speaker with a provided audio sample<pre><code>ai speech speaker verify --id &lt;profile-id&gt; --file &lt;audio-sample.wav&gt;\n</code></pre> Verify a speaker with additional options<pre><code>ai speech speaker verify --id &lt;profile-id&gt; --file &lt;audio-sample.wav&gt; --kind &lt;verification-kind&gt; --log &lt;logfile.log&gt; --threads 4\n</code></pre>"},{"location":"reference/cli/test/","title":"<code>ai test</code>","text":"<p>The <code>ai test</code> command manages CLI YAML tests.</p>"},{"location":"reference/cli/test/#usage","title":"Usage","text":"<pre><code>ai test &lt;command&gt; [...]\n</code></pre>"},{"location":"reference/cli/test/#commands","title":"Commands","text":"Sub-command Description ai test list Lists CLI YAML tests. ai test run Runs CLI YAML tests."},{"location":"reference/cli/test/#examples","title":"Examples","text":"List CLI YAML tests<pre><code>ai test list\n</code></pre> Run CLI YAML tests<pre><code>ai test run\n</code></pre>"},{"location":"reference/cli/test/list/","title":"<code>ai test list</code>","text":"<p>The <code>ai test list</code> command lists CLI YAML tests.</p>"},{"location":"reference/cli/test/list/#usage","title":"Usage","text":"<pre><code>ai test list [...]\n</code></pre>"},{"location":"reference/cli/test/list/#options","title":"Options","text":"Option Description <code>--file FILE</code> File to use <code>--files FILE1 [FILE2 [...]]</code> A list of files to use <code>--files PATTERN1 [PATTERN2 [...]]</code> A list of file patterns to use <code>--test TEXT</code> Test text to use <code>--tests TEXT1 [TEXT2 [...]]</code> A list of test texts <code>--contains TEXT1 [TEXT2 [...]]</code> Filter tests that contain these texts <code>--remove TEXT1 [TEXT2 [...]]</code> Filter tests further by removing those that contain these texts"},{"location":"reference/cli/test/list/#examples","title":"Examples","text":"Lists all available tests<pre><code>ai test list\n</code></pre> Lists tests from files under current directory, that contain 'setup' or 'nightly', and 'java', but not 'skip'<pre><code>ai test list --tests setup nightly --contains java --remove skip\n</code></pre> Lists tests from files under 'tests' directory, that contain 'test3', but not 'skip'<pre><code>ai test list --files ../tests/**/*.yaml --contains test3 --remove skip\n</code></pre>"},{"location":"reference/cli/test/run/","title":"<code>ai test run</code>","text":"<p>The <code>ai test run</code> command runs CLI YAML tests.</p>"},{"location":"reference/cli/test/run/#usage","title":"Usage","text":"<pre><code>ai test run [...]\n</code></pre>"},{"location":"reference/cli/test/run/#options","title":"Options","text":"Option Description <code>--file FILE</code> Specify a file to run tests from <code>--files FILE1 [FILE2 [...]]</code> Specify multiple files or patterns to run tests from <code>--tests TEXT1 [TEXT2 [...]]</code> Specify tests to run <code>--contains TEXT1 [TEXT2 [...]]</code> Filter tests that contain specified text <code>--remove TEXT1 [TEXT2 [...]]</code> Exclude tests that contain specified text <code>--output-file FILE</code> Specify file to output test results <code>--output-format trx|junit</code> Specify output format (trx or junit)"},{"location":"reference/cli/test/run/#examples","title":"Examples","text":"Runs all available tests<pre><code>ai test run\n</code></pre> Run tests from files under current directory, that contain 'setup' or 'nightly', and 'java', but not 'skip'<pre><code>ai test run --tests setup nightly --contains java --remove skip\n</code></pre> Run tests from files under 'tests' directory, that contain 'test3', but not 'skip'<pre><code>ai test run --files ../tests/**/*.yaml --contains test3 --remove skip\n</code></pre>"},{"location":"reference/test-framework/yaml/","title":"<code>ai test</code> YAML Framework","text":"<p><code>ai test</code> is a YAML-based test framework/runner that can be used to run tests on any command-line tool or script. It is designed to be simple to use and understand, and to be able to run tests in parallel.</p> Example test case<pre><code>- name: Build search index\n  command: ai search index update --files \"data/*.md\" --index-name myindex\n  expect-regex: |\n    Updating search index 'myindex' ...\n    Updating search index 'myindex' ... Done!\n</code></pre> <p>The test case YAML file contains a list of test cases. Each test case is a dictionary with the following keys:</p> Key Required Description <code>tests</code>, <code>steps</code> Required A list of test cases to run. <code>command</code>, <code>script</code>, <code>bash</code> Required The command or script to run. <code>name</code> Required The name of the test case. <code>env</code> Optional A dictionary of environment variables to set before running the command or script. <code>input</code> Optional The input to pass to the command or script. <code>expect</code> Optional A string that instructs the LLM (e.g. GPT-4) to decide pass/fail based on stdout/stderr. <code>expect-regex</code> Optional A list of regular expressions that must be matched in the stdout/stderr output. <code>not-expect-regex</code> Optional A list of regular expressions that must not be matched in the stdout/stderr output. <code>parallelize</code> Optional Whether the test case should run in parallel with other test cases. <code>skipOnFailure</code> Optional Whether the test case should be skipped when it fails. <code>tag</code>/<code>tags</code> Optional A list of tags to associate with the test case. <code>timeout</code> Optional The maximum time allowed to execute the test case, in milliseconds. <code>workingDirectory</code> Optional The working directory where the test will be run. <code>matrix</code>, <code>matrix-file</code> Optional A matrix used to parameterize and/or create multiple variations of a test case. <p>Test cases can be organized into areas, sub-areas, and so on.</p> <pre><code>- area: Area 1\n  tests:\n\n  - name: Test 1\n    command: echo \"Hello, world!\"\n\n  - name: Test 2\n    command: echo \"Goodbye, world!\"\n</code></pre> <p>Test cases can also be grouped into classes. </p> <pre><code>- class: Class 1\n  tests:\n\n  - name: Test 1\n    command: echo \"Hello, world!\"\n\n  - name: Test 2\n    command: echo \"Goodbye, world!\"\n</code></pre> <p>If no class is specified, the default class is \"TestCases\".</p>"},{"location":"reference/test-framework/yaml/#yaml-reference","title":"YAML Reference","text":""},{"location":"reference/test-framework/yaml/#tests-steps","title":"<code>tests</code>, <code>steps</code>","text":"<p>Required.</p> <p>When present, specifies a list of test cases to run.</p> <p>By default, for <code>steps</code>, all tests will be run sequentially. The full set of tests will be run in parallel with other <code>steps</code> for other test areas, unless <code>parallelize: false</code> is set.</p> <p>Examples:</p> <pre><code>tests:\n- name: Test 1\n  command: echo \"Hello, world!\"\n- name: Test 2\n  command: echo \"Goodbye, world!\"\n</code></pre> <pre><code>steps:\n- name: Step 1\n  bash: echo \"Hello, world!\"\n- name: Step 2\n  bash: echo \"Goodbye, world!\"\n</code></pre>"},{"location":"reference/test-framework/yaml/#command-script-bash","title":"<code>command</code>, <code>script</code>, <code>bash</code>","text":"<p>Required.</p> <p>Represents how the test case will be run.</p> <p>If the specified command or script returns an error level of non-zero, the test will fail. If it returns zero, it will pass (given that all 'expect' conditions are also met).</p> <p>Example command:</p> <pre><code>command: ai chat --interactive\n</code></pre> <p>Example for a bash script:</p> <pre><code>bash: |\n  if [ -f /etc/os-release ]; then \n    python3 script.py \n  else \n    py script.py\n  fi\n</code></pre>"},{"location":"reference/test-framework/yaml/#env","title":"<code>env</code>","text":"<p>Optional. Inherits from parent.</p> <p>When present, a dictionary of environment variables to set before running the command or script.</p> <p>Example:</p> <pre><code>env:\n  JAVA_HOME: /path/to/java\n</code></pre>"},{"location":"reference/test-framework/yaml/#input","title":"<code>input</code>","text":"<p>Optional.</p> <p>When present, will be passed to the command or script as stdin.</p> <p>Example:</p> <pre><code>input: |\n  Tell me a joke\n  Tell me another\n  exit\n</code></pre>"},{"location":"reference/test-framework/yaml/#expect","title":"<code>expect</code>","text":"<p>Optional.</p> <p>Represents instructions given to LLM (e.g. GPT-4) along with stdout/stderr to decide whether the test passes or fails.</p> <p>Example: </p> <pre><code>expect: the output must have exactly two jokes\n</code></pre>"},{"location":"reference/test-framework/yaml/#expect-regex","title":"<code>expect-regex</code>","text":"<p>Optional.</p> <p>Each string (or line in multiline string) is a regular expression that must be matched in the stdout/stderr output.</p> <p>If any regular expression is not matched, the test will fail. If all expressions are matched, in order, the test will pass.</p> <p>Example:</p> <pre><code>expect-regex: |\n  Regex 1\n  Regex 2\n</code></pre>"},{"location":"reference/test-framework/yaml/#not-expect-regex","title":"<code>not-expect-regex</code>","text":"<p>Optional.</p> <p>When present, each string (or line in multiline string) is a regular expression that must not be matched in the stdout/stderr output.</p> <p>If any regular expression is matched, the test fails. If none match, the test passes.</p> <p>Example:</p> <pre><code>not-expect-regex: |\n  ERROR\n  curseword1\n  curseword2\n</code></pre>"},{"location":"reference/test-framework/yaml/#parallelize","title":"<code>parallelize</code>","text":"<p>Optional.</p> <p>When present, specifies if the test cases should run in parallel or not.</p> <p>By default, it is set to <code>false</code> for all tests, except for the first step in a <code>steps</code> test sequence.</p> <p>Example:</p> <pre><code>parallelize: true\n</code></pre>"},{"location":"reference/test-framework/yaml/#skiponfailure","title":"<code>skipOnFailure</code>","text":"<p>Optional.</p> <p>When present, specifies if the test case should be skipped when it fails.</p> <p>By default, it is set to <code>false</code>.</p> <p>Example: </p> <pre><code>skipOnFailure: true\n</code></pre>"},{"location":"reference/test-framework/yaml/#tagtags","title":"<code>tag</code>/<code>tags</code>","text":"<p>Optional. Inherits from parent.</p> <p>When present, specifies a list of tags to associate with the test case.</p> <p>Tags accumulate from parent to child, so if a tag is specified in a parent, it will be inherited by all children.</p> <p>Examples:</p> <pre><code>tag: skip\n</code></pre> <pre><code>tags:\n- slow\n- performance\n- long-running\n</code></pre> <pre><code>area: Area 1\ntags: [echo]\ntests:\n\n- name: Test 1\n  command: echo \"Hello, world!\"\n  tags: [hello]\n\n- name: Test 2\n  command: echo \"Goodbye, world!\"\n  tags: [bye]\n</code></pre>"},{"location":"reference/test-framework/yaml/#timeout","title":"<code>timeout</code>","text":"<p>Optional.</p> <p>When present, specifies the maximum time allowed to execute the test case, in milliseconds. Defaults to infinite.</p> <p>Example:</p> <pre><code>timeout: 3000  # 3 seconds\n</code></pre>"},{"location":"reference/test-framework/yaml/#workingdirectory","title":"<code>workingDirectory</code>","text":"<p>Optional. Inherits from parent.</p> <p>When present, specifies an absolute path or relative path where the test will be run.</p> <p>When specified as a relative path, it will be relative to the working directory of the parent, or if no parent exists, where the test case file is located.</p>"},{"location":"reference/test-framework/yaml/#matrix-matrix-file","title":"<code>matrix</code>, <code>matrix-file</code>","text":"<p>Optional. Inerits from parent.</p> <p>When present, specifies a matrix (set of values) used to parameterize and/or create multiple variations of a test case with different parameter values. This is achieved using the <code>matrix</code> key and <code>${{ matrix.VALUE }}</code> syntax within the test cases.</p> <p>Examples:</p> <pre><code>- name: Example Matrix Test\n  matrix:\n    VALUE: [1, 2, 3]\n  bash: echo \"Value is ${{ matrix.VALUE }}\"\n</code></pre> <p>In this example, the test case will run three times with <code>VALUE</code> set to 1, 2, and 3 respectively.</p> <pre><code>matrix:\n  animals: [ cats, bears, goats ]\n  temperature: [ 0.8, 1.0 ]\ncommand: 'ai chat --question \"Tell me a joke about ${{ matrix.animals }}\"'\nexpect: 'The joke should be about ${{ matrix.animals }}'\n</code></pre> <p>In this example the test case will run six times (2x3) with <code>temperature</code> set to 0.8 and 1.0, and <code>animals</code> set to cats, bears, and goats.</p> <pre><code>matrix:\n  assistant-id: asst_TqfFCksyWK83VKe76kiBYWGt\n  foreach:\n  - question: How do you create an MP3 file with speech synthesis from the text \"Hello, World!\"?\n  - question: How do you recognize speech from an MP3 file?\n  - question: How do you recognize speech from a microphone?\nsteps:\n- name: Inference call to `ai chat`\n  command: ai chat\n  arguments:\n    question: ${{ matrix.question }}\n    assistant-id: ${{ matrix.assistant-id }}\n    output-chat-history: chat-history-${{ matrix.__matrix_id__ }}.jsonl\n</code></pre> <p>In this example the test case will run three times with <code>assistant-id</code> set to <code>asst_TqfFCksyWK83VKe76kiBYWGt</code>, and <code>question</code> set to the three questions specified in the <code>foreach</code> list, and the <code>output-chat-history</code> specifies where to save the chat history, using a filename that is unique to the \"matrix\" combination.</p> <pre><code>matrix-file: questions.yaml\n</code></pre> <p><code>questions.yaml</code>: <pre><code>foreach:\n- question: How do you create an MP3 file with speech synthesis from the text \"Hello, World!\"?\n- question: How do you recognize speech from an MP3 file?\n- question: How do you recognize speech from a microphone?\n</code></pre></p> <p>In this example, the matrix is loaded from a file.</p>"},{"location":"samples/sk-chat-with-agents-cs/","title":"Program Overview","text":""},{"location":"samples/sk-chat-with-agents-cs/#introduction","title":"Introduction","text":"<p>The <code>Program.cs</code> file is a C# application that uses the Microsoft Semantic Kernel to facilitate a conversation between two agents\u2014a CopyWriter and an ArtDirector. The goal of this conversation is to refine and approve a piece of copywriting based on user input. The program uses Azure OpenAI for its chat completions, leveraging environment variables for configuration settings.</p>"},{"location":"samples/sk-chat-with-agents-cs/#how-it-works","title":"How It Works","text":""},{"location":"samples/sk-chat-with-agents-cs/#agents","title":"Agents","text":"<ol> <li>CopyWriter: This agent is tasked with refining copy based on user input and its own expertise. It operates under specific instructions that emphasize brevity, focus, and a dry sense of humor.</li> <li>ArtDirector: This agent reviews the copy provided by the CopyWriter and gives approval or feedback for further refinement. It operates under instructions inspired by David Ogilvy's principles of copywriting.</li> </ol>"},{"location":"samples/sk-chat-with-agents-cs/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>AZURE_OPENAI_SYSTEM_PROMPT</code>: The system prompt for the Azure OpenAI service.</li> <li><code>AZURE_OPENAI_API_KEY</code>: The API key for Azure OpenAI.</li> <li><code>AZURE_OPENAI_ENDPOINT</code>: The endpoint URL for Azure OpenAI.</li> <li><code>AZURE_OPENAI_CHAT_DEPLOYMENT</code>: The deployment name for Azure OpenAI chat.</li> </ul> <p>These environment variables must be set for the program to function correctly. If they are not set, the program will prompt the user to do so and will not proceed.</p>"},{"location":"samples/sk-chat-with-agents-cs/#chat-completion","title":"Chat Completion","text":"<p>The chat completion is managed by the <code>GetChatMessageContentsAsync</code> method, which sets up the agents, selection strategy, and termination strategy. It utilizes the following components:</p> <ul> <li>Kernel Functions: Custom functions to decide the next agent to take a turn (<code>PickNextAgentPromptTemplate</code>) and to determine if the chat is complete (<code>IsChatDonePromptTemplate</code>).</li> <li>Selection Strategy: Determines the next agent to take a turn based on the conversation history.</li> <li>Termination Strategy: Determines when the chat is complete.</li> </ul>"},{"location":"samples/sk-chat-with-agents-cs/#execution-flow","title":"Execution Flow","text":"<ol> <li>The user provides input through the console.</li> <li>The <code>GetChatMessageContentsAsync</code> method processes the input and manages the conversation between the CopyWriter and ArtDirector agents.</li> <li>The conversation continues until either the ArtDirector approves the copy or a maximum number of iterations is reached.</li> </ol>"},{"location":"samples/sk-chat-with-agents-cs/#console-output","title":"Console Output","text":"<p>The program provides real-time console feedback, displaying the conversation between the user, CopyWriter, and ArtDirector.</p>"},{"location":"samples/sk-chat-with-agents-cs/#adding-a-third-agent","title":"Adding a Third Agent","text":"<p>If a third agent, such as an HTML coder, JavaScript coder, or a single code reviewer, needs to be introduced, the following changes would be required: 1. Define New Agent: Create new agent instructions and names for the additional agents. 2. Update Selection Strategy: Modify the selection strategy to include the new agent and define the rules for their turn-taking. 3. Update Termination Strategy: If the new agent's role affects the termination condition, update the termination strategy accordingly. 4. Instantiate New Agent: Add the new agent to the <code>AgentGroupChat</code> initialization.</p> <p>For example, if adding an HTML coder and JavaScript coder, you would need to define their respective roles and instructions, update the conversation flow rules, and ensure the termination strategy accounts for these new roles.</p>"},{"location":"setup/azure-ai/","title":"Azure AI Model Setup","text":"<p>The <code>ai init inference</code> command initializes the connection to the Azure AI Inference endpoint. This initialization is required to use the models available in the Azure AI Model Catalog with the Azure AI CLI or with the Azure AI Inference SDK packages.</p> If you don't have the <code>ai</code> CLI installed ... <p>Before you begin, you'll need to install the <code>ai</code> CLI.</p> <p> Install the <code>ai</code> CLI </p> Initialize connection to Azure AI Inference Endpoint<pre><code>ai init inference\n</code></pre> <p>STEP 1: \u21db Enter your Azure AI Inference endpoint STEP 2: \u21db Enter your Azure AI Inference key  </p> If you don't have an Azure AI Inference endpoint... <p>Model Catalog Explore the Azure AI Model Catalog and Deploy a model to an endpoint</p> <p>Azure AI Serverless Model Documentation Learn how to deploy an Azure AI Serverless Model to a new Azure AI Inference endpoint.</p>"},{"location":"setup/azure-ai/#view-configuration","title":"View Configuration","text":"<p>To view the persisted configuration, use the following commands:</p> Get chat endpoint<pre><code>ai config @chat.endpoint\n</code></pre> Get chat key<pre><code>ai config @chat.key\n</code></pre>"},{"location":"setup/github/","title":"GitHub Model Setup","text":"<p>The <code>ai init github</code> command initializes the connection to the GitHub Model Marketplace. This initialization is required to use the models available in the GitHub Model Marketplace with the Azure AI CLI or with the Azure AI Inference SDK packages.</p> If you don't have the <code>ai</code> CLI installed ... <p>Before you begin, you'll need to install the <code>ai</code> CLI.</p> <p> Install the <code>ai</code> CLI </p> Initialize connection to GitHub Model Marketplace<pre><code>ai init github\n</code></pre> <p>STEP 1: \u21db Enter your GitHub personal access token from https://github.com/settings/tokens STEP 2: \u21db Enter the model you want to use (e.g. <code>gpt-4o</code>, ...)</p> If you don't know what model to use... <p>GitHub Model Marketplace See what models you can experiment with for free.</p>"},{"location":"setup/github/#view-configuration","title":"View Configuration","text":"<p>To view the persisted configuration, use the following commands:</p> Get chat endpoint<pre><code>ai config @chat.endpoint\n</code></pre> Get chat key<pre><code>ai config @chat.key\n</code></pre>"},{"location":"setup/onnx/","title":"Setup with ONNX and Phi-3 Models","text":"<p>You need to download the ONNX model and configure the model path to use the Phi-3 model with the Azure AI CLI.</p> If you don't have the <code>ai</code> CLI installed ... <p>Before you begin, you'll need to install the <code>ai</code> CLI.</p> <p> Install the <code>ai</code> CLI </p> Clone/download the Phi-3 ONNX Model<pre><code>git lfs install\ngit clone https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-onnx\ncd Phi-3-mini-4k-instruct-onnx\ngit lfs checkout\n</code></pre> Configure the Model Path<pre><code>ai config --set mp Phi-3-mini-4k-instruct-onnx/directml/directml-int4-awq-block-128\n</code></pre> If you want to use the AI Toolkit VS Code Extension's downloaded models <p>AI Toolkit VS Code Extension Download the AI Toolkit VS Code Extension.  </p> <p>AI Toolkit Documentation Learn more about the AI Toolkit on learn.microsoft.com.</p>"},{"location":"setup/openai/","title":"Azure OpenAI Setup","text":"<p>The <code>ai init openai</code> command allows selection or creation of an Azure OpenAI resource.</p> If you don't have the <code>ai</code> CLI installed ... <p>Before you begin, you'll need to install the <code>ai</code> CLI.</p> <p> Install the <code>ai</code> CLI </p> Select or create Azure OpenAI resource<pre><code>ai init openai\n</code></pre> <p>STEP 1: \u21db Select your Azure subscription (if prompted) STEP 2: \u21db Select or create your Azure OpenAI resource STEP 3: \u21db Select or create an OpenAI chat<sup>1</sup> model deployment (e.g. gpt-4o) STEP 4: \u21db Select or create an OpenAI embeddings<sup>2</sup> model deployment (optional)  </p>"},{"location":"setup/openai/#view-configuration","title":"View Configuration","text":"<p>To view the persisted configuration, use the following commands:</p> Get chat endpoint<pre><code>ai config @chat.endpoint\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nchat.endpoint (found at 'D:\\src\\book-of-ai\\.ai\\data')\n\n  https://robch-future-900-oai-westus3.cognitiveservices.azure.com/\n</code></pre> Get chat key<pre><code>ai config @chat.key\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nchat.key (found at 'D:\\src\\book-of-ai\\.ai\\data')\n\n  436172626F6E20697320636F6F6C2121\n</code></pre> <ol> <li> <p>Chat models are used to generate human-like text based on the input they are given\u00a0\u21a9</p> </li> <li> <p>Embeddings models are used to interpret and quantify relationships and similarities in data.\u00a0\u21a9</p> </li> </ol>"},{"location":"setup/speech/","title":"Setup with Speech","text":"<p>The <code>ai init speech</code> command initializes the Azure Speech resource. This command is used to select or create an Azure Speech resource. The Azure Speech resource is required to use the Azure Speech service.</p> If you don't have the <code>ai</code> CLI installed ... <p>Before you begin, you'll need to install the <code>ai</code> CLI.</p> <p> Install the <code>ai</code> CLI </p> Select or create Azure Speech resource<pre><code>ai init speech\n</code></pre> <p>STEP 1: \u21db Select your Azure subscription STEP 2: \u21db Select or create your Azure Speech resource  </p>"},{"location":"setup/speech/#view-configuration","title":"View Configuration","text":"<p>To view the persisted configuration, use the following commands:</p> Get speech endpoint<pre><code>ai config @speech.endpoint\n</code></pre> Get speech key<pre><code>ai config @speech.key\n</code></pre>"},{"location":"sk-chat/agents/","title":"Semantic Kernel Chat with Agents","text":"TutorialGenerate Code <p>Semantic Kernel is a lightweight, open-source SDK that lets you easily build AI chat bots and agents using the latest AI models from Microsoft, OpenAI, and other providers.</p> Learn more about Semantic Kernel <p>Semantic Kernel Documentation Learn more about Semantic Kernel and its features.</p> <p>Deeper Dive into Semantic Kernel Dive deeper into Semantic Kernel and learn how to use more advanced functionality not explicitly covered in the Book of AI.</p> <p>Generate code </p> <p>The <code>ai dev new</code> command allows you to generate sample code to interact with Semantic Kernel.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#JavaPython"},{"location":"sk-chat/agents/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat-with-agents --csharp\n</code></pre>"},{"location":"sk-chat/agents/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"<pre><code>ai dev new sk-chat-with-agents\n</code></pre> Install dependencies<pre><code>cd sk-chat-with-agents\ndotnet restore\n</code></pre> See the code; learn how it works... <p> Program.cs  OpenAIChatCompletionsCustomFunctions.cs </p> <p> Deep dive on how it works </p> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"sk-chat/agents/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat-with-agents --java\n</code></pre>"},{"location":"sk-chat/agents/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>--- \ud83d\udea7 UNDER CONSTRUCTION \ud83d\udea7 ---</p>"},{"location":"sk-chat/agents/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat-with-agents --python\n</code></pre>"},{"location":"sk-chat/agents/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>--- \ud83d\udea7 UNDER CONSTRUCTION \ud83d\udea7 ---</p>"},{"location":"sk-chat/basics/","title":"Semantic Kernel Chat Basics","text":"TutorialGenerate Code <p>Semantic Kernel is a lightweight, open-source SDK that lets you easily build AI chat bots and agents using the latest AI models from Microsoft, OpenAI, and other providers.</p> Learn more about Semantic Kernel <p>Semantic Kernel Documentation Learn more about Semantic Kernel and its features.</p> <p>Deeper Dive into Semantic Kernel Dive deeper into Semantic Kernel and learn how to use more advanced functionality not explicitly covered in the Book of AI.</p> <p>Generate code </p> <p>The <code>ai dev new</code> command allows you to generate sample code to interact w/ Semantic Kernel.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#JavaPython"},{"location":"sk-chat/basics/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat --csharp\nai dev new list sk-chat-streaming --csharp\n</code></pre>"},{"location":"sk-chat/basics/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"<pre><code>ai dev new sk-chat-streaming --csharp\ncd sk-chat-streaming-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  SemanticKernelChatCompletionsStreamingClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"sk-chat/basics/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat --java\nai dev new list sk-chat-streaming --java\n</code></pre>"},{"location":"sk-chat/basics/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>--- \ud83d\udea7 UNDER CONSTRUCTION \ud83d\udea7 ---</p>"},{"location":"sk-chat/basics/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat --python\nai dev new list sk-chat-streaming --python\n</code></pre>"},{"location":"sk-chat/basics/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>--- \ud83d\udea7 UNDER CONSTRUCTION \ud83d\udea7 ---</p>"},{"location":"sk-chat/functions/","title":"Semantic Kernel Chat with Functions","text":"TutorialGenerate Code <p>Semantic Kernel is a lightweight, open-source SDK that lets you easily build AI chat bots and agents using the latest AI models from Microsoft, OpenAI, and other providers.</p> Learn more about Semantic Kernel <p>Semantic Kernel Documentation Learn more about Semantic Kernel and its features.</p> <p>Deeper Dive into Semantic Kernel Dive deeper into Semantic Kernel and learn how to use more advanced functionality not explicitly covered in the Book of AI.</p> <p>Generate code </p> <p>The <code>ai dev new</code> command allows you to generate sample code to interact w/ Semantic Kernel.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure OpenAI.</p> <p> Install the <code>ai</code> CLI  Setup Azure OpenAI </p> C#JavaPython"},{"location":"sk-chat/functions/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat --csharp\nai dev new list sk-chat-streaming-with-functions --csharp\n</code></pre>"},{"location":"sk-chat/functions/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"<pre><code>aidev new sk-chat-streaming-with-functions --csharp\ncd sk-chat-streaming-with-functions-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  SemanticKernelChatCompletionsFunctionsStreamingClass.cs  SemanticKernelCustomFunctions.cs </p> <p> Deep dive on how it works</p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"sk-chat/functions/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat --java\nai dev new list sk-chat-streaming-with-functions --java\n</code></pre>"},{"location":"sk-chat/functions/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>--- \ud83d\udea7 UNDER CONSTRUCTION \ud83d\udea7 ---</p>"},{"location":"sk-chat/functions/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list sk-chat --python\nai dev new list sk-chat-streaming-with-functions --python\n</code></pre>"},{"location":"sk-chat/functions/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>--- \ud83d\udea7 UNDER CONSTRUCTION \ud83d\udea7 ---</p>"},{"location":"sk-chat/sk-chat-streaming-cs/sample-overview/","title":"Semantic Kernel Chat Streaming in C","text":"<p>This sample demonstrates how to use the Semantic Kernel Chat API with streaming in a C# console application.</p> <p> Program.cs  SemanticKernelChatCompletionsStreamingClass.cs </p> How to generate this sample Command<pre><code>ai dev new sk-chat-streaming --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'sk-chat-streaming' in 'sk-chat-streaming-cs' (3 files)...\n\nsk-chat-streaming.csproj\nSemanticKernelChatCompletionsStreamingClass.cs\nProgram.cs\n\nGenerating 'sk-chat-streaming' in 'sk-chat-streaming-cs' (3 files)... DONE!\n</code></pre>"},{"location":"sk-chat/sk-chat-streaming-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var AZURE_OPENAI_API_KEY = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nvar AZURE_OPENAI_ENDPOINT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nvar AZURE_OPENAI_CHAT_DEPLOYMENT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") ?? \"&lt;insert your Azure OpenAI chat deployment name here&gt;\";\nvar AZURE_OPENAI_SYSTEM_PROMPT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n</code></pre> <p>STEP 2: Check if the required environment variables are set.</p> Program.cs<pre><code>var azureOk = \n    AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.StartsWith(\"&lt;insert\") &amp;&amp;\n    AZURE_OPENAI_CHAT_DEPLOYMENT != null &amp;&amp; !AZURE_OPENAI_CHAT_DEPLOYMENT.StartsWith(\"&lt;insert\") &amp;&amp;\n    AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.StartsWith(\"&lt;insert\");\n\nvar ok = azureOk &amp;&amp;\n    AZURE_OPENAI_SYSTEM_PROMPT != null &amp;&amp; !AZURE_OPENAI_SYSTEM_PROMPT.StartsWith(\"&lt;insert\");\n\nif (!ok)\n{\n    Console.WriteLine(\n        \"To use Azure OpenAI, set the following environment variables:\\n\" +\n        \"\\n  AZURE_OPENAI_SYSTEM_PROMPT\" +\n        \"\\n  AZURE_OPENAI_API_KEY\" +\n        \"\\n  AZURE_OPENAI_CHAT_DEPLOYMENT\" +\n        \"\\n  AZURE_OPENAI_ENDPOINT\"\n    );\n    Console.WriteLine(\n        \"\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n\" +\n        \"\\n  ai init\" +\n        \"\\n  ai dev shell\" +\n        \"\\n  dotnet run\" +\n        \"\\n\" +\n        \"\\n  or\" +\n        \"\\n\" +\n        \"\\n  ai init\" +\n        \"\\n  ai dev shell --run \\\"dotnet run\\\"\"\n    );\n\n    return 1;\n}\n</code></pre> <p>STEP 3: Initialize the kernel with the configuration settings and create the streaming chat completions helper.</p> Program.cs<pre><code>var builder = Kernel.CreateBuilder();\nbuilder.AddAzureOpenAIChatCompletion(AZURE_OPENAI_CHAT_DEPLOYMENT!, AZURE_OPENAI_ENDPOINT!, AZURE_OPENAI_API_KEY!);\nvar kernel = builder.Build();\nvar chat = new SemanticKernelChatCompletionsStreamingClass(AZURE_OPENAI_SYSTEM_PROMPT!, kernel);\n</code></pre> <p>STEP 4: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    await chat.GetStreamingChatMessageContentsAsync(userPrompt, content =&gt;\n        Console.Write(content.Content)\n    );\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"sk-chat/sk-chat-streaming-cs/sample-overview/#semantickernelchatcompletionsstreamingclasscs","title":"SemanticKernelChatCompletionsStreamingClass.cs","text":"<p>STEP 1: Initialize the kernel and chat message history with a system message.</p> SemanticKernelChatCompletionsStreamingClass.cs<pre><code>public SemanticKernelChatCompletionsStreamingClass(string systemPrompt, Kernel kernel)\n{\n    _systemPrompt = systemPrompt;\n    _kernel = kernel;\n\n    _history = new ChatHistory(_systemPrompt);\n    _chatCompletionService = _kernel.GetRequiredService&lt;IChatCompletionService&gt;();\n}\n\npublic void ClearConversation()\n{\n    _history.RemoveRange(1, _history.Count);\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> SemanticKernelChatCompletionsStreamingClass.cs<pre><code>public async Task&lt;string&gt; GetStreamingChatMessageContentsAsync(string userPrompt, Action&lt;StreamingChatMessageContent&gt;? callback = null)\n{\n    _history.AddUserMessage(userPrompt);\n</code></pre> <p>STEP 3: Send the chat message history to the streaming chat API.</p> SemanticKernelChatCompletionsStreamingClass.cs<pre><code>    var responseContent = string.Empty;\n    var response = _chatCompletionService.GetStreamingChatMessageContentsAsync(_history);\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the assistant's response and invoke the callback for the update.</p> SemanticKernelChatCompletionsStreamingClass.cs<pre><code>    await foreach (var content in response)\n    {\n        if (!string.IsNullOrEmpty(content.Content))\n        {\n            responseContent += content.Content;\n            if (callback != null) callback(content);\n        }\n    }\n</code></pre> <p>STEP 5: Finally, add the assistant's response to the chat message history, and return the response.</p> SemanticKernelChatCompletionsStreamingClass.cs<pre><code>    _history.AddAssistantMessage(responseContent);\n    return responseContent;\n}\n</code></pre>"},{"location":"sk-chat/sk-chat-streaming-with-functions-cs/sample-overview/","title":"Semantic Kernel Chat Streaming with Functions in C","text":"<p>This sample demonstrates how to use the Semantic Kernel Chat API with streaming and kernel functions in a C# console application.</p> <p> Program.cs  SemanticKernelChatCompletionsFunctionsStreamingClass.cs  SemanticKernelCustomFunctions.cs </p> How to generate this sample Command<pre><code>ai dev new sk-chat-streaming-with-functions --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'sk-chat-streaming-with-functions' in 'sk-chat-streaming-with-functions-cs' (3 files)...\n\nsk-chat-streaming-with-functions.csproj\nSemanticKernelChatCompletionsFunctionsStreamingClass.cs\nProgram.cs\nSemanticKernelCustomFunctions.cs\n\nGenerating 'sk-chat-streaming-with-functions' in 'sk-chat-streaming-with-functions-cs' (4 files)... DONE!\n</code></pre>"},{"location":"sk-chat/sk-chat-streaming-with-functions-cs/sample-overview/#semantickernelcustomfunctionscs","title":"SemanticKernelCustomFunctions.cs","text":"<p>STEP 1: Define custom functions that can be auto-invoked by the kernel.</p> SemanticKernelCustomFunctions.cs<pre><code>[KernelFunction, Description(\"Gets the current weather for a location.\")]\npublic string GetCurrentWeather(string location)\n{\n    return $\"The weather in {location} is 72 degrees and sunny.\";\n}\n\n[KernelFunction, Description(\"Gets the current date.\")]\npublic string GetCurrentDate()\n{\n    var date = DateTime.Now;\n    return $\"{date.Year}-{date.Month}-{date.Day}\";\n}\n\n[KernelFunction, Description(\"Gets the current time.\")]\npublic string GetCurrentTime()\n{\n    var date = DateTime.Now;\n    return $\"{date.Hour}:{date.Minute}:{date.Second}\";\n}\n</code></pre>"},{"location":"sk-chat/sk-chat-streaming-with-functions-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables and validate them.</p> Program.cs<pre><code>var AZURE_OPENAI_API_KEY = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nvar AZURE_OPENAI_ENDPOINT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nvar AZURE_OPENAI_CHAT_DEPLOYMENT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") ?? \"&lt;insert your Azure OpenAI chat deployment name here&gt;\";\nvar AZURE_OPENAI_SYSTEM_PROMPT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n\nvar azureOk = \n    AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.StartsWith(\"&lt;insert\") &amp;&amp;\n    AZURE_OPENAI_CHAT_DEPLOYMENT != null &amp;&amp; !AZURE_OPENAI_CHAT_DEPLOYMENT.StartsWith(\"&lt;insert\") &amp;&amp;\n    AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.StartsWith(\"&lt;insert\");\n\nvar ok = azureOk &amp;&amp;\n    AZURE_OPENAI_SYSTEM_PROMPT != null &amp;&amp; !AZURE_OPENAI_SYSTEM_PROMPT.StartsWith(\"&lt;insert\");\n\nif (!ok)\n{\n    Console.WriteLine(\n        \"To use Azure OpenAI, set the following environment variables:\\n\" +\n        \"\\n  AZURE_OPENAI_SYSTEM_PROMPT\" +\n        \"\\n  AZURE_OPENAI_API_KEY\" +\n        \"\\n  AZURE_OPENAI_CHAT_DEPLOYMENT\" +\n        \"\\n  AZURE_OPENAI_ENDPOINT\"\n    );\n    Console.WriteLine(\n        \"\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n\" +\n        \"\\n  ai init\" +\n        \"\\n  ai dev shell\" +\n        \"\\n  dotnet run\" +\n        \"\\n\" +\n        \"\\n  or\" +\n        \"\\n\" +\n        \"\\n  ai init\" +\n        \"\\n  ai dev shell --run \\\"dotnet run\\\"\"\n    );\n\n    return 1;\n}\n</code></pre> <p>STEP 2: Initialize the kernel with the configuration settings, add custom functions, and create the streaming chat completions helper.</p> Program.cs<pre><code>var builder = Kernel.CreateBuilder();\nbuilder.AddAzureOpenAIChatCompletion(AZURE_OPENAI_CHAT_DEPLOYMENT!, AZURE_OPENAI_ENDPOINT!, AZURE_OPENAI_API_KEY!);\nbuilder.Plugins.AddFromType&lt;SemanticKernelCustomFunctions&gt;();\nvar kernel = builder.Build();\nvar chat = new SemanticKernelChatCompletionsFunctionsStreamingClass(AZURE_OPENAI_SYSTEM_PROMPT!, kernel);\n</code></pre> <p>STEP 3: Obtain user input, use the helper class to get the assistant's response, and display responses as they are received.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    await chat.GetStreamingChatMessageContentsAsync(userPrompt, content =&gt;\n        Console.Write(content.Content)\n    );\n    Console.WriteLine(\"\\n\");\n}\n</code></pre>"},{"location":"sk-chat/sk-chat-streaming-with-functions-cs/sample-overview/#semantickernelchatcompletionsfunctionsstreamingclasscs","title":"SemanticKernelChatCompletionsFunctionsStreamingClass.cs","text":"<p>STEP 1: Initialize the kernel and chat message history with a system message.</p> SemanticKernelChatCompletionsFunctionsStreamingClass.cs<pre><code>public SemanticKernelChatCompletionsFunctionsStreamingClass(string systemPrompt, Kernel kernel)\n{\n    _systemPrompt = systemPrompt;\n    _kernel = kernel;\n\n    _history = new ChatHistory(_systemPrompt);\n    _chatCompletionService = _kernel.GetRequiredService&lt;IChatCompletionService&gt;();\n}\n\npublic void ClearConversation()\n{\n    _history.RemoveRange(1, _history.Count);\n}\n</code></pre> <p>STEP 2: When the user provides input, add the user message to the chat message history.</p> SemanticKernelChatCompletionsFunctionsStreamingClass.cs<pre><code>public async Task&lt;string&gt; GetStreamingChatMessageContentsAsync(string userPrompt, Action&lt;StreamingChatMessageContent&gt;? callback = null)\n{\n    _history.AddUserMessage(userPrompt);\n</code></pre> <p>STEP 3: Send the chat message history to the streaming chat API and set the tool call behavior to auto-invoke kernel functions.</p> SemanticKernelChatCompletionsFunctionsStreamingClass.cs<pre><code>    var settings = new OpenAIPromptExecutionSettings { ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions };\n    var responseContent = string.Empty;\n    var response = _chatCompletionService.GetStreamingChatMessageContentsAsync(_history, settings, _kernel);\n</code></pre> <p>STEP 4: For each non-empty update, accumulate the assistant's response and invoke the callback for the update.</p> SemanticKernelChatCompletionsFunctionsStreamingClass.cs<pre><code>    await foreach (var content in response)\n    {\n        if (!string.IsNullOrEmpty(content.Content))\n        {\n            responseContent += content.Content;\n            if (callback != null) callback(content);\n        }\n    }\n</code></pre> <p>STEP 5: Add the assistant's response to the chat message history, and return the response.</p> SemanticKernelChatCompletionsFunctionsStreamingClass.cs<pre><code>    _history.AddAssistantMessage(responseContent);\n    return responseContent;\n}\n</code></pre>"},{"location":"sk-chat/sk-chat-with-agents-cs/sample-overview/","title":"Semantic Kernel Chat with Agents","text":"<p>This sample demonstrates how to use the Semantic Kernel Chat API with streaming in a C# console application.</p> <p> Program.cs </p> How to generate this sample Command<pre><code>ai dev new sk-chat-with-agents --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'sk-chat-with-agents' in 'sk-chat-with-agents-cs' (5 files)...\n\nProgram.cs\nREADME.md\nSemanticKernelChatWithAgents.csproj\n\nGenerating 'sk-chat-with-agents' in 'sk-chat-with-agents-cs' (5 files)... DONE!\n</code></pre>"},{"location":"sk-chat/sk-chat-with-agents-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var AZURE_OPENAI_API_KEY = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_API_KEY\") ?? \"&lt;insert your Azure OpenAI API key here&gt;\";\nvar AZURE_OPENAI_ENDPOINT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_ENDPOINT\") ?? \"&lt;insert your Azure OpenAI endpoint here&gt;\";\nvar AZURE_OPENAI_CHAT_DEPLOYMENT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_CHAT_DEPLOYMENT\") ?? \"&lt;insert your Azure OpenAI chat deployment name here&gt;\";\nvar AZURE_OPENAI_SYSTEM_PROMPT = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_SYSTEM_PROMPT\") ?? \"You are a helpful AI assistant.\";\n</code></pre> <p>STEP 2: Check if the required environment variables are set.</p> Program.cs<pre><code>var azureOk = \n    AZURE_OPENAI_API_KEY != null &amp;&amp; !AZURE_OPENAI_API_KEY.StartsWith(\"&lt;insert\") &amp;&amp;\n    AZURE_OPENAI_CHAT_DEPLOYMENT != null &amp;&amp; !AZURE_OPENAI_CHAT_DEPLOYMENT.StartsWith(\"&lt;insert\") &amp;&amp;\n    AZURE_OPENAI_ENDPOINT != null &amp;&amp; !AZURE_OPENAI_ENDPOINT.StartsWith(\"&lt;insert\");\n\nvar ok = azureOk &amp;&amp;\n    AZURE_OPENAI_SYSTEM_PROMPT != null &amp;&amp; !AZURE_OPENAI_SYSTEM_PROMPT.StartsWith(\"&lt;insert\");\n\nif (!ok)\n{\n    Console.WriteLine(\n        \"To use Azure OpenAI, set the following environment variables:\\n\" +\n        \"\\n  AZURE_OPENAI_SYSTEM_PROMPT\" +\n        \"\\n  AZURE_OPENAI_API_KEY\" +\n        \"\\n  AZURE_OPENAI_CHAT_DEPLOYMENT\" +\n        \"\\n  AZURE_OPENAI_ENDPOINT\"\n    );\n    Console.WriteLine(\n        \"\\nYou can easily do that using the Azure AI CLI by doing one of the following:\\n\" +\n        \"\\n  ai init\" +\n        \"\\n  ai dev shell\" +\n        \"\\n  dotnet run\" +\n        \"\\n\" +\n        \"\\n  or\" +\n        \"\\n\" +\n        \"\\n  ai init\" +\n        \"\\n  ai dev shell --run \\\"dotnet run\\\"\"\n    );\n\n    return 1;\n}\n</code></pre> <p>STEP 3: Initialize the kernel with the configuration settings.</p> Program.cs<pre><code>var builder = Kernel.CreateBuilder();\nbuilder.AddAzureOpenAIChatCompletion(AZURE_OPENAI_CHAT_DEPLOYMENT!, AZURE_OPENAI_ENDPOINT!, AZURE_OPENAI_API_KEY!);\nvar newKernel = new Func&lt;Kernel&gt;(() =&gt; builder.Build());\n</code></pre> <p>STEP 4: Create the writer and reviewer agents.</p> Program.cs<pre><code>ChatCompletionAgent writer = new()\n{\n    Instructions = WriterInstructions,\n    Name = WriterName,\n    Kernel = newKernel(),\n};\n\nChatCompletionAgent reviewer = new()\n{\n    Instructions = ReviewerInstructions,\n    Name = ReviewerName,\n    Kernel = newKernel(),\n};\n</code></pre> <p>STEP 5: Define selection and termination strategies for the chat.</p> Program.cs<pre><code>KernelFunction pickNextAgentFunction = KernelFunctionFactory.CreateFromPrompt(PickNextAgentPromptTemplate);\nKernelFunctionSelectionStrategy selectionStrategy = new KernelFunctionSelectionStrategy(pickNextAgentFunction, newKernel())\n{\n    ResultParser = (result) =&gt; result.GetValue&lt;string&gt;() ?? WriterName,\n    HistoryVariableName = \"history\",\n    AgentsVariableName = \"agents\",\n};\n\nKernelFunction isChatDoneFunction = KernelFunctionFactory.CreateFromPrompt(IsChatDonePromptTemplate);\nKernelFunctionTerminationStrategy terminationStrategy = new KernelFunctionTerminationStrategy(isChatDoneFunction, newKernel())\n{\n    Agents = [reviewer],\n    ResultParser = (result) =&gt; result.GetValue&lt;string&gt;()?.Contains(\"yes\", StringComparison.OrdinalIgnoreCase) ?? false,\n    HistoryVariableName = \"history\",\n    MaximumIterations = 10,\n};\n</code></pre> <p>STEP 6: Get user input in a loop and call the chat message processing function.</p> Program.cs<pre><code>while (true)\n{\n    Console.Write(\"User: \");\n    var userPrompt = Console.ReadLine();\n    if (string.IsNullOrEmpty(userPrompt) || userPrompt == \"exit\") break;\n\n    Console.Write(\"\\nAssistant: \");\n    await GetChatMessageContentsAsync(userPrompt, newKernel);\n    Console.WriteLine(\"\\n\");\n}\n</code></pre> <p>STEP 7: Create a group chat with the writer and reviewer agents, and the custom termination and selection strategies.</p> Program.cs<pre><code>var agents = new[] { writer, reviewer };\nAgentGroupChat chat = new(agents)\n{\n    ExecutionSettings = new()\n    {\n        SelectionStrategy = selectionStrategy,\n        TerminationStrategy = terminationStrategy\n    }\n};\n</code></pre> <p>STEP 8: Start the chat by adding the initial user input.</p> Program.cs<pre><code>chat.AddChatMessage(new ChatMessageContent(AuthorRole.User, input));\n</code></pre> <p>STEP 9: Process the chat messages and output the responses as they arrive.</p> Program.cs<pre><code>await foreach (var content in chat.InvokeAsync())\n{\n    var hasAuthor = !string.IsNullOrEmpty(content.AuthorName);\n    var output = hasAuthor\n        ? $\"{content.Role}-{content.AuthorName}: {content.Content}\\n\"\n        : $\"{content.Role}: {content.Content}\\n\";\n\n    Console.ForegroundColor = ConsoleColor.DarkGray;\n    Console.WriteLine($\"\\r{output}\");\n    responseContent.AppendLine(output);\n\n    Console.ForegroundColor = ConsoleColor.White;\n    Console.Write(\"Assistant: \");\n}\n</code></pre>"},{"location":"speech/keyword-recognition/","title":"Speech Recognition with Keyword Spotting","text":"TutorialGenerate Code <p>The <code>ai speech recognize</code> <code>--keyword</code> option allows you to recognize speech with keyword spotting. You can recognize speech from a microphone or a file, and output the recognized text.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure Speech.</p> <p> Install the <code>ai</code> CLI  Setup Azure Speech </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use Speech Recognition with Keyword Spotting.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure Speech.</p> <p> Install the <code>ai</code> CLI  Setup Azure Speech </p> C#GoJavaJavaScriptPython"},{"location":"speech/keyword-recognition/#recognize-speech-with-keyword-spotting","title":"Recognize Speech with Keyword Spotting","text":"Interactive recognition with keyword spotting<pre><code>ai speech recognize --interactive --keyword keyword.table\n</code></pre> Recognize speech from an audio file with keyword spotting<pre><code>ai speech recognize --file hello-world.wav --keyword keyword.table\n</code></pre> If you don't have a custom keyword file... <p>Custom Keyword Portal Create your custom keyword <code>.table</code> file.</p> <p>Custom Keyword Docs Learn more about creating custom keywords.  </p> <p>Generate code for the scenarios above </p>"},{"location":"speech/keyword-recognition/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list speech-to-text-with-keyword --csharp\n</code></pre>"},{"location":"speech/keyword-recognition/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new speech-to-text-with-keyword --csharp\ncd speech-to-text-with-keyword-cs\n</code></pre> See the code; learn how it works... <p> Program.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"speech/keyword-recognition/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list speech-to-text-with-keyword --go\n</code></pre>"},{"location":"speech/keyword-recognition/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/keyword-recognition/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list speech-to-text-with-keyword --java\n</code></pre>"},{"location":"speech/keyword-recognition/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/keyword-recognition/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list speech-to-text-with-keyword --javascript\n</code></pre>"},{"location":"speech/keyword-recognition/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/keyword-recognition/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list speech-to-text-with-keyword --python\n</code></pre>"},{"location":"speech/keyword-recognition/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new speech-to-text-with-keyword --python\ncd speech-to-text-with-keyword-py\n</code></pre> See the code; learn how it works... <p> main.py </p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre>"},{"location":"speech/recognition/","title":"Speech Recognition","text":"TutorialGenerate Code <p>The <code>ai speech recognize</code> command allows you to recognize speech from audio. You can recognize speech from a microphone or a file, and output subtitles in SRT or VTT format.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure Speech.</p> <p> Install the <code>ai</code> CLI  Setup Azure Speech </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use speech recognition.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure Speech.</p> <p> Install the <code>ai</code> CLI  Setup Azure Speech </p> C#GoJavaJavaScriptPython"},{"location":"speech/recognition/#recognize-speech-from-audio","title":"Recognize speech from audio","text":"From microphone<pre><code>ai speech recognize --microphone\n</code></pre> From WAV file<pre><code>ai speech recognize --file hello-world.wav\n</code></pre> From MP3 file<pre><code>ai speech recognize --file hello-world.mp3 --format mp3\n</code></pre>"},{"location":"speech/recognition/#recognize-speech-with-a-specific-language","title":"Recognize speech with a specific language","text":"From microphone in Spanish<pre><code>ai speech recognize --microphone --language es-ES\n</code></pre> From WAV file in multiple languages<pre><code>ai speech recognize --file hello-world.wav --languages es-ES;fr-FR\n</code></pre>"},{"location":"speech/recognition/#output-subtitles","title":"Output subtitles","text":"Output SRT subtitles<pre><code>ai speech recognize --file hello-world.wav --output-srt-file captions.srt\n</code></pre> Output VTT subtitles<pre><code>ai speech recognize --file hello-world.wav --output-vtt-file captions.vtt\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"speech/recognition/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list speech --csharp\n</code></pre>"},{"location":"speech/recognition/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Once w/ MicrophoneContinuous w/ MicrophoneContinuous w/ File <p>Generate a C# sample that recognizes speech from the microphone.</p> <pre><code>ai dev new speech-to-text --csharp\ncd speech-to-text-cs\n</code></pre> See the code; learn how it works... <p> Program.cs</p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre> <p>Generate a C# sample that continuously recognizes speech from the microphone.</p> <pre><code>ai dev new speech-to-text-continuous-reco --csharp\ncd speech-to-text-continuous-reco-cs\n</code></pre> See the code; learn how it works... <p> Program.cs</p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre> <p>Generate a C# sample that continuously recognizes speech from a file.</p> <pre><code>ai dev new speech-to-text-with-file --csharp\ncd speech-to-text-with-file-cs\n</code></pre> See the code; learn how it works... <p> Program.cs</p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"speech/recognition/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list speech --go\n</code></pre>"},{"location":"speech/recognition/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"Once w/ MicrophoneContinuous w/ MicrophoneContinuous w/ File <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p> <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p> <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/recognition/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list speech --java\n</code></pre>"},{"location":"speech/recognition/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"Once w/ MicrophoneContinuous w/ MicrophoneContinuous w/ File <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p> <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p> <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/recognition/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list speech --javascript\n</code></pre>"},{"location":"speech/recognition/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"Once w/ MicrophoneContinuous w/ MicrophoneContinuous w/ File <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p> <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p> <p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/recognition/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list speech --python\n</code></pre>"},{"location":"speech/recognition/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"Once w/ MicrophoneContinuous w/ MicrophoneContinuous w/ File <p>Generate a Python sample that recognizes speech from the microphone.</p> <pre><code>ai dev new speech-to-text --python\ncd speech-to-text-py\n</code></pre> See the code; learn how it works... <p> main.py</p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> <p>Generate a Python sample that continuously recognizes speech from the microphone.</p> <pre><code>ai dev new speech-to-text-continuous-reco --python\ncd speech-to-text-continuous-reco-py\n</code></pre> See the code; learn how it works... <p> main.py</p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> <p>Generate a Python sample that continuously recognizes speech from a file.</p> <pre><code>ai dev new speech-to-text-with-file --python\ncd speech-to-text-with-file-py\n</code></pre> See the code; learn how it works... <p> main.py</p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre>"},{"location":"speech/synthesis/","title":"Speech Synthesis","text":"TutorialGenerate Code <p>The <code>ai speech synthesize</code> command allows you to synthesize speech from text. You can synthesize speech with different voices, formats, and audio outputs.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure Speech.</p> <p> Install the <code>ai</code> CLI  Setup Azure Speech </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use speech synthesis.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure Speech.</p> <p> Install the <code>ai</code> CLI  Setup Azure Speech </p> C#GoJavaJavaScriptPython"},{"location":"speech/synthesis/#synthesize-speech-from-text","title":"Synthesize speech from text","text":"Interactive mode<pre><code>ai speech synthesize --interactive\n</code></pre> Synthesize text<pre><code>ai speech synthesize --text \"Hello, world!\"\n</code></pre> Synthesize text with audio output<pre><code>ai speech synthesize --text \"Hello, world!\" --audio-output hello-world.wav\n</code></pre> Synthesize text with specific format<pre><code>ai speech synthesize --text \"Hello, world!\" --audio-output hello-world.mp3 --format mp3\n</code></pre>"},{"location":"speech/synthesis/#list-available-voices","title":"List available voices","text":"List voices<pre><code>ai speech synthesize --voices\n</code></pre>"},{"location":"speech/synthesis/#synthesize-speech-with-a-specific-voice","title":"Synthesize speech with a specific voice","text":"Synthesize with specific voice<pre><code>ai speech synthesize --text \"Hello, world!\" --voice en-US-AriaNeural\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"speech/synthesis/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list text-to-speech --csharp\n</code></pre>"},{"location":"speech/synthesis/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new text-to-speech --csharp\ncd text-to-speech-cs\n</code></pre> See the code; learn how it works... <p> Program.cs  TextToSpeechClass.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"speech/synthesis/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list text-to-speech --go\n</code></pre>"},{"location":"speech/synthesis/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/synthesis/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list text-to-speech --java\n</code></pre>"},{"location":"speech/synthesis/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/synthesis/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list text-to-speech --javascript\n</code></pre>"},{"location":"speech/synthesis/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/synthesis/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list text-to-speech --python\n</code></pre>"},{"location":"speech/synthesis/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new text-to-speech --python\ncd text-to-speech-py\n</code></pre> See the code; learn how it works... <p> main.py  requirements.txt </p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre>"},{"location":"speech/translation/","title":"Speech Translation","text":"TutorialGenerate Code <p>The <code>ai speech translate</code> command allows you to translate speech from one language to another. You can translate speech from a microphone or a file, and output subtitles in SRT format.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure Speech.</p> <p> Install the <code>ai</code> CLI  Setup Azure Speech </p> <p>The <code>ai dev new</code> command allows you to generate sample code that demonstrates how to use speech translation.</p> Prerequisites <p>Before you begin, you'll need to install the <code>ai</code> CLI and set up Azure Speech.</p> <p> Install the <code>ai</code> CLI  Setup Azure Speech </p> C#GoJavaJavaScriptPython"},{"location":"speech/translation/#translate-speech","title":"Translate Speech","text":"Translate from microphone<pre><code>ai speech translate --microphone --source en-US --target es-ES\n</code></pre> Translate from file<pre><code>ai speech translate --file hello-world.wav --source en-US --target es-ES\n</code></pre> Translate to multiple languages<pre><code>ai speech translate --file hello-world.wav --source en-US --targets es-ES;fr-FR;zh-CN\n</code></pre>"},{"location":"speech/translation/#output-subtitles","title":"Output Subtitles","text":"Output SRT subtitles<pre><code>ai speech translate --file hello-world.wav --source en-US --target es-ES --output-srt-file captions.srt\n</code></pre> <p>Generate code for the scenarios above </p>"},{"location":"speech/translation/#list-samples","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only C# samples<pre><code>ai dev new list --csharp\n</code></pre> Filter the list by name<pre><code>ai dev new list translate --csharp\n</code></pre>"},{"location":"speech/translation/#generate-build-and-run-a-sample","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new speech-to-text-with-translation --csharp\ncd speech-to-text-with-translation-cs\n</code></pre> See the code; learn how it works... <p> Program.cs </p> <p> Deep dive on how it works </p> Install dependencies<pre><code>dotnet restore\n</code></pre> Run the sample<pre><code>ai dev shell\ndotnet run\n</code></pre>"},{"location":"speech/translation/#list-samples_1","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Go samples<pre><code>ai dev new list --go\n</code></pre> Filter the list by name<pre><code>ai dev new list translate --go\n</code></pre>"},{"location":"speech/translation/#generate-build-and-run-a-sample_1","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/translation/#list-samples_2","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Java samples<pre><code>ai dev new list --java\n</code></pre> Filter the list by name<pre><code>ai dev new list translate --java\n</code></pre>"},{"location":"speech/translation/#generate-build-and-run-a-sample_2","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/translation/#list-samples_3","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only JavaScript samples<pre><code>ai dev new list --javascript\n</code></pre> Filter the list by name<pre><code>ai dev new list translate --javascript\n</code></pre>"},{"location":"speech/translation/#generate-build-and-run-a-sample_3","title":"Generate, build, and run a sample","text":"<p>... \ud83d\udea7 UNDER CONSTRUCTION ...</p>"},{"location":"speech/translation/#list-samples_4","title":"List samples","text":"List available templates<pre><code>ai dev new list\n</code></pre> <pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nName                                                      Short Name                                       Language                        \n------------------------------------------------------    ---------------------------------------------    --------------------------------\nEnvironment Variables                                     .env                                                                             \nAzure AI Inference Chat Completions (Streaming)           az-inference-chat-streaming                      C#, Python                      \nHelper Function Class Library                             helper-functions                                 C#                              \nOpenAI Assistants                                         openai-asst                                      C#, JavaScript, Python          \nOpenAI Assistants (Streaming)                             openai-asst-streaming                            C#, JavaScript, Python          \nOpenAI Assistants (w/ Code Interpreter)                   openai-asst-streaming-with-code                  C#, JavaScript, Python          \nOpenAI Assistants (w/ File Search)                        openai-asst-streaming-with-file-search           C#, JavaScript, Python          \nOpenAI Assistants (w/ Functions)                          openai-asst-streaming-with-functions             C#, JavaScript, Python          \nOpenAI Assistants Webpage                                 openai-asst-webpage                              JavaScript, TypeScript          \nOpenAI Assistants Webpage (w/ Functions)                  openai-asst-webpage-with-functions               JavaScript                      \nOpenAI Chat Completions                                   openai-chat                                      C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (Streaming)                       openai-chat-streaming                            C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Data + AI Search)             openai-chat-streaming-with-data                  C#, Go, Java, JavaScript, Python\nOpenAI Chat Completions (w/ Functions)                    openai-chat-streaming-with-functions             C#, Go, JavaScript, Python      \nOpenAI Chat Webpage                                       openai-chat-webpage                              JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Functions)                        openai-chat-webpage-with-functions               JavaScript, TypeScript          \nOpenAI Chat Webpage (w/ Speech input/output)              openai-chat-webpage-with-speech                  TypeScript                      \nOpenAI Chat Webpage (w/ Functions + Speech)               openai-chat-webpage-with-speech-and-functions    TypeScript                      \nPhi-3 Chat Completions (w/ ONNX)                          phi3-onnx-chat-streaming                         C#                              \nPhi-3 Chat Completions (w/ ONNX + Functions)              phi3-onnx-chat-streaming-with-functions          C#                              \nSemantic Kernel Chat Completions (Streaming)              sk-chat-streaming                                C#                              \nSemantic Kernel Chat Completions (w/ Data + AI Search)    sk-chat-streaming-with-data                      C#                              \nSemantic Kernel Chat Completions (w/ Functions)           sk-chat-streaming-with-functions                 C#                              \nSemantic Kernel Chat Completions (w/ Agents)              sk-chat-with-agents                              C#                              \nSpeech-to-text                                            speech-to-text                                   C#, Python                      \nSpeech-to-text (w/ Continuous recognition)                speech-to-text-continuous-reco                   C#, Python                      \nSpeech-to-text (w/ File input)                            speech-to-text-with-file                         C#, Python                      \nSpeech-to-text (w/ Keyword detection)                     speech-to-text-with-keyword                      C#, Python                      \nSpeech-to-text (w/ Translation)                           speech-to-text-with-translation                  C#, Python                      \nText-to-speech                                            text-to-speech                                   C#, Python                      \nText-to-speech (w/ File output)                           text-to-speech-with-file                         C#, Python                      \n</code></pre> List only Python samples<pre><code>ai dev new list --python\n</code></pre> Filter the list by name<pre><code>ai dev new list translate --python\n</code></pre>"},{"location":"speech/translation/#generate-build-and-run-a-sample_4","title":"Generate, build, and run a sample","text":"Generate sample code<pre><code>ai dev new speech-to-text-with-translation --python\ncd speech-to-text-with-translation-py\n</code></pre> See the code; learn how it works... <p> main.py </p> <p> Deep dive on how it works </p> WindowsmacOSLinux Create virtual environment<pre><code>python -m venv env\nenv/Scripts/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre> Create virtual environment<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre> Install requirements<pre><code>pip install -r requirements.txt\n</code></pre> Run the sample<pre><code>ai dev shell\npython3 main.py\n</code></pre>"},{"location":"speech/speech-to-text-continuous-reco-cs/sample-overview/","title":"Speech-to-Text Continuous Recognition in C#","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to perform continuous speech recognition using the Speech SDK in a C# console application. The application listens for speech from the default microphone and prints recognized text to the console in real-time.</p> <p> Program.cs</p> How to generate this sample Command<pre><code>ai dev new speech-to-text-continuous-reco --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text-continuous-reco' in 'speech-to-text-continuous-reco-cs' (2 files)...\n\nSpeechToTextContinuousReco.csproj\nProgram.cs\n\nGenerating 'speech-to-text-continuous-reco' in 'speech-to-text-continuous-reco-cs' (2 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-continuous-reco-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var speechKey = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_KEY\") ?? \"&lt;insert your Speech Service API key here&gt;\";\nvar speechRegion = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_REGION\") ?? \"&lt;insert your Speech Service region here&gt;\";\nvar speechLanguage = \"en-US\"; // BCP-47 language code\n</code></pre> <p>STEP 2: Create instances of a speech config, source language config, and audio config.</p> Program.cs<pre><code>var config = SpeechConfig.FromSubscription(speechKey, speechRegion);\nvar sourceLanguageConfig = SourceLanguageConfig.FromLanguage(speechLanguage);\nvar audioConfig = AudioConfig.FromDefaultMicrophoneInput();\n</code></pre> <p>STEP 3: Create the speech recognizer from the above configuration information.</p> Program.cs<pre><code>using (var recognizer = new SpeechRecognizer(config, sourceLanguageConfig, audioConfig))\n{\n    recognizer.Recognizing += (s, e) =&gt; HandleRecognizingEvent(e);\n    recognizer.Recognized += (s, e) =&gt; HandleRecognizedEvent(e);\n    var sessionStoppedNoError = new TaskCompletionSource&lt;bool&gt;(TaskCreationOptions.RunContinuationsAsynchronously);\n    recognizer.SessionStarted += (s, e) =&gt; HandleSessionStartedEvent(e);\n    recognizer.SessionStopped += (s, e) =&gt; HandleSessionStoppedEvent(e, sessionStoppedNoError);\n    recognizer.Canceled += (s, e) =&gt; HandleCanceledEvent(e, sessionStoppedNoError);\n</code></pre> <p>STEP 4: Subscribe to recognizing and recognized events for handling intermediate and final recognition results.</p> Program.cs<pre><code>    recognizer.Recognizing += (s, e) =&gt; HandleRecognizingEvent(e);\n    recognizer.Recognized += (s, e) =&gt; HandleRecognizedEvent(e);\n</code></pre> <p>STEP 5: Subscribe to session started, stopped, and canceled events for handling session events and cancellations.</p> Program.cs<pre><code>    recognizer.SessionStarted += (s, e) =&gt; HandleSessionStartedEvent(e);\n    recognizer.SessionStopped += (s, e) =&gt; HandleSessionStoppedEvent(e, sessionStoppedNoError);\n    recognizer.Canceled += (s, e) =&gt; HandleCanceledEvent(e, sessionStoppedNoError);\n</code></pre> <p>STEP 6: Start continuous recognition and wait for user input to stop.</p> Program.cs<pre><code>    Task.Run(() =&gt;\n    {\n        while (Console.ReadKey().Key != ConsoleKey.Enter) { }\n        recognizer.StopContinuousRecognitionAsync();\n    });\n    await recognizer.StartContinuousRecognitionAsync();\n    Console.WriteLine(\"Listening; press ENTER to stop ...\\n\");\n    return await sessionStoppedNoError.Task ? 0 : 1;\n}\n</code></pre> <p>STEP 7: Handle intermediate and final recognition results.</p> Program.cs<pre><code>private static void HandleRecognizingEvent(SpeechRecognitionEventArgs e)\n{\n    Console.WriteLine($\"RECOGNIZING: {e.Result.Text}\");\n}\n\nprivate static void HandleRecognizedEvent(SpeechRecognitionEventArgs e)\n{\n    if (e.Result.Reason == ResultReason.RecognizedSpeech &amp;&amp; !string.IsNullOrEmpty(e.Result.Text))\n    {\n        Console.WriteLine($\"RECOGNIZED: {e.Result.Text}\\n\");\n    }\n    else if (e.Result.Reason == ResultReason.NoMatch)\n    {\n        Console.WriteLine($\"NOMATCH: Speech could not be recognized.\\n\");\n    }\n}\n</code></pre> <p>STEP 8: Handle session start, stop, and cancellation events.</p> Program.cs<pre><code>private static void HandleSessionStartedEvent(SessionEventArgs e)\n{\n    Console.WriteLine($\"SESSION STARTED: {e.SessionId}.\\n\");\n}\n\nprivate static void HandleSessionStoppedEvent(SessionEventArgs e, TaskCompletionSource&lt;bool&gt; sessionStoppedNoError)\n{\n    Console.WriteLine($\"SESSION STOPPED: {e.SessionId}.\");\n    sessionStoppedNoError.TrySetResult(true);\n}\n\nprivate static void HandleCanceledEvent(SpeechRecognitionCanceledEventArgs e, TaskCompletionSource&lt;bool&gt; sessionStoppedNoError)\n{\n    Console.WriteLine($\"CANCELED: Reason={e.Reason}\");\n    if (e.Reason == CancellationReason.EndOfStream)\n    {\n        Console.WriteLine($\"CANCELED: End of the audio stream was reached.\");\n    }\n    else if (e.Reason == CancellationReason.Error)\n    {\n        Console.WriteLine($\"CANCELED: ErrorCode={e.ErrorCode}\");\n        Console.WriteLine($\"CANCELED: ErrorDetails={e.ErrorDetails}\");\n        Console.WriteLine($\"CANCELED: Did you update the subscription info?\");\n    }\n    sessionStoppedNoError.TrySetResult(e.Reason != CancellationReason.Error);\n}\n</code></pre>"},{"location":"speech/speech-to-text-continuous-reco-py/sample-overview/","title":"Speech-to-Text Continuous Recognition in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure Cognitive Services Speech SDK for continuous speech recognition in a Python console application.</p> <p> main.py </p> How to generate this sample Command<pre><code>ai dev new speech-to-text-continuous-reco --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text-continuous-reco' in 'speech-to-text-continuous-reco-py' (2 files)...\n\nmain.py\nrequirements.txt\n\nGenerating 'speech-to-text-continuous-reco' in 'speech-to-text-continuous-reco-py' (2 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-continuous-reco-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Import necessary modules and set up configuration.</p> main.py<pre><code>from concurrent.futures import Future\nfrom azure.cognitiveservices.speech import SpeechConfig, SpeechRecognizer, AudioConfig, CancellationReason\nimport threading\nimport os\n\n# Connection and configuration details required\nspeech_key = os.environ.get('AZURE_AI_SPEECH_KEY') or \"&lt;insert your Speech Service API key here&gt;\"\nservice_region = os.environ.get('AZURE_AI_SPEECH_REGION') or \"&lt;insert your Speech Service region here&gt;\"\nspeech_language = \"en-US\"\n</code></pre> <p>STEP 2: Create instances of speech config and audio config.</p> main.py<pre><code>speech_config = SpeechConfig(subscription=speech_key, region=service_region, speech_recognition_language=speech_language)\naudio_config = AudioConfig(use_default_microphone=True)\n</code></pre> <p>STEP 3: Create the speech recognizer and set up event handlers.</p> main.py<pre><code>speech_recognizer = SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)\n\ndef recognizing(args):\n    print(\"RECOGNIZING: {}\".format(args.result.text))\n\ndef recognized(args):\n    if args.result.reason.name == \"RecognizedSpeech\" and args.result.text != \"\":\n        print(\"RECOGNIZED: {}\\n\".format(args.result.text))\n    elif args.result.reason.name == \"NoMatch\":\n        print(\"NOMATCH: Speech could not be recognized.\\n\")\n\nspeech_recognizer.recognizing.connect(recognizing)\nspeech_recognizer.recognized.connect(recognized)\n</code></pre> <p>STEP 4: Handle session events and cancellation.</p> main.py<pre><code>session_stopped_no_error = Future()\n\ndef session_started(args):\n    print(\"SESSION STARTED: {}\\n\".format(args.session_id))\n\ndef session_stopped(args):\n    print(\"SESSION STOPPED: {}\".format(args.session_id))\n    session_stopped_no_error.set_result(True)\n\nspeech_recognizer.session_started.connect(session_started)\nspeech_recognizer.session_stopped.connect(session_stopped)\n\ndef canceled(args):\n    print(\"CANCELED: Reason={}\".format(args.cancellation_details.reason))\n\n    if args.cancellation_details.reason == CancellationReason.EndOfStream:\n        print(\"CANCELED: End of the audio stream was reached.\")\n    elif args.cancellation_details.reason == CancellationReason.Error:\n        print(\"CANCELED: ErrorDetails={}\".format(args.cancellation_details.error_details))\n        print(\"CANCELED: Did you update the subscription info?\")\n\n    session_stopped_no_error.set_result(args.cancellation_details.reason != CancellationReason.Error)\n\nspeech_recognizer.canceled.connect(canceled)\n</code></pre> <p>STEP 5: Start continuous recognition and wait for user input to stop.</p> main.py<pre><code>threading.Thread(target=lambda: (\n    input(\"\"),\n    speech_recognizer.stop_continuous_recognition())\n).start()\n\nspeech_recognizer.start_continuous_recognition()\nprint(\"Listening, press ENTER to stop...\")\n\nexit_code = 0 if session_stopped_no_error.result() == True else 1\nos._exit(exit_code)\n</code></pre>"},{"location":"speech/speech-to-text-continuous-reco-py/sample-overview/#requirementstxt","title":"requirements.txt","text":"requirements.txt<pre><code>azure-cognitiveservices-speech&gt;=1.35.0\n</code></pre>"},{"location":"speech/speech-to-text-cs/sample-overview/","title":"Speech-to-Text in C#","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure Cognitive Services Speech SDK to perform speech recognition in a C# console application.</p> <p> Program.cs </p> How to generate this sample Command<pre><code>ai dev new speech-to-text --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text' in 'speech-to-text-cs' (2 files)...\n\nSpeechToText.csproj\nProgram.cs\n\nGenerating 'speech-to-text' in 'speech-to-text-cs' (2 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var speechKey = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_KEY\") ?? \"&lt;insert your Speech Service API key here&gt;\";\nvar speechRegion = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_REGION\") ?? \"&lt;insert your Speech Service region here&gt;\";\nvar speechLanguage = \"en-US\"; // BCP-47 language code\n</code></pre> <p>STEP 2: Create instances of a speech config, source language config, and audio config.</p> Program.cs<pre><code>var config = SpeechConfig.FromSubscription(speechKey, speechRegion);\nvar sourceLanguageConfig = SourceLanguageConfig.FromLanguage(speechLanguage);\nvar audioConfig = AudioConfig.FromDefaultMicrophoneInput();\n</code></pre> <p>STEP 3: Create the speech recognizer from the above configuration information.</p> Program.cs<pre><code>using (var recognizer = new SpeechRecognizer(config, sourceLanguageConfig, audioConfig))\n{\n    Console.WriteLine(\"Listening ...\\n\");\n</code></pre> <p>STEP 4: Start speech recognition, and return after a single utterance is recognized.</p> Program.cs<pre><code>    var result = await recognizer.RecognizeOnceAsync();\n</code></pre> <p>STEP 5: Check the result.</p> Program.cs<pre><code>    if (result.Reason == ResultReason.RecognizedSpeech)\n    {\n        Console.WriteLine($\"RECOGNIZED: {result.Text}\");\n    }\n    else if (result.Reason == ResultReason.NoMatch)\n    {\n        Console.WriteLine($\"NOMATCH: Speech could not be recognized.\");\n    }\n    else if (result.Reason == ResultReason.Canceled)\n    {\n        var cancellation = CancellationDetails.FromResult(result);\n        Console.WriteLine($\"CANCELED: Reason={cancellation.Reason}\");\n\n        if (cancellation.Reason == CancellationReason.Error)\n        {\n            Console.WriteLine($\"CANCELED: ErrorCode={cancellation.ErrorCode}\");\n            Console.WriteLine($\"CANCELED: ErrorDetails={cancellation.ErrorDetails}\");\n            Console.WriteLine($\"CANCELED: Did you update the subscription info?\");\n        }\n    }\n}\n</code></pre>"},{"location":"speech/speech-to-text-py/sample-overview/","title":"Speech Recognition in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure Speech Service for speech-to-text recognition in Python.</p> <p> main.py </p> How to generate this sample Command<pre><code>ai dev new speech-to-text --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text' in 'speech-to-text-py' (1 file)...\n\nmain.py\n\nGenerating 'speech-to-text' in 'speech-to-text-py' (1 file)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Get configuration details from environment variables.</p> main.py<pre><code>from concurrent.futures import Future\nfrom azure.cognitiveservices.speech import SpeechConfig, SpeechRecognizer, AudioConfig, CancellationReason\nimport threading\nimport os\n\n# Connection and configuration details required\nspeech_key = os.environ.get('AZURE_AI_SPEECH_KEY') or \"&lt;insert your Speech Service API key here&gt;\"\nservice_region = os.environ.get('AZURE_AI_SPEECH_REGION') or \"&lt;insert your Speech Service region here&gt;\"\nspeech_language = \"en-US\"\n</code></pre> <p>STEP 2: Create instances of a speech config and audio config.</p> main.py<pre><code>speech_config = SpeechConfig(subscription=speech_key, region=service_region, speech_recognition_language=speech_language)\naudio_config = AudioConfig(use_default_microphone=True)\n</code></pre> <p>STEP 3: Create the speech recognizer from the above configuration information.</p> main.py<pre><code>speech_recognizer = SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)\n</code></pre> <p>STEP 4: Start speech recognition, and return after a single utterance is recognized.</p> main.py<pre><code># Start speech recognition, and return after a single utterance is recognized. The end of a\n# single utterance is determined by listening for silence at the end or until a maximum of 15\n# seconds of audio is processed.\nprint(\"Listening ...\\n\")\nresult = speech_recognizer.recognize_once()\n</code></pre> <p>STEP 5: Check the result.</p> main.py<pre><code># Check the result\nif result.reason.name == \"RecognizedSpeech\" and result.text != \"\":\n    print(\"RECOGNIZED: {}\".format(result.text))\nelif result.reason.name == \"NoMatch\":\n    print(\"NOMATCH: Speech could not be recognized.\")\nelif result.reason.name == \"Canceled\":\n    cancellation_details = result.cancellation_details\n    print(\"CANCELED: Reason={}\".format(cancellation_details.reason))\n    if cancellation_details.reason == CancellationReason.Error:\n        print(\"CANCELED: ErrorDetails={}\".format(cancellation_details.error_details))\n        print(\"CANCELED: Did you update the subscription info?\")\n</code></pre>"},{"location":"speech/speech-to-text-with-file-cs/sample-overview/","title":"Speech-to-Text with File in C#","text":"<p>This sample demonstrates how to use the Azure Cognitive Services Speech SDK to recognize speech from an audio file in a C# console application.</p> <p> Program.cs </p> How to generate this sample Command<pre><code>ai dev new speech-to-text-with-file --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text-with-file' in 'speech-to-text-with-file-cs' (3 files)...\n\nSpeechToTextWithFile.csproj\nProgram.cs\n\nGenerating 'speech-to-text-with-file' in 'speech-to-text-with-file-cs' (3 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-with-file-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var speechKey = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_KEY\") ?? \"&lt;insert your Speech Service API key here&gt;\";\nvar speechRegion = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_REGION\") ?? \"&lt;insert your Speech Service region here&gt;\";\nvar speechLanguage = \"en-US\"; // BCP-47 language code\nvar inputFileName = args.Length == 1 ? args[0] : \"audio.wav\";\n</code></pre> <p>STEP 2: Check if the input file exists.</p> Program.cs<pre><code>if (!File.Exists(inputFileName))\n{\n    Console.WriteLine($\"ERROR: Cannot find audio input file: {inputFileName}\");\n    return 1;\n}\n</code></pre> <p>STEP 3: Create instances of a speech config, source language config, and audio config.</p> Program.cs<pre><code>var config = SpeechConfig.FromSubscription(speechKey, speechRegion);\nvar sourceLanguageConfig = SourceLanguageConfig.FromLanguage(speechLanguage);\nvar audioConfig = AudioConfig.FromWavFileInput(inputFileName);\n</code></pre> <p>STEP 4: Create the speech recognizer from the above configuration information.</p> Program.cs<pre><code>using (var recognizer = new SpeechRecognizer(config, sourceLanguageConfig, audioConfig))\n{\n    recognizer.Recognizing += (s, e) =&gt; HandleRecognizingEvent(e);\n    recognizer.Recognized += (s, e) =&gt; HandleRecognizedEvent(e);\n\n    var sessionStoppedNoError = new TaskCompletionSource&lt;bool&gt;(TaskCreationOptions.RunContinuationsAsynchronously);\n\n    recognizer.SessionStarted += (s, e) =&gt; HandleSessionStartedEvent(e);\n    recognizer.SessionStopped += (s, e) =&gt; HandleSessionStoppedEvent(e, sessionStoppedNoError);\n\n    recognizer.Canceled += (s, e) =&gt; HandleCanceledEvent(e, sessionStoppedNoError);\n\n    Task.Run(() =&gt;\n    {\n        while (Console.ReadKey().Key != ConsoleKey.Enter) { }\n        recognizer.StopContinuousRecognitionAsync();\n    });\n\n    await recognizer.StartContinuousRecognitionAsync();\n    Console.WriteLine(\"Listening; press ENTER to stop ...\\n\");\n\n    return await sessionStoppedNoError.Task ? 0 : 1;\n}\n</code></pre> <p>STEP 5: Subscribe to the Recognizing and Recognized events.</p> Program.cs<pre><code>recognizer.Recognizing += (s, e) =&gt; HandleRecognizingEvent(e);\nrecognizer.Recognized += (s, e) =&gt; HandleRecognizedEvent(e);\n</code></pre> <p>STEP 6: Create a task completion source to wait for the session to stop.</p> Program.cs<pre><code>var sessionStoppedNoError = new TaskCompletionSource&lt;bool&gt;(TaskCreationOptions.RunContinuationsAsynchronously);\n</code></pre> <p>STEP 7: Subscribe to SessionStarted and SessionStopped events.</p> Program.cs<pre><code>recognizer.SessionStarted += (s, e) =&gt; HandleSessionStartedEvent(e);\nrecognizer.SessionStopped += (s, e) =&gt; HandleSessionStoppedEvent(e, sessionStoppedNoError);\n</code></pre> <p>STEP 8: Subscribe to the Canceled event.</p> Program.cs<pre><code>recognizer.Canceled += (s, e) =&gt; HandleCanceledEvent(e, sessionStoppedNoError);\n</code></pre> <p>STEP 9: Allow the user to press ENTER to stop recognition.</p> Program.cs<pre><code>Task.Run(() =&gt;\n{\n    while (Console.ReadKey().Key != ConsoleKey.Enter) { }\n    recognizer.StopContinuousRecognitionAsync();\n});\n</code></pre> <p>STEP 10: Start speech recognition.</p> Program.cs<pre><code>await recognizer.StartContinuousRecognitionAsync();\nConsole.WriteLine(\"Listening; press ENTER to stop ...\\n\");\n</code></pre> <p>STEP 11: Wait for the session to stop.</p> Program.cs<pre><code>return await sessionStoppedNoError.Task ? 0 : 1;\n</code></pre> <p>STEP 12: Handle recognition events.</p> Program.cs<pre><code>private static void HandleRecognizingEvent(SpeechRecognitionEventArgs e)\n{\n    Console.WriteLine($\"RECOGNIZING: {e.Result.Text}\");\n}\n\nprivate static void HandleRecognizedEvent(SpeechRecognitionEventArgs e)\n{\n    if (e.Result.Reason == ResultReason.RecognizedSpeech &amp;&amp; !string.IsNullOrEmpty(e.Result.Text))\n    {\n        Console.WriteLine($\"RECOGNIZED: {e.Result.Text}\\n\");\n    }\n    else if (e.Result.Reason == ResultReason.NoMatch)\n    {\n        Console.WriteLine($\"NOMATCH: Speech could not be recognized.\\n\");\n    }\n}\n\nprivate static void HandleSessionStartedEvent(SessionEventArgs e)\n{\n    Console.WriteLine($\"SESSION STARTED: {e.SessionId}.\\n\");\n}\n\nprivate static void HandleSessionStoppedEvent(SessionEventArgs e, TaskCompletionSource&lt;bool&gt; sessionStoppedNoError)\n{\n    Console.WriteLine($\"SESSION STOPPED: {e.SessionId}.\");\n    sessionStoppedNoError.TrySetResult(true);\n}\n\nprivate static void HandleCanceledEvent(SpeechRecognitionCanceledEventArgs e, TaskCompletionSource&lt;bool&gt; sessionStoppedNoError)\n{\n    Console.WriteLine($\"CANCELED: Reason={e.Reason}\");\n\n    if (e.Reason == CancellationReason.EndOfStream)\n    {\n        Console.WriteLine($\"CANCELED: End of the audio stream was reached.\");\n    }\n    else if (e.Reason == CancellationReason.Error)\n    {\n        Console.WriteLine($\"CANCELED: ErrorCode={e.ErrorCode}\");\n        Console.WriteLine($\"CANCELED: ErrorDetails={e.ErrorDetails}\");\n        Console.WriteLine($\"CANCELED: Did you update the subscription info?\");\n    }\n    sessionStoppedNoError.TrySetResult(e.Reason != CancellationReason.Error);\n}\n</code></pre>"},{"location":"speech/speech-to-text-with-file-py/sample-overview/","title":"Speech to Text with File in Python","text":"<p>This sample demonstrates how to use Azure Cognitive Services to perform speech recognition on an audio file in a Python application.</p> <p> main.py </p> How to generate this sample Command<pre><code>ai dev new speech-to-text-with-file --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text-with-file' in 'speech-to-text-with-file-py' (2 files)...\n\nmain.py\nrequirements.txt\n\nGenerating 'speech-to-text-with-file' in 'speech-to-text-with-file-py' (2 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-with-file-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> main.py<pre><code>speech_key = os.environ.get('AZURE_AI_SPEECH_KEY') or \"&lt;insert your Speech Service API key here&gt;\"\nservice_region = os.environ.get('AZURE_AI_SPEECH_REGION') or \"&lt;insert your Speech Service region here&gt;\"\ninput_file = sys.argv[1] if len(sys.argv) == 2 else \"audio.wav\"\n</code></pre> <p>STEP 2: Check if the input file exists.</p> main.py<pre><code>if not os.path.exists(input_file):\n    print(\"ERROR: Cannot find audio input file: {}\".format(input_file))\n    sys.exit(1)\n</code></pre> <p>STEP 3: Create instances of a speech config and audio config.</p> main.py<pre><code>speech_config = SpeechConfig(subscription=speech_key, region=service_region, speech_recognition_language=\"en-US\")\naudio_config = AudioConfig(filename=input_file)\n</code></pre> <p>STEP 4: Create the speech recognizer from the above configuration information.</p> main.py<pre><code>speech_recognizer = SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)\n</code></pre> <p>STEP 5: Subscribe to the recognizing and recognized events.</p> main.py<pre><code>def recognizing(args):\n    print(\"RECOGNIZING: {}\".format(args.result.text))\n\ndef recognized(args):\n    if args.result.reason.name == \"RecognizedSpeech\" and args.result.text != \"\":\n        print(\"RECOGNIZED: {}\\n\".format(args.result.text))\n    elif args.result.reason.name == \"NoMatch\":\n        print(\"NOMATCH: Speech could not be recognized.\\n\")\n\nspeech_recognizer.recognizing.connect(recognizing)\nspeech_recognizer.recognized.connect(recognized)\n</code></pre> <p>STEP 6: Create a future to wait for the session to stop.</p> main.py<pre><code>session_stopped_no_error = Future()\n</code></pre> <p>STEP 7: Subscribe to session_started and session_stopped events.</p> main.py<pre><code>def session_started(args):\n    print(\"SESSION STARTED: {}\\n\".format(args.session_id))\n\ndef session_stopped(args):\n    print(\"SESSION STOPPED: {}\".format(args.session_id))\n    session_stopped_no_error.set_result(True)\n\nspeech_recognizer.session_started.connect(session_started)\nspeech_recognizer.session_stopped.connect(session_stopped)\n</code></pre> <p>STEP 8: Subscribe to the canceled event.</p> main.py<pre><code>def canceled(args):\n    print(\"CANCELED: Reason={}\".format(args.cancellation_details.reason))\n    if args.cancellation_details.reason == CancellationReason.EndOfStream:\n        print(\"CANCELED: End of the audio stream was reached.\")\n    elif args.cancellation_details.reason == CancellationReason.Error:\n        print(\"CANCELED: ErrorDetails={}\".format(args.cancellation_details.error_details))\n        print(\"CANCELED: Did you update the subscription info?\")\n    session_stopped_no_error.set_result(args.cancellation_details.reason != CancellationReason.Error)\n\nspeech_recognizer.canceled.connect(canceled)\n</code></pre> <p>STEP 9: Allow the user to press ENTER to stop recognition.</p> main.py<pre><code>threading.Thread(target=lambda: (\n    input(\"\"),\n    speech_recognizer.stop_continuous_recognition())\n).start()\n</code></pre> <p>STEP 10: Start speech recognition.</p> main.py<pre><code>speech_recognizer.start_continuous_recognition()\nprint(\"Listening, press ENTER to stop...\")\n</code></pre> <p>STEP 11: Wait for the session to stop.</p> main.py<pre><code>exit_code = 0 if session_stopped_no_error.result() == True else 1\nos._exit(exit_code)\n</code></pre>"},{"location":"speech/speech-to-text-with-file-py/sample-overview/#requirementstxt","title":"requirements.txt","text":"requirements.txt<pre><code>azure-cognitiveservices-speech&gt;=1.35.0\n</code></pre>"},{"location":"speech/speech-to-text-with-keyword-cs/sample-overview/","title":"Speech Recognition with Keyword Spotting in C#","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure Cognitive Services Speech SDK to recognize speech with keyword spotting in a C# console application.</p> <p> Program.cs</p> How to generate this sample Command<pre><code>ai dev new speech-to-text-with-keyword --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text-with-keyword' in 'speech-to-text-with-keyword-cs' (3 files)...\n\nProgram.cs\n\nGenerating 'speech-to-text-with-keyword' in 'speech-to-text-with-keyword-cs' (1 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-with-keyword-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the connection and configuration details from environment variables.</p> Program.cs<pre><code>var speechKey = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_KEY\") ?? \"&lt;insert your Speech Service API key here&gt;\";\nvar speechRegion = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_REGION\") ?? \"&lt;insert your Speech Service region here&gt;\";\nvar speechLanguage = \"en-US\"; // BCP-47 language code\nvar inputFileName = args.Length == 1 ? args[0] : null;\nvar keywordFileName = \"keyword.table\";\n</code></pre> <p>STEP 2: Check if the input file and keyword file exist.</p> Program.cs<pre><code>if (inputFileName != null &amp;&amp; !File.Exists(inputFileName))\n{\n    Console.WriteLine($\"ERROR: Cannot find audio input file: {inputFileName}\");\n    return 1;\n}\n\nif (!File.Exists(keywordFileName))\n{\n    Console.WriteLine($\"ERROR: Cannot find keyword file: {keywordFileName}\");\n    return 1;\n}\n</code></pre> <p>STEP 3: Create instances of a speech config, source language config, and audio config.</p> Program.cs<pre><code>var config = SpeechConfig.FromSubscription(speechKey, speechRegion);\nvar sourceLanguageConfig = SourceLanguageConfig.FromLanguage(speechLanguage);\nvar audioConfig = inputFileName != null\n    ? AudioConfig.FromWavFileInput(inputFileName)\n    : AudioConfig.FromDefaultMicrophoneInput();\n</code></pre> <p>STEP 4: Create the speech recognizer and subscribe to events.</p> Program.cs<pre><code>using (var recognizer = new SpeechRecognizer(config, sourceLanguageConfig, audioConfig))\n{\n    recognizer.Recognizing += (s, e) =&gt; HandleRecognizingEvent(e);\n    recognizer.Recognized += (s, e) =&gt; HandleRecognizedEvent(e);\n\n    var sessionStoppedNoError = new TaskCompletionSource&lt;bool&gt;(TaskCreationOptions.RunContinuationsAsynchronously);\n    recognizer.SessionStarted += (s, e) =&gt; HandleSessionStartedEvent(e);\n    recognizer.SessionStopped += (s, e) =&gt; HandleSessionStoppedEvent(e);\n    recognizer.Canceled += (s, e) =&gt; HandleCanceledEvent(e, sessionStoppedNoError);\n\n    Task.Run(() =&gt;\n    {\n        while (Console.ReadKey().Key != ConsoleKey.Enter) { }\n        recognizer.StopContinuousRecognitionAsync();\n    });\n\n    var keywordModel = KeywordRecognitionModel.FromFile(keywordFileName);\n\n    await recognizer.StartKeywordRecognitionAsync(keywordModel);\n    Console.WriteLine(\"Listening for keyword; press ENTER to stop ...\\n\");\n\n    return await sessionStoppedNoError.Task ? 0 : 1;\n}\n</code></pre> <p>STEP 5: Define the event handlers.</p> Program.cs<pre><code>private static void HandleRecognizingEvent(SpeechRecognitionEventArgs e)\n{\n    Console.WriteLine($\"RECOGNIZING: {e.Result.Text}\");\n}\n\nprivate static void HandleRecognizedEvent(SpeechRecognitionEventArgs e)\n{\n    if (e.Result.Reason == ResultReason.RecognizedKeyword &amp;&amp; !string.IsNullOrEmpty(e.Result.Text))\n    {\n        Console.WriteLine($\"RECOGNIZED: {e.Result.Text}\\n\");\n    }\n    else if (e.Result.Reason == ResultReason.RecognizedSpeech &amp;&amp; !string.IsNullOrEmpty(e.Result.Text))\n    {\n        Console.WriteLine($\"RECOGNIZED: {e.Result.Text}\\n\");\n    }\n    else if (e.Result.Reason == ResultReason.NoMatch)\n    {\n        Console.WriteLine($\"NOMATCH: Speech could not be recognized.\\n\");\n    }\n}\n\nprivate static void HandleSessionStartedEvent(SessionEventArgs e)\n{\n    Console.WriteLine($\"SESSION STARTED: {e.SessionId}.\\n\");\n}\n\nprivate static void HandleSessionStoppedEvent(SessionEventArgs e)\n{\n    Console.WriteLine($\"SESSION STOPPED: {e.SessionId}.\");\n}\n\nprivate static void HandleCanceledEvent(SpeechRecognitionCanceledEventArgs e, TaskCompletionSource&lt;bool&gt; sessionStoppedNoError)\n{\n    Console.WriteLine($\"CANCELED: Reason={e.Reason}\");\n\n    if (e.Reason == CancellationReason.EndOfStream)\n    {\n        Console.WriteLine($\"CANCELED: End of the audio stream was reached.\");\n    }\n    else if (e.Reason == CancellationReason.Error)\n    {\n        Console.WriteLine($\"CANCELED: ErrorCode={e.ErrorCode}\");\n        Console.WriteLine($\"CANCELED: ErrorDetails={e.ErrorDetails}\");\n        Console.WriteLine($\"CANCELED: Did you update the subscription info?\");\n    }\n\n    sessionStoppedNoError.TrySetResult(e.Reason != CancellationReason.Error);\n}\n</code></pre>"},{"location":"speech/speech-to-text-with-keyword-py/sample-overview/","title":"Speech Recognition with Keyword Spotting in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure Cognitive Services Speech SDK for speech recognition with keyword spotting in a Python console application.</p> <p> main.py </p> How to generate this sample Command<pre><code>ai dev new speech-to-text-with-keyword --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text-with-keyword' in 'speech-to-text-with-keyword-py' (2 files)...\n\nmain.py\nrequirements.txt\n\nGenerating 'speech-to-text-with-keyword' in 'speech-to-text-with-keyword-py' (2 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-with-keyword-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Import necessary modules and set up configuration.</p> main.py<pre><code>from concurrent.futures import Future\nfrom azure.cognitiveservices.speech import SpeechConfig, SpeechRecognizer, AudioConfig, KeywordRecognitionModel, CancellationReason\nimport threading\nimport os\nimport sys\n\n# Connection and configuration details required\nspeech_key = os.environ.get('AZURE_AI_SPEECH_KEY') or '&lt;insert your Speech Service API key here&gt;'\nservice_region = os.environ.get('AZURE_AI_SPEECH_REGION') or '&lt;insert your Speech Service region here&gt;'\nspeech_language = 'en-US'\ninput_file = sys.argv[1] if len(sys.argv) == 2 else None\nkeyword_file = 'keyword.table'\n</code></pre> <p>STEP 2: Check for input and keyword files, and create configurations.</p> main.py<pre><code># Check to see if the input file exists\nif input_file is not None and not os.path.exists(input_file):\n    print(f'ERROR: Cannot find audio input file: {input_file}')\n    sys.exit(1)\n\n# Check to see if the keyword file exists\nif not os.path.exists(keyword_file):\n    print(f'ERROR: Cannot find keyword file: {keyword_file}')\n    sys.exit(1)\n\n# Create instances of a speech config and audio config\nspeech_config = SpeechConfig(subscription=speech_key, region=service_region, speech_recognition_language=speech_language)\naudio_config = AudioConfig(filename=input_file) if input_file is not None else AudioConfig(use_default_microphone=True)\n</code></pre> <p>STEP 3: Initialize the speech recognizer and connect event handlers.</p> main.py<pre><code># Create the speech recognizer from the above configuration information\nspeech_recognizer = SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)\n\n# Subscribe to the recognizing and recognized events. As the user speaks individual\n# utterances, intermediate recognition results are sent to the recognizing event,\n# and the final recognition results are sent to the recognized event.\ndef recognizing(args):\n    print(f'RECOGNIZING: {args.result.text}')\n\ndef recognized(args):\n    if args.result.reason.name == 'RecognizedKeyword' and args.result.text != '':\n        print(f'RECOGNIZED: {args.result.text}\\n')\n    elif args.result.reason.name == 'RecognizedSpeech' and args.result.text != '':\n        print(f'RECOGNIZED: {args.result.text}\\n')\n    elif args.result.reason.name == 'NoMatch':\n        print('NOMATCH: Speech could not be recognized.\\n')\n\nspeech_recognizer.recognizing.connect(recognizing)\nspeech_recognizer.recognized.connect(recognized)\n</code></pre> <p>STEP 4: Handle session events and start keyword recognition.</p> main.py<pre><code># Create a future to wait for the session to stop. This is needed in console apps to\n# prevent the main thread from terminating while the recognition is running\n# asynchronously on a separate background thread.\nsession_stopped_no_error = Future()\n\n# Subscribe to session_started and session_stopped events. These events are useful for\n# logging the start and end of a speech recognition session. In console apps, this is\n# used to allow the application to block the main thread until recognition is complete.\ndef session_started(args):\n    print(f'SESSION STARTED: {args.session_id}\\n')\n\ndef session_stopped(args):\n    print(f'SESSION STOPPED: {args.session_id}')\n\nspeech_recognizer.session_started.connect(session_started)\nspeech_recognizer.session_stopped.connect(session_stopped)\n\n# Subscribe to the canceled event, which indicates that the recognition operation\n# was stopped/canceled, likely due to an error of some kind.\ndef canceled(args):\n    print(f'CANCELED: Reason={args.cancellation_details.reason}')\n\n    # Check the CancellationReason for more detailed information.\n    if args.cancellation_details.reason == CancellationReason.EndOfStream:\n        print('CANCELED: End of the audio stream was reached.')\n    elif args.cancellation_details.reason == CancellationReason.Error:\n        print(f'CANCELED: ErrorDetails={args.cancellation_details.error_details}')\n        print('CANCELED: Did you update the subscription info?')\n\n    # Set the future's result so the main thread can exit\n    session_stopped_no_error.set_result(args.cancellation_details.reason != CancellationReason.Error)\n\nspeech_recognizer.canceled.connect(canceled)\n\n# Allow the user to press ENTER to stop recognition\nthreading.Thread(target=lambda: (\n    input(''),\n    speech_recognizer.stop_continuous_recognition())\n).start()\n\n# Start keyword recognition\nkeyword_model = KeywordRecognitionModel(filename=keyword_file)\nspeech_recognizer.start_keyword_recognition(keyword_model)\nprint('Listening for keyword; press ENTER to stop ...')\n\n# Wait for the session to stop. result() will not return until the recognition\n# session stops, and the result will indicate whether the session completed\n# or was canceled.\nexit_code = 0 if session_stopped_no_error.result() == True else 1\nos._exit(exit_code)\n</code></pre>"},{"location":"speech/speech-to-text-with-translation-cs/sample-overview/","title":"Speech-to-Text with Translation in C#","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure Cognitive Services Speech SDK to perform speech-to-text translation in a C# console application.</p> <p> Program.cs  SpeechToTextWithTranslation.csproj </p> How to generate this sample Command<pre><code>ai dev new speech-to-text-with-translation --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text-with-translation' in 'speech-to-text-with-translation-cs' (2 files)...\n\nSpeechToTextWithTranslation.csproj\nProgram.cs\n\nGenerating 'speech-to-text-with-translation' in 'speech-to-text-with-translation-cs' (2 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-with-translation-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables and initialize the input file name.</p> Program.cs<pre><code>var speechKey = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_KEY\") ?? \"&lt;insert your Speech Service API key here&gt;\";\nvar speechRegion = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_REGION\") ?? \"&lt;insert your Speech Service region here&gt;\";\nvar speechLanguage = \"en-US\"; // BCP-47 language code\nvar targetLanguages = new string[] { \"de\", \"fr\" };\nvar inputFileName = args.Length == 1 ? args[0] : null;\n</code></pre> <p>STEP 2: Check if the input file exists.</p> Program.cs<pre><code>if (inputFileName != null &amp;&amp; !File.Exists(inputFileName))\n{\n    Console.WriteLine($\"ERROR: Cannot find audio input file: {inputFileName}\");\n    return 1;\n}\n</code></pre> <p>STEP 3: Initialize the speech translation config and audio config with the configuration settings.</p> Program.cs<pre><code>var config = SpeechTranslationConfig.FromSubscription(speechKey, speechRegion);\nvar audioConfig = inputFileName != null\n    ? AudioConfig.FromWavFileInput(inputFileName)\n    : AudioConfig.FromDefaultMicrophoneInput();\n</code></pre> <p>STEP 4: Set the source and target languages for translation.</p> Program.cs<pre><code>config.SpeechRecognitionLanguage = speechLanguage;\nforeach (var targetLanguage in targetLanguages)\n{\n    config.AddTargetLanguage(targetLanguage);\n}\n</code></pre> <p>STEP 5: Create the speech recognizer from the configuration information and handle events.</p> Program.cs<pre><code>using (var recognizer = new TranslationRecognizer(config, audioConfig))\n{\n    recognizer.Recognizing += (s, e) =&gt; HandleRecognizingEvent(e);\n    recognizer.Recognized += (s, e) =&gt; HandleRecognizedEvent(e);\n    recognizer.SessionStarted += (s, e) =&gt; HandleSessionStartedEvent(e);\n    recognizer.SessionStopped += (s, e) =&gt; HandleSessionStoppedEvent(e, sessionStoppedNoError);\n    recognizer.Canceled += (s, e) =&gt; HandleCanceledEvent(e, sessionStoppedNoError);\n</code></pre> <p>STEP 6: Start continuous recognition and wait for the user to stop it.</p> Program.cs<pre><code>    await recognizer.StartContinuousRecognitionAsync();\n    Console.WriteLine(\"Listening; press ENTER to stop ...\\n\");\n\n    Task.Run(() =&gt;\n    {\n        while (Console.ReadKey().Key != ConsoleKey.Enter) { }\n        recognizer.StopContinuousRecognitionAsync();\n    });\n\n    await recognizer.StartContinuousRecognitionAsync();\n    Console.WriteLine(\"Listening; press ENTER to stop ...\\n\");\n    return await sessionStoppedNoError.Task ? 0 : 1;\n}\n</code></pre> <p>STEP 7: Implement event handlers to process recognition results and session events.</p> Program.cs<pre><code>private static void HandleRecognizingEvent(TranslationRecognitionEventArgs e)\n{\n    Console.WriteLine($\"RECOGNIZING: {e.Result.Text}\");\n    foreach (var lang in e.Result.Translations.Keys)\n    {\n        Console.WriteLine($\"TRANSLATING into '{lang}': {e.Result.Translations[lang]}\");\n    }\n    Console.WriteLine();\n}\n\nprivate static void HandleRecognizedEvent(TranslationRecognitionEventArgs e)\n{\n    if (e.Result.Reason == ResultReason.TranslatedSpeech &amp;&amp; e.Result.Text.Length != 0)\n    {\n        Console.WriteLine($\"RECOGNIZED: {e.Result.Text}\");\n        foreach (var lang in e.Result.Translations.Keys)\n        {\n            Console.WriteLine($\"TRANSLATED into '{lang}': {e.Result.Translations[lang]}\");\n        }\n        Console.WriteLine();\n    }\n    else if (e.Result.Reason == ResultReason.RecognizedSpeech &amp;&amp; e.Result.Text.Length != 0)\n    {\n        Console.WriteLine($\"RECOGNIZED: {e.Result.Text} (text could not be translated)\");\n    }\n    else if (e.Result.Reason == ResultReason.NoMatch)\n    {\n        Console.WriteLine($\"NOMATCH: Speech could not be recognized.\\n\");\n    }\n}\n\nprivate static void HandleSessionStartedEvent(SessionEventArgs e)\n{\n    Console.WriteLine($\"SESSION STARTED: {e.SessionId}.\\n\");\n}\n\nprivate static void HandleSessionStoppedEvent(SessionEventArgs e, TaskCompletionSource&lt;bool&gt; sessionStoppedNoError)\n{\n    Console.WriteLine($\"SESSION STOPPED: {e.SessionId}.\");\n    sessionStoppedNoError.TrySetResult(true); // Set the result so the main thread can exit\n}\n\nprivate static void HandleCanceledEvent(TranslationRecognitionCanceledEventArgs e, TaskCompletionSource&lt;bool&gt; sessionStoppedNoError)\n{\n    Console.WriteLine($\"CANCELED: Reason={e.Reason}\");\n    if (e.Reason == CancellationReason.EndOfStream)\n    {\n        Console.WriteLine($\"CANCELED: End of the audio stream was reached.\");\n    }\n    else if (e.Reason == CancellationReason.Error)\n    {\n        Console.WriteLine($\"CANCELED: ErrorCode={e.ErrorCode}\");\n        Console.WriteLine($\"CANCELED: ErrorDetails={e.ErrorDetails}\");\n        Console.WriteLine($\"CANCELED: Did you update the subscription info?\");\n    }\n    sessionStoppedNoError.TrySetResult(e.Reason != CancellationReason.Error);\n}\n</code></pre>"},{"location":"speech/speech-to-text-with-translation-py/sample-overview/","title":"Speech Translation with Python","text":"<p>This sample demonstrates how to use the Azure Cognitive Services Speech SDK to perform speech-to-text translation in a Python console application.</p> <p> main.py  requirements.txt </p> How to generate this sample Command<pre><code>ai dev new speech-to-text-with-translation --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'speech-to-text-with-translation' in 'speech-to-text-with-translation-py' (3 files)...\n\nmain.py\nrequirements.txt\n\nGenerating 'speech-to-text-with-translation' in 'speech-to-text-with-translation-py' (3 files)... DONE!\n</code></pre>"},{"location":"speech/speech-to-text-with-translation-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Import necessary libraries and set up configuration.</p> main.py<pre><code>from concurrent.futures import Future\nfrom azure.cognitiveservices.speech.translation import SpeechTranslationConfig, TranslationRecognizer, ResultReason\nfrom azure.cognitiveservices.speech import AudioConfig, CancellationReason\nimport threading\nimport os\nimport sys\n\nspeech_key = os.environ.get('AZURE_AI_SPEECH_KEY') or \"&lt;insert your Speech Service API key here&gt;\"\nservice_region = os.environ.get('AZURE_AI_SPEECH_REGION') or \"&lt;insert your Speech Service region here&gt;\"\nspeech_language = \"en-US\"\ntarget_languages = ['de', 'fr']\ninput_file = sys.argv[1] if len(sys.argv) == 2 else None\n</code></pre> <p>STEP 2: Check if the input file exists.</p> main.py<pre><code>if input_file is not None and not os.path.exists(input_file):\n    print(\"ERROR: Cannot find audio input file: {}\".format(input_file))\n    sys.exit(1)\n</code></pre> <p>STEP 3: Create instances of a speech translation config and audio config.</p> main.py<pre><code>speech_config = SpeechTranslationConfig(subscription=speech_key, region=service_region)\naudio_config = AudioConfig(filename=input_file) if input_file is not None else AudioConfig(use_default_microphone=True)\n\nspeech_config.speech_recognition_language = speech_language\nfor target_language in target_languages:\n    speech_config.add_target_language(target_language)\n\nspeech_recognizer = TranslationRecognizer(translation_config=speech_config, audio_config=audio_config)\n</code></pre> <p>STEP 4: Set the source and target language(s) for translation.</p> main.py<pre><code>speech_config.speech_recognition_language = speech_language\nfor target_language in target_languages:\n    speech_config.add_target_language(target_language)\n</code></pre> <p>STEP 5: Create the speech recognizer from the configuration information.</p> main.py<pre><code>speech_recognizer = TranslationRecognizer(translation_config=speech_config, audio_config=audio_config)\n</code></pre> <p>STEP 6: Subscribe to Recognizing and Recognized events to process intermediate and final results.</p> main.py<pre><code>def recognizing(args):\n    print(\"RECOGNIZING: {}\".format(args.result.text))\n    for lang in args.result.translations.keys():\n        print(\"TRANSLATING into '{}': {}\".format(lang, args.result.translations[lang]))\n    print()\n\ndef recognized(args):\n    if args.result.reason == ResultReason.TranslatedSpeech and args.result.text:\n        print(\"RECOGNIZED: {}\".format(args.result.text))\n        for lang in args.result.translations.keys():\n            print(\"TRANSLATED into '{}': {}\".format(lang, args.result.translations[lang]))\n        print()\n    elif args.result.reason == ResultReason.RecognizedSpeech and args.result.text:\n        print(\"RECOGNIZED: {} (text could not be translated)\".format(args.result.text))\n    elif args.result.reason == ResultReason.NoMatch:\n        print(\"NOMATCH: Speech could not be recognized.\\n\")\n\nspeech_recognizer.recognizing.connect(recognizing)\nspeech_recognizer.recognized.connect(recognized)\n</code></pre> <p>STEP 7: Handle session start/stop and cancellation events.</p> main.py<pre><code>session_stopped_no_error = Future()\n\ndef session_started(args):\n    print(\"SESSION STARTED: {}\\n\".format(args.session_id))\n\ndef session_stopped(args):\n    print(\"SESSION STOPPED: {}\".format(args.session_id))\n    session_stopped_no_error.set_result(True)\n\nspeech_recognizer.session_started.connect(session_started)\nspeech_recognizer.session_stopped.connect(session_stopped)\n\ndef canceled(args):\n    print(\"CANCELED: Reason={}\".format(args.cancellation_details.reason))\n    if args.cancellation_details.reason == CancellationReason.EndOfStream:\n        print(\"CANCELED: End of the audio stream was reached.\")\n    elif args.cancellation_details.reason == CancellationReason.Error:\n        print(\"CANCELED: ErrorDetails={}\".format(args.cancellation_details.error_details))\n        print(\"CANCELED: Did you update the subscription info?\")\n    session_stopped_no_error.set_result(args.cancellation_details.reason != CancellationReason.Error)\n\nspeech_recognizer.canceled.connect(canceled)\n</code></pre> <p>STEP 8: Start continuous recognition and wait for ENTER to stop.</p> main.py<pre><code>threading.Thread(target=lambda: (\n    input(\"\"),\n    speech_recognizer.stop_continuous_recognition())\n).start()\n\nspeech_recognizer.start_continuous_recognition()\nprint(\"Listening, press ENTER to stop...\")\n\nexit_code = 0 if session_stopped_no_error.result() == True else 1\nos._exit(exit_code)\n</code></pre>"},{"location":"speech/text-to-speech-cs/sample-overview/","title":"Text-to-Speech in C#","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use the Azure Text-to-Speech API in a C# console application.</p> <p> Program.cs</p> How to generate this sample Command<pre><code>ai dev new text-to-speech --csharp\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'text-to-speech' in 'text-to-speech-cs' (2 files)...\n\nTextToSpeech.csproj\nProgram.cs\n\nGenerating 'text-to-speech' in 'text-to-speech-cs' (2 files)... DONE!\n</code></pre>"},{"location":"speech/text-to-speech-cs/sample-overview/#programcs","title":"Program.cs","text":"<p>STEP 1: Read the configuration settings from environment variables.</p> Program.cs<pre><code>var speechKey = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_KEY\") ?? \"&lt;insert your Speech Service API key here&gt;\";\nvar speechRegion = Environment.GetEnvironmentVariable(\"AZURE_AI_SPEECH_REGION\") ?? \"&lt;insert your Speech Service region here&gt;\";\nvar voiceName = \"en-US-AndrewNeural\"; // You can list voice names with `ai speech synthesize --list-voices`\n</code></pre> <p>STEP 2: Create instances of a speech config and audio config, and set the voice name to use.</p> Program.cs<pre><code>var config = SpeechConfig.FromSubscription(speechKey, speechRegion);\nvar audioConfig = AudioConfig.FromDefaultSpeakerOutput();\nconfig.SpeechSynthesisVoiceName = voiceName;\n</code></pre> <p>STEP 3: Create the speech synthesizer from the above configuration information.</p> Program.cs<pre><code>using (var synthesizer = new SpeechSynthesizer(config, audioConfig))\n</code></pre> <p>STEP 4: Get text from the user to synthesize.</p> Program.cs<pre><code>Console.Write(\"Enter text: \");\nvar text = Console.ReadLine();\n</code></pre> <p>STEP 5: Start speech synthesis, and return after it has completed.</p> Program.cs<pre><code>var result = await synthesizer.SpeakTextAsync(text);\n</code></pre> <p>STEP 6: Check the result.</p> Program.cs<pre><code>if (result.Reason == ResultReason.SynthesizingAudioCompleted)\n{\n    Console.WriteLine($\"SYNTHESIZED: {result.AudioData.Length} byte(s)\");\n}\nelse if (result.Reason == ResultReason.Canceled)\n{\n    var cancellation = SpeechSynthesisCancellationDetails.FromResult(result);\n    Console.WriteLine($\"CANCELED: Reason={cancellation.Reason}\");\n\n    if (cancellation.Reason == CancellationReason.Error)\n    {\n        Console.WriteLine($\"CANCELED: ErrorCode={cancellation.ErrorCode}\");\n        Console.WriteLine($\"CANCELED: ErrorDetails={cancellation.ErrorDetails}\");\n        Console.WriteLine($\"CANCELED: Did you update the subscription info?\");\n    }\n}\n</code></pre>"},{"location":"speech/text-to-speech-py/sample-overview/","title":"Azure Speech Synthesis in Python","text":"This page was automatically generated by AI; not yet reviewed for accuracy... <p>The content and code samples on this page were generated by using the <code>ai</code> CLI with customized prompts in this repository.</p> <p>It's cool, but, it's experimental. \ud83d\ude01</p> <p>Please review the content and code before using it in your application.</p> <p>This sample demonstrates how to use Azure Speech Synthesis in a Python application.</p> <p> main.py  requirements.txt </p> How to generate this sample Command<pre><code>ai dev new text-to-speech --python\n</code></pre> Output<pre><code>AI - Azure AI CLI, Version 1.0.0\nCopyright (c) 2024 Microsoft Corporation. All Rights Reserved.\n\nThis PUBLIC PREVIEW version may change at any time.\nSee: https://aka.ms/azure-ai-cli-public-preview\n\nGenerating 'text-to-speech' in 'text-to-speech-py' (2 files)...\n\nmain.py\nrequirements.txt\n\nGenerating 'text-to-speech' in 'text-to-speech-py' (2 files)... DONE!\n</code></pre>"},{"location":"speech/text-to-speech-py/sample-overview/#mainpy","title":"main.py","text":"<p>STEP 1: Import necessary modules and retrieve configuration from environment variables.</p> main.py<pre><code>from azure.cognitiveservices.speech import SpeechConfig, SpeechSynthesizer, SpeechSynthesisResult, SpeechSynthesisCancellationDetails, CancellationReason, ResultReason\nfrom azure.cognitiveservices.speech.audio import AudioOutputConfig\nimport os\n\nspeech_key = os.environ.get('AZURE_AI_SPEECH_KEY') or \"&lt;insert your Speech Service API key here&gt;\"\nservice_region = os.environ.get('AZURE_AI_SPEECH_REGION') or \"&lt;insert your Speech Service region here&gt;\"\nvoice_name = 'en-US-AndrewNeural'\n</code></pre> <p>STEP 2: Create instances of a speech config and audio config, and set the voice name to use.</p> main.py<pre><code>speech_config = SpeechConfig(subscription=speech_key, region=service_region)\nspeech_config.speech_synthesis_voice_name = voice_name\naudio_config = AudioOutputConfig(use_default_speaker=True)\n</code></pre> <p>STEP 3: Create the speech synthesizer from the above configuration information.</p> main.py<pre><code>speech_synthesizer = SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)\n</code></pre> <p>STEP 4: Get text from the user to synthesize.</p> main.py<pre><code>text = input('Enter text: ')\n</code></pre> <p>STEP 5: Start speech synthesis, and return after it has completed.</p> main.py<pre><code>result = speech_synthesizer.speak_text_async(text).get()\n</code></pre> <p>STEP 6: Check the result.</p> main.py<pre><code>if result.reason == ResultReason.SynthesizingAudioCompleted:\n    print('SYNTHESIZED: {} byte(s)'.format(len(result.audio_data)))\nelif result.reason == ResultReason.Canceled:\n    cancellation_details = result.cancellation_details\n    print('CANCELED: Reason={}'.format(cancellation_details.reason))\n    if cancellation_details.reason == CancellationReason.Error:\n        print('CANCELED: ErrorDetails={}'.format(cancellation_details.error_details))\n        print('CANCELED: Did you update the subscription info?')\n</code></pre>"}]}